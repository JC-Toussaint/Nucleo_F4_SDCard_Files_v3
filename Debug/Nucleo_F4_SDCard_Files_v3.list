
Nucleo_F4_SDCard_Files_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  08009d28  08009d28  00019d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a624  0800a624  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a624  0800a624  0001a624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a62c  0800a62c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a62c  0800a62c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a630  0800a630  0001a630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f48  200001e0  0800a814  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004128  0800a814  00024128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f86  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be2  00000000  00000000  00034196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00036d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  000379f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b6e  00000000  00000000  00038540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fffc  00000000  00000000  0004f0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aead  00000000  00000000  0005f0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9f57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f8  00000000  00000000  000e9fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000ee4a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000ee570  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d10 	.word	0x08009d10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009d10 	.word	0x08009d10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <BSP_SD_Init>:
  * @retval The SD Response: 
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
uint8_t BSP_SD_Init(void)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure IO functionalities for SD pin */
  SD_IO_Init();
 8000eb4:	f000 ff60 	bl	8001d78 <SD_IO_Init>

  /* SD detection pin is not physically mapped on the Adafruit shield */
  SdStatus = SD_PRESENT;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <BSP_SD_Init+0x18>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
  
  /* SD initialized and set to SPI mode properly */
  return SD_GoIdleState();
 8000ebe:	f000 fd47 	bl	8001950 <SD_GoIdleState>
 8000ec2:	4603      	mov	r3, r0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200001fc 	.word	0x200001fc

08000ecc <BSP_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
uint8_t BSP_SD_GetCardInfo(SD_CardInfo *pCardInfo)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint8_t status;

  status = SD_GetCSDRegister(&(pCardInfo->Csd));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f9ac 	bl	8001234 <SD_GetCSDRegister>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3318      	adds	r3, #24
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fba7 	bl	8001638 <SD_GetCIDRegister>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	73fb      	strb	r3, [r7, #15]
  if(flag_SDHC == 1 )
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <BSP_SD_GetCardInfo+0xdc>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d11d      	bne.n	8000f38 <BSP_SD_GetCardInfo+0x6c>
  {
    pCardInfo->LogBlockSize = 512;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8000f14:	3301      	adds	r3, #1
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1c:	fb03 f302 	mul.w	r3, r3, r2
 8000f20:	029a      	lsls	r2, r3, #10
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	639a      	str	r2, [r3, #56]	; 0x38
 8000f36:	e032      	b.n	8000f9e <BSP_SD_GetCardInfo+0xd2>
  }
  else
  {
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	891b      	ldrh	r3, [r3, #8]
 8000f3c:	f3c3 038b 	ubfx	r3, r3, #2, #12
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	461a      	mov	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7b1b      	ldrb	r3, [r3, #12]
 8000f52:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3302      	adds	r3, #2
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->LogBlockSize = 512;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f66:	63da      	str	r2, [r3, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	795b      	ldrb	r3, [r3, #5]
 8000f6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	2301      	movs	r3, #1
 8000f76:	4093      	lsls	r3, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f86:	fb02 f203 	mul.w	r2, r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f96:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001fe 	.word	0x200001fe

08000fac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: This parameter is used for compatibility with BSP implementation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	; 0x38
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6178      	str	r0, [r7, #20]
 8000fb4:	6139      	str	r1, [r7, #16]
 8000fb6:	60fa      	str	r2, [r7, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  uint32_t offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t retr = BSP_SD_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t *ptr = NULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  SD_CmdAnswer_typedef response;
  uint16_t BlockSize = 512;
 8000fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fcc:	847b      	strh	r3, [r7, #34]	; 0x22
  
  /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and 
     Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000fce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000fd0:	f107 001c 	add.w	r0, r7, #28
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	23ff      	movs	r3, #255	; 0xff
 8000fda:	2110      	movs	r1, #16
 8000fdc:	f000 fbe0 	bl	80017a0 <SD_SendCmd>
  SD_IO_CSState(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f000 ff07 	bl	8001df4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000fe6:	20ff      	movs	r0, #255	; 0xff
 8000fe8:	f000 ff31 	bl	8001e4e <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8000fec:	7f3b      	ldrb	r3, [r7, #28]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d153      	bne.n	800109a <BSP_SD_ReadBlocks+0xee>
  {
     goto error;
  }
  
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8000ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f005 ff93 	bl	8006f20 <malloc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if( ptr == NULL )
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	2b00      	cmp	r3, #0
 8001002:	d04c      	beq.n	800109e <BSP_SD_ReadBlocks+0xf2>
  {
     goto error;
  }
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 8001004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001006:	461a      	mov	r2, r3
 8001008:	21ff      	movs	r1, #255	; 0xff
 800100a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800100c:	f005 ff98 	bl	8006f40 <memset>

  /* Data transfer */
  while (NumOfBlocks--)
 8001010:	e03a      	b.n	8001088 <BSP_SD_ReadBlocks+0xdc>
  {
    /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
    /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (ReadAddr + offset) * (flag_SDHC == 1 ? 1: BlockSize), 0xFF, SD_ANSWER_R1_EXPECTED);
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001016:	441a      	add	r2, r3
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <BSP_SD_ReadBlocks+0x120>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d001      	beq.n	8001024 <BSP_SD_ReadBlocks+0x78>
 8001020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001022:	e000      	b.n	8001026 <BSP_SD_ReadBlocks+0x7a>
 8001024:	2301      	movs	r3, #1
 8001026:	fb02 f203 	mul.w	r2, r2, r3
 800102a:	4638      	mov	r0, r7
 800102c:	2300      	movs	r3, #0
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	23ff      	movs	r3, #255	; 0xff
 8001032:	2111      	movs	r1, #17
 8001034:	f000 fbb4 	bl	80017a0 <SD_SendCmd>
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	463a      	mov	r2, r7
 800103e:	6810      	ldr	r0, [r2, #0]
 8001040:	6018      	str	r0, [r3, #0]
 8001042:	7912      	ldrb	r2, [r2, #4]
 8001044:	711a      	strb	r2, [r3, #4]
    if ( response.r1 != SD_R1_NO_ERROR)
 8001046:	7f3b      	ldrb	r3, [r7, #28]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d12a      	bne.n	80010a2 <BSP_SD_ReadBlocks+0xf6>
    {
      goto error;
    }

    /* Now look for the data token to signify the start of the data */
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 800104c:	20fe      	movs	r0, #254	; 0xfe
 800104e:	f000 fd9b 	bl	8001b88 <SD_WaitData>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d126      	bne.n	80010a6 <BSP_SD_ReadBlocks+0xfa>
    {
      /* Read the SD block data : read NumByteToRead data */
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	4413      	add	r3, r2
 800105e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001060:	4619      	mov	r1, r3
 8001062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001064:	f000 fee2 	bl	8001e2c <SD_IO_WriteReadData>

      /* Set next read address*/
      offset += BlockSize;
 8001068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800106a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800106c:	4413      	add	r3, r2
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001070:	20ff      	movs	r0, #255	; 0xff
 8001072:	f000 feec 	bl	8001e4e <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);      
 8001076:	20ff      	movs	r0, #255	; 0xff
 8001078:	f000 fee9 	bl	8001e4e <SD_IO_WriteByte>
    {
      goto error;
    }
    
    /* End the command data read cycle */
    SD_IO_CSState(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 feb9 	bl	8001df4 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001082:	20ff      	movs	r0, #255	; 0xff
 8001084:	f000 fee3 	bl	8001e4e <SD_IO_WriteByte>
  while (NumOfBlocks--)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	60fa      	str	r2, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1bf      	bne.n	8001012 <BSP_SD_ReadBlocks+0x66>
  }
  
  retr = BSP_SD_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001098:	e006      	b.n	80010a8 <BSP_SD_ReadBlocks+0xfc>
     goto error;
 800109a:	bf00      	nop
 800109c:	e004      	b.n	80010a8 <BSP_SD_ReadBlocks+0xfc>
     goto error;
 800109e:	bf00      	nop
 80010a0:	e002      	b.n	80010a8 <BSP_SD_ReadBlocks+0xfc>
      goto error;
 80010a2:	bf00      	nop
 80010a4:	e000      	b.n	80010a8 <BSP_SD_ReadBlocks+0xfc>
      goto error;
 80010a6:	bf00      	nop
  
error :  
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 fea3 	bl	8001df4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80010ae:	20ff      	movs	r0, #255	; 0xff
 80010b0:	f000 fecd 	bl	8001e4e <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <BSP_SD_ReadBlocks+0x114>
 80010ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010bc:	f005 ff38 	bl	8006f30 <free>
  
  /* Return the reponse */
  return retr;
 80010c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3730      	adds	r7, #48	; 0x30
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001fe 	.word	0x200001fe

080010d0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: This parameter is used for compatibility with BSP implementation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6178      	str	r0, [r7, #20]
 80010d8:	6139      	str	r1, [r7, #16]
 80010da:	60fa      	str	r2, [r7, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  uint32_t offset = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t retr = BSP_SD_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t *ptr = NULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  SD_CmdAnswer_typedef response;
  uint16_t BlockSize = 512;
 80010ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f0:	847b      	strh	r3, [r7, #34]	; 0x22
  
  /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and 
     Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80010f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80010f4:	f107 001c 	add.w	r0, r7, #28
 80010f8:	2300      	movs	r3, #0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	23ff      	movs	r3, #255	; 0xff
 80010fe:	2110      	movs	r1, #16
 8001100:	f000 fb4e 	bl	80017a0 <SD_SendCmd>
  SD_IO_CSState(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f000 fe75 	bl	8001df4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800110a:	20ff      	movs	r0, #255	; 0xff
 800110c:	f000 fe9f 	bl	8001e4e <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8001110:	7f3b      	ldrb	r3, [r7, #28]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d155      	bne.n	80011c2 <BSP_SD_WriteBlocks+0xf2>
  {
    goto error;
  }
  
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8001116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001118:	4618      	mov	r0, r3
 800111a:	f005 ff01 	bl	8006f20 <malloc>
 800111e:	4603      	mov	r3, r0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  if (ptr == NULL)
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	2b00      	cmp	r3, #0
 8001126:	d04e      	beq.n	80011c6 <BSP_SD_WriteBlocks+0xf6>
  {
    goto error;
  }
  
  /* Data transfer */
  while (NumOfBlocks--)
 8001128:	e042      	b.n	80011b0 <BSP_SD_WriteBlocks+0xe0>
  {
    /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
       Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (WriteAddr + offset) * (flag_SDHC == 1 ? 1 : BlockSize), 0xFF, SD_ANSWER_R1_EXPECTED);
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112e:	441a      	add	r2, r3
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <BSP_SD_WriteBlocks+0x124>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d001      	beq.n	800113c <BSP_SD_WriteBlocks+0x6c>
 8001138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800113a:	e000      	b.n	800113e <BSP_SD_WriteBlocks+0x6e>
 800113c:	2301      	movs	r3, #1
 800113e:	fb02 f203 	mul.w	r2, r2, r3
 8001142:	4638      	mov	r0, r7
 8001144:	2300      	movs	r3, #0
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	23ff      	movs	r3, #255	; 0xff
 800114a:	2118      	movs	r1, #24
 800114c:	f000 fb28 	bl	80017a0 <SD_SendCmd>
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	463a      	mov	r2, r7
 8001156:	6810      	ldr	r0, [r2, #0]
 8001158:	6018      	str	r0, [r3, #0]
 800115a:	7912      	ldrb	r2, [r2, #4]
 800115c:	711a      	strb	r2, [r3, #4]
    if (response.r1 != SD_R1_NO_ERROR)
 800115e:	7f3b      	ldrb	r3, [r7, #28]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d132      	bne.n	80011ca <BSP_SD_WriteBlocks+0xfa>
    {
      goto error;
    }
    
    /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001164:	20ff      	movs	r0, #255	; 0xff
 8001166:	f000 fe72 	bl	8001e4e <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800116a:	20ff      	movs	r0, #255	; 0xff
 800116c:	f000 fe6f 	bl	8001e4e <SD_IO_WriteByte>

    /* Send the data token to signify the start of the data */
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 8001170:	20fe      	movs	r0, #254	; 0xfe
 8001172:	f000 fe6c 	bl	8001e4e <SD_IO_WriteByte>

    /* Write the block data to SD */
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117a:	4413      	add	r3, r2
 800117c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800117e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fe53 	bl	8001e2c <SD_IO_WriteReadData>
    
    /* Set next write address */
    offset += BlockSize;
 8001186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800118a:	4413      	add	r3, r2
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Put CRC bytes (not really needed by us, but required by SD) */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800118e:	20ff      	movs	r0, #255	; 0xff
 8001190:	f000 fe5d 	bl	8001e4e <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001194:	20ff      	movs	r0, #255	; 0xff
 8001196:	f000 fe5a 	bl	8001e4e <SD_IO_WriteByte>

    /* Read data response */
    if (SD_GetDataResponse() != SD_DATA_OK)
 800119a:	f000 fba3 	bl	80018e4 <SD_GetDataResponse>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d114      	bne.n	80011ce <BSP_SD_WriteBlocks+0xfe>
    {
      /* Set response value to failure */
      goto error;
    }

    SD_IO_CSState(1);    
 80011a4:	2001      	movs	r0, #1
 80011a6:	f000 fe25 	bl	8001df4 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80011aa:	20ff      	movs	r0, #255	; 0xff
 80011ac:	f000 fe4f 	bl	8001e4e <SD_IO_WriteByte>
  while (NumOfBlocks--)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1e5a      	subs	r2, r3, #1
 80011b4:	60fa      	str	r2, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1b7      	bne.n	800112a <BSP_SD_WriteBlocks+0x5a>
  }
  retr = BSP_SD_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80011c0:	e006      	b.n	80011d0 <BSP_SD_WriteBlocks+0x100>
    goto error;
 80011c2:	bf00      	nop
 80011c4:	e004      	b.n	80011d0 <BSP_SD_WriteBlocks+0x100>
    goto error;
 80011c6:	bf00      	nop
 80011c8:	e002      	b.n	80011d0 <BSP_SD_WriteBlocks+0x100>
      goto error;
 80011ca:	bf00      	nop
 80011cc:	e000      	b.n	80011d0 <BSP_SD_WriteBlocks+0x100>
      goto error;
 80011ce:	bf00      	nop
  
error :
  if(ptr != NULL) free(ptr);
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <BSP_SD_WriteBlocks+0x10c>
 80011d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011d8:	f005 feaa 	bl	8006f30 <free>
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);    
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 fe09 	bl	8001df4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80011e2:	20ff      	movs	r0, #255	; 0xff
 80011e4:	f000 fe33 	bl	8001e4e <SD_IO_WriteByte>
  
  /* Return the reponse */
  return retr;
 80011e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3730      	adds	r7, #48	; 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001fe 	.word	0x200001fe

080011f8 <BSP_SD_GetCardState>:
  * @brief  Returns the SD status.
  * @param  None
  * @retval The SD status.
  */
uint8_t BSP_SD_GetCardState(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
  SD_CmdAnswer_typedef retr;
  
  /* Send CMD13 (SD_SEND_STATUS) to get SD status */
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 80011fe:	4638      	mov	r0, r7
 8001200:	2302      	movs	r3, #2
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	2200      	movs	r2, #0
 8001208:	210d      	movs	r1, #13
 800120a:	f000 fac9 	bl	80017a0 <SD_SendCmd>
  SD_IO_CSState(1);    
 800120e:	2001      	movs	r0, #1
 8001210:	f000 fdf0 	bl	8001df4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001214:	20ff      	movs	r0, #255	; 0xff
 8001216:	f000 fe1a 	bl	8001e4e <SD_IO_WriteByte>
  
  /* Find SD status according to card state */
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 800121a:	783b      	ldrb	r3, [r7, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d104      	bne.n	800122a <BSP_SD_GetCardState+0x32>
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <BSP_SD_GetCardState+0x32>
  {
    return BSP_SD_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <BSP_SD_GetCardState+0x34>
  }

  return BSP_SD_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd: pointer on an SCD register structure
  * @retval SD status
  */
uint8_t SD_GetCSDRegister(SD_CSD* Csd)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b08d      	sub	sp, #52	; 0x34
 8001238:	af02      	add	r7, sp, #8
 800123a:	6078      	str	r0, [r7, #4]
  uint16_t counter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t CSD_Tab[16];
  uint8_t retr = BSP_SD_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  SD_CmdAnswer_typedef response;
  
  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001246:	f107 000c 	add.w	r0, r7, #12
 800124a:	2300      	movs	r3, #0
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	23ff      	movs	r3, #255	; 0xff
 8001250:	2200      	movs	r2, #0
 8001252:	2109      	movs	r1, #9
 8001254:	f000 faa4 	bl	80017a0 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8001258:	7b3b      	ldrb	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 81dd 	bne.w	800161a <SD_GetCSDRegister+0x3e6>
  {
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8001260:	20fe      	movs	r0, #254	; 0xfe
 8001262:	f000 fc91 	bl	8001b88 <SD_WaitData>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 81d6 	bne.w	800161a <SD_GetCSDRegister+0x3e6>
    {
      for (counter = 0; counter < 16; counter++)
 800126e:	2300      	movs	r3, #0
 8001270:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001272:	e00d      	b.n	8001290 <SD_GetCSDRegister+0x5c>
      {
        /* Store CSD register value on CSD_Tab */
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001274:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8001276:	20ff      	movs	r0, #255	; 0xff
 8001278:	f000 fde9 	bl	8001e4e <SD_IO_WriteByte>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001284:	4423      	add	r3, r4
 8001286:	f803 2c14 	strb.w	r2, [r3, #-20]
      for (counter = 0; counter < 16; counter++)
 800128a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800128c:	3301      	adds	r3, #1
 800128e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001290:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001292:	2b0f      	cmp	r3, #15
 8001294:	d9ee      	bls.n	8001274 <SD_GetCSDRegister+0x40>
      }
      
      /* Get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001296:	20ff      	movs	r0, #255	; 0xff
 8001298:	f000 fdd9 	bl	8001e4e <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800129c:	20ff      	movs	r0, #255	; 0xff
 800129e:	f000 fdd6 	bl	8001e4e <SD_IO_WriteByte>
      /*************************************************************************
        CSD header decoding 
      *************************************************************************/
      
      /* Byte 0 */
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 80012a2:	7d3b      	ldrb	r3, [r7, #20]
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	b2d9      	uxtb	r1, r3
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	7813      	ldrb	r3, [r2, #0]
 80012b2:	f361 0301 	bfi	r3, r1, #0, #2
 80012b6:	7013      	strb	r3, [r2, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 80012b8:	7d3b      	ldrb	r3, [r7, #20]
 80012ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012be:	b2d9      	uxtb	r1, r3
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	7813      	ldrb	r3, [r2, #0]
 80012c4:	f361 0387 	bfi	r3, r1, #2, #6
 80012c8:	7013      	strb	r3, [r2, #0]
      
      /* Byte 1 */
      Csd->TAAC = CSD_Tab[1];
 80012ca:	7d7a      	ldrb	r2, [r7, #21]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	705a      	strb	r2, [r3, #1]
      
      /* Byte 2 */
      Csd->NSAC = CSD_Tab[2];
 80012d0:	7dba      	ldrb	r2, [r7, #22]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	709a      	strb	r2, [r3, #2]
      
      /* Byte 3 */
      Csd->MaxBusClkFrec = CSD_Tab[3];
 80012d6:	7dfa      	ldrb	r2, [r7, #23]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	70da      	strb	r2, [r3, #3]
      
      /* Byte 4/5 */
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 80012dc:	7e3b      	ldrb	r3, [r7, #24]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	7e7b      	ldrb	r3, [r7, #25]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f2:	b299      	uxth	r1, r3
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	8893      	ldrh	r3, [r2, #4]
 80012f8:	f361 030b 	bfi	r3, r1, #0, #12
 80012fc:	8093      	strh	r3, [r2, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 80012fe:	7e7b      	ldrb	r3, [r7, #25]
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	b2d9      	uxtb	r1, r3
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	7953      	ldrb	r3, [r2, #5]
 800130a:	f361 1307 	bfi	r3, r1, #4, #4
 800130e:	7153      	strb	r3, [r2, #5]
      
      /* Byte 6 */
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8001310:	7ebb      	ldrb	r3, [r7, #26]
 8001312:	09db      	lsrs	r3, r3, #7
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	b2d9      	uxtb	r1, r3
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	7993      	ldrb	r3, [r2, #6]
 8001320:	f361 0300 	bfi	r3, r1, #0, #1
 8001324:	7193      	strb	r3, [r2, #6]
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 8001326:	7ebb      	ldrb	r3, [r7, #26]
 8001328:	119b      	asrs	r3, r3, #6
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	b2d9      	uxtb	r1, r3
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	7993      	ldrb	r3, [r2, #6]
 8001334:	f361 0341 	bfi	r3, r1, #1, #1
 8001338:	7193      	strb	r3, [r2, #6]
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 800133a:	7ebb      	ldrb	r3, [r7, #26]
 800133c:	115b      	asrs	r3, r3, #5
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	b2d9      	uxtb	r1, r3
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	7993      	ldrb	r3, [r2, #6]
 8001348:	f361 0382 	bfi	r3, r1, #2, #1
 800134c:	7193      	strb	r3, [r2, #6]
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 800134e:	7ebb      	ldrb	r3, [r7, #26]
 8001350:	111b      	asrs	r3, r3, #4
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	b2d9      	uxtb	r1, r3
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	7993      	ldrb	r3, [r2, #6]
 800135c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001360:	7193      	strb	r3, [r2, #6]

      /*************************************************************************
        CSD v1/v2 decoding  
      *************************************************************************/
     
      if(flag_SDHC == 0)
 8001362:	4bb4      	ldr	r3, [pc, #720]	; (8001634 <SD_GetCSDRegister+0x400>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d15f      	bne.n	800142a <SD_GetCSDRegister+0x1f6>
      {
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 800136a:	7ebb      	ldrb	r3, [r7, #26]
 800136c:	109b      	asrs	r3, r3, #2
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	b2d9      	uxtb	r1, r3
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	7a13      	ldrb	r3, [r2, #8]
 8001378:	f361 0301 	bfi	r3, r1, #0, #2
 800137c:	7213      	strb	r3, [r2, #8]
        
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10) 
 800137e:	7ebb      	ldrb	r3, [r7, #26]
 8001380:	029b      	lsls	r3, r3, #10
 8001382:	b21b      	sxth	r3, r3
 8001384:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001388:	b21a      	sxth	r2, r3
                                    |  (CSD_Tab[7] << 2)
 800138a:	7efb      	ldrb	r3, [r7, #27]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21a      	sxth	r2, r3
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8001394:	7f3b      	ldrb	r3, [r7, #28]
 8001396:	099b      	lsrs	r3, r3, #6
 8001398:	b2db      	uxtb	r3, r3
 800139a:	b21b      	sxth	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b21b      	sxth	r3, r3
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	b299      	uxth	r1, r3
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10) 
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	8913      	ldrh	r3, [r2, #8]
 80013aa:	f361 038d 	bfi	r3, r1, #2, #12
 80013ae:	8113      	strh	r3, [r2, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80013b0:	7f3b      	ldrb	r3, [r7, #28]
 80013b2:	10db      	asrs	r3, r3, #3
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	b2d9      	uxtb	r1, r3
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	7a93      	ldrb	r3, [r2, #10]
 80013be:	f361 0302 	bfi	r3, r1, #0, #3
 80013c2:	7293      	strb	r3, [r2, #10]
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 80013c4:	7f3b      	ldrb	r3, [r7, #28]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	b2d9      	uxtb	r1, r3
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	7a93      	ldrb	r3, [r2, #10]
 80013d0:	f361 03c5 	bfi	r3, r1, #3, #3
 80013d4:	7293      	strb	r3, [r2, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 80013d6:	7f7b      	ldrb	r3, [r7, #29]
 80013d8:	095b      	lsrs	r3, r3, #5
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	7ad3      	ldrb	r3, [r2, #11]
 80013e6:	f361 0302 	bfi	r3, r1, #0, #3
 80013ea:	72d3      	strb	r3, [r2, #11]
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 80013ec:	7f7b      	ldrb	r3, [r7, #29]
 80013ee:	109b      	asrs	r3, r3, #2
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	b2d9      	uxtb	r1, r3
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	7ad3      	ldrb	r3, [r2, #11]
 80013fa:	f361 03c5 	bfi	r3, r1, #3, #3
 80013fe:	72d3      	strb	r3, [r2, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8001400:	7f7b      	ldrb	r3, [r7, #29]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	b25b      	sxtb	r3, r3
 8001406:	f003 0306 	and.w	r3, r3, #6
 800140a:	b25a      	sxtb	r2, r3
                                       |((CSD_Tab[10] & 0x80) >> 7);
 800140c:	7fbb      	ldrb	r3, [r7, #30]
 800140e:	09db      	lsrs	r3, r3, #7
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b25b      	sxtb	r3, r3
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	b2d9      	uxtb	r1, r3
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	7b13      	ldrb	r3, [r2, #12]
 8001422:	f361 0302 	bfi	r3, r1, #0, #3
 8001426:	7313      	strb	r3, [r2, #12]
 8001428:	e028      	b.n	800147c <SD_GetCSDRegister+0x248>
      }
      else
      {
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 800142a:	7ebb      	ldrb	r3, [r7, #26]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	b25b      	sxtb	r3, r3
 8001430:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001434:	b25a      	sxtb	r2, r3
 8001436:	7efb      	ldrb	r3, [r7, #27]
 8001438:	099b      	lsrs	r3, r3, #6
 800143a:	b2db      	uxtb	r3, r3
 800143c:	b25b      	sxtb	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b25b      	sxtb	r3, r3
 8001442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001446:	b2d9      	uxtb	r1, r3
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	7a13      	ldrb	r3, [r2, #8]
 800144c:	f361 0305 	bfi	r3, r1, #0, #6
 8001450:	7213      	strb	r3, [r2, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];    
 8001452:	7efb      	ldrb	r3, [r7, #27]
 8001454:	041b      	lsls	r3, r3, #16
 8001456:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800145a:	7f3b      	ldrb	r3, [r7, #28]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	4313      	orrs	r3, r2
 8001460:	7f7a      	ldrb	r2, [r7, #29]
 8001462:	4313      	orrs	r3, r2
 8001464:	f3c3 0115 	ubfx	r1, r3, #0, #22
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6893      	ldr	r3, [r2, #8]
 800146c:	f361 139b 	bfi	r3, r1, #6, #22
 8001470:	6093      	str	r3, [r2, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	7ad3      	ldrb	r3, [r2, #11]
 8001476:	f36f 1304 	bfc	r3, #4, #1
 800147a:	72d3      	strb	r3, [r2, #11]
      }    
            
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 800147c:	7fbb      	ldrb	r3, [r7, #30]
 800147e:	119b      	asrs	r3, r3, #6
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	b2d9      	uxtb	r1, r3
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	7c13      	ldrb	r3, [r2, #16]
 800148a:	f361 0300 	bfi	r3, r1, #0, #1
 800148e:	7413      	strb	r3, [r2, #16]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8001490:	7fbb      	ldrb	r3, [r7, #30]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	b25b      	sxtb	r3, r3
 8001496:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800149a:	b25a      	sxtb	r2, r3
                              |((CSD_Tab[11] & 0x80) >> 7);
 800149c:	7ffb      	ldrb	r3, [r7, #31]
 800149e:	09db      	lsrs	r3, r3, #7
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ac:	b2d9      	uxtb	r1, r3
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	7c13      	ldrb	r3, [r2, #16]
 80014b2:	f361 0347 	bfi	r3, r1, #1, #7
 80014b6:	7413      	strb	r3, [r2, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 80014b8:	7ffb      	ldrb	r3, [r7, #31]
 80014ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014be:	b2d9      	uxtb	r1, r3
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	7c53      	ldrb	r3, [r2, #17]
 80014c4:	f361 0306 	bfi	r3, r1, #0, #7
 80014c8:	7453      	strb	r3, [r2, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 80014ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014ce:	09db      	lsrs	r3, r3, #7
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	b2d9      	uxtb	r1, r3
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	7c53      	ldrb	r3, [r2, #17]
 80014dc:	f361 13c7 	bfi	r3, r1, #7, #1
 80014e0:	7453      	strb	r3, [r2, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 80014e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014e6:	115b      	asrs	r3, r3, #5
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	b2d9      	uxtb	r1, r3
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	7c93      	ldrb	r3, [r2, #18]
 80014f2:	f361 0301 	bfi	r3, r1, #0, #2
 80014f6:	7493      	strb	r3, [r2, #18]
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 80014f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fc:	109b      	asrs	r3, r3, #2
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	b2d9      	uxtb	r1, r3
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	7c93      	ldrb	r3, [r2, #18]
 8001508:	f361 0384 	bfi	r3, r1, #2, #3
 800150c:	7493      	strb	r3, [r2, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 800150e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	b25b      	sxtb	r3, r3
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	b25a      	sxtb	r2, r3
                              |((CSD_Tab[13] & 0xC0) >> 6);
 800151c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b25b      	sxtb	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b25b      	sxtb	r3, r3
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	b2d9      	uxtb	r1, r3
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	7cd3      	ldrb	r3, [r2, #19]
 8001534:	f361 0303 	bfi	r3, r1, #0, #4
 8001538:	74d3      	strb	r3, [r2, #19]
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 800153a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800153e:	115b      	asrs	r3, r3, #5
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	7cd3      	ldrb	r3, [r2, #19]
 800154a:	f361 1304 	bfi	r3, r1, #4, #1
 800154e:	74d3      	strb	r3, [r2, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 8001550:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	b2d9      	uxtb	r1, r3
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	7d13      	ldrb	r3, [r2, #20]
 800155e:	f361 0304 	bfi	r3, r1, #0, #5
 8001562:	7513      	strb	r3, [r2, #20]
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8001564:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001568:	09db      	lsrs	r3, r3, #7
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	b2d9      	uxtb	r1, r3
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	7d13      	ldrb	r3, [r2, #20]
 8001576:	f361 1345 	bfi	r3, r1, #5, #1
 800157a:	7513      	strb	r3, [r2, #20]
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 800157c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001580:	119b      	asrs	r3, r3, #6
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	b2d9      	uxtb	r1, r3
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	7d13      	ldrb	r3, [r2, #20]
 800158c:	f361 1386 	bfi	r3, r1, #6, #1
 8001590:	7513      	strb	r3, [r2, #20]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8001592:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001596:	115b      	asrs	r3, r3, #5
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	b2d9      	uxtb	r1, r3
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	7d13      	ldrb	r3, [r2, #20]
 80015a2:	f361 13c7 	bfi	r3, r1, #7, #1
 80015a6:	7513      	strb	r3, [r2, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 80015a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015ac:	111b      	asrs	r3, r3, #4
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	b2d9      	uxtb	r1, r3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	7d53      	ldrb	r3, [r2, #21]
 80015b8:	f361 0300 	bfi	r3, r1, #0, #1
 80015bc:	7553      	strb	r3, [r2, #21]
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 80015be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015c2:	109b      	asrs	r3, r3, #2
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	b2d9      	uxtb	r1, r3
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	7d53      	ldrb	r3, [r2, #21]
 80015ce:	f361 0342 	bfi	r3, r1, #1, #2
 80015d2:	7553      	strb	r3, [r2, #21]
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 80015d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	b2d9      	uxtb	r1, r3
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	7d53      	ldrb	r3, [r2, #21]
 80015e2:	f361 03c4 	bfi	r3, r1, #3, #2
 80015e6:	7553      	strb	r3, [r2, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 80015e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015f4:	b2d9      	uxtb	r1, r3
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	7d93      	ldrb	r3, [r2, #22]
 80015fa:	f361 0306 	bfi	r3, r1, #0, #7
 80015fe:	7593      	strb	r3, [r2, #22]
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8001600:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	b2d9      	uxtb	r1, r3
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	7d93      	ldrb	r3, [r2, #22]
 800160e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001612:	7593      	strb	r3, [r2, #22]
      
      retr = BSP_SD_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    }
  }
  
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 800161a:	2001      	movs	r0, #1
 800161c:	f000 fbea 	bl	8001df4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001620:	20ff      	movs	r0, #255	; 0xff
 8001622:	f000 fc14 	bl	8001e4e <SD_IO_WriteByte>
  
  /* Return the reponse */
  return retr;
 8001626:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 800162a:	4618      	mov	r0, r3
 800162c:	372c      	adds	r7, #44	; 0x2c
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}
 8001632:	bf00      	nop
 8001634:	200001fe 	.word	0x200001fe

08001638 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
uint8_t SD_GetCIDRegister(SD_CID* Cid)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t retr = BSP_SD_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t CID_Tab[16];
  SD_CmdAnswer_typedef response;
  
  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 800164a:	f107 0008 	add.w	r0, r7, #8
 800164e:	2300      	movs	r3, #0
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	23ff      	movs	r3, #255	; 0xff
 8001654:	2200      	movs	r2, #0
 8001656:	210a      	movs	r1, #10
 8001658:	f000 f8a2 	bl	80017a0 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 800165c:	7a3b      	ldrb	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 8091 	bne.w	8001786 <SD_GetCIDRegister+0x14e>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8001664:	20fe      	movs	r0, #254	; 0xfe
 8001666:	f000 fa8f 	bl	8001b88 <SD_WaitData>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	f040 808a 	bne.w	8001786 <SD_GetCIDRegister+0x14e>
    {
      /* Store CID register value on CID_Tab */
      for (counter = 0; counter < 16; counter++)
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
 8001676:	e00d      	b.n	8001694 <SD_GetCIDRegister+0x5c>
      {
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001678:	20ff      	movs	r0, #255	; 0xff
 800167a:	f000 fbe8 	bl	8001e4e <SD_IO_WriteByte>
 800167e:	4603      	mov	r3, r0
 8001680:	4619      	mov	r1, r3
 8001682:	f107 0210 	add.w	r2, r7, #16
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	4413      	add	r3, r2
 800168a:	460a      	mov	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
      for (counter = 0; counter < 16; counter++)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d9ee      	bls.n	8001678 <SD_GetCIDRegister+0x40>
      }
      
      /* Get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800169a:	20ff      	movs	r0, #255	; 0xff
 800169c:	f000 fbd7 	bl	8001e4e <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80016a0:	20ff      	movs	r0, #255	; 0xff
 80016a2:	f000 fbd4 	bl	8001e4e <SD_IO_WriteByte>
      
      /* Byte 0 */
      Cid->ManufacturerID = CID_Tab[0];
 80016a6:	7c3a      	ldrb	r2, [r7, #16]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	701a      	strb	r2, [r3, #0]
      
      /* Byte 1 */
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 80016ac:	7c7b      	ldrb	r3, [r7, #17]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	805a      	strh	r2, [r3, #2]
      
      /* Byte 2 */
      Cid->OEM_AppliID |= CID_Tab[2];
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	885b      	ldrh	r3, [r3, #2]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	7cbb      	ldrb	r3, [r7, #18]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	805a      	strh	r2, [r3, #2]
      
      /* Byte 3 */
      Cid->ProdName1 = CID_Tab[3] << 24;
 80016ca:	7cfb      	ldrb	r3, [r7, #19]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	461a      	mov	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	605a      	str	r2, [r3, #4]
      
      /* Byte 4 */
      Cid->ProdName1 |= CID_Tab[4] << 16;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	7d3a      	ldrb	r2, [r7, #20]
 80016da:	0412      	lsls	r2, r2, #16
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	605a      	str	r2, [r3, #4]
      
      /* Byte 5 */
      Cid->ProdName1 |= CID_Tab[5] << 8;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	7d7a      	ldrb	r2, [r7, #21]
 80016e8:	0212      	lsls	r2, r2, #8
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	605a      	str	r2, [r3, #4]
      
      /* Byte 6 */
      Cid->ProdName1 |= CID_Tab[6];
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	7dba      	ldrb	r2, [r7, #22]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	605a      	str	r2, [r3, #4]
      
      /* Byte 7 */
      Cid->ProdName2 = CID_Tab[7];
 80016fc:	7dfa      	ldrb	r2, [r7, #23]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	721a      	strb	r2, [r3, #8]
      
      /* Byte 8 */
      Cid->ProdRev = CID_Tab[8];
 8001702:	7e3a      	ldrb	r2, [r7, #24]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	725a      	strb	r2, [r3, #9]
      
      /* Byte 9 */
      Cid->ProdSN = CID_Tab[9] << 24;
 8001708:	7e7b      	ldrb	r3, [r7, #25]
 800170a:	061b      	lsls	r3, r3, #24
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60da      	str	r2, [r3, #12]
      
      /* Byte 10 */
      Cid->ProdSN |= CID_Tab[10] << 16;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	7eba      	ldrb	r2, [r7, #26]
 8001718:	0412      	lsls	r2, r2, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	60da      	str	r2, [r3, #12]
      
      /* Byte 11 */
      Cid->ProdSN |= CID_Tab[11] << 8;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	7efa      	ldrb	r2, [r7, #27]
 8001726:	0212      	lsls	r2, r2, #8
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60da      	str	r2, [r3, #12]
      
      /* Byte 12 */
      Cid->ProdSN |= CID_Tab[12];
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	7f3a      	ldrb	r2, [r7, #28]
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60da      	str	r2, [r3, #12]
      
      /* Byte 13 */
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7c1b      	ldrb	r3, [r3, #16]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	7f7b      	ldrb	r3, [r7, #29]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	741a      	strb	r2, [r3, #16]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 800174e:	7f7b      	ldrb	r3, [r7, #29]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001758:	b29a      	uxth	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	825a      	strh	r2, [r3, #18]
      
      /* Byte 14 */
      Cid->ManufactDate |= CID_Tab[14];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8a5b      	ldrh	r3, [r3, #18]
 8001762:	b29a      	uxth	r2, r3
 8001764:	7fbb      	ldrb	r3, [r7, #30]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b29a      	uxth	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	825a      	strh	r2, [r3, #18]
      
      /* Byte 15 */
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8001770:	7ffb      	ldrb	r3, [r7, #31]
 8001772:	085b      	lsrs	r3, r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	751a      	strb	r2, [r3, #20]
      Cid->Reserved2 = 1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	755a      	strb	r2, [r3, #21]

      retr = BSP_SD_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
  }
  
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 8001786:	2001      	movs	r0, #1
 8001788:	f000 fb34 	bl	8001df4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800178c:	20ff      	movs	r0, #255	; 0xff
 800178e:	f000 fb5e 	bl	8001e4e <SD_IO_WriteByte>
  
  /* Return the reponse */
  return retr;
 8001792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001796:	4618      	mov	r0, r3
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <SD_SendCmd>:
  * @param  Crc: The CRC.
  * @param  Answer: SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD status
  */
SD_CmdAnswer_typedef SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	461a      	mov	r2, r3
 80017ac:	460b      	mov	r3, r1
 80017ae:	72fb      	strb	r3, [r7, #11]
 80017b0:	4613      	mov	r3, r2
 80017b2:	72bb      	strb	r3, [r7, #10]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80017b4:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <SD_SendCmd+0x140>)
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017be:	6018      	str	r0, [r3, #0]
 80017c0:	3304      	adds	r3, #4
 80017c2:	7019      	strb	r1, [r3, #0]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */
  
  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 80017c4:	7afb      	ldrb	r3, [r7, #11]
 80017c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f887 3020 	strb.w	r3, [r7, #32]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	0e1b      	lsrs	r3, r3, #24
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 80017f6:	7abb      	ldrb	r3, [r7, #10]
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    
  /* Send the command */
  SD_IO_CSState(0);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 faf6 	bl	8001df4 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8001808:	f107 0118 	add.w	r1, r7, #24
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	2206      	movs	r2, #6
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fb0a 	bl	8001e2c <SD_IO_WriteReadData>
  
  switch(Answer)
 8001818:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800181c:	2b05      	cmp	r3, #5
 800181e:	d851      	bhi.n	80018c4 <SD_SendCmd+0x124>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <SD_SendCmd+0x88>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001841 	.word	0x08001841
 800182c:	0800184b 	.word	0x0800184b
 8001830:	0800187f 	.word	0x0800187f
 8001834:	08001893 	.word	0x08001893
 8001838:	080018c5 	.word	0x080018c5
 800183c:	08001893 	.word	0x08001893
  {
  case SD_ANSWER_R1_EXPECTED :
    retr.r1 = SD_ReadData();
 8001840:	f000 f98a 	bl	8001b58 <SD_ReadData>
 8001844:	4603      	mov	r3, r0
 8001846:	743b      	strb	r3, [r7, #16]
    break;
 8001848:	e03d      	b.n	80018c6 <SD_SendCmd+0x126>
  case SD_ANSWER_R1B_EXPECTED :
    retr.r1 = SD_ReadData();
 800184a:	f000 f985 	bl	8001b58 <SD_ReadData>
 800184e:	4603      	mov	r3, r0
 8001850:	743b      	strb	r3, [r7, #16]
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001852:	20ff      	movs	r0, #255	; 0xff
 8001854:	f000 fafb 	bl	8001e4e <SD_IO_WriteByte>
 8001858:	4603      	mov	r3, r0
 800185a:	747b      	strb	r3, [r7, #17]
    /* Set CS High */
    SD_IO_CSState(1);
 800185c:	2001      	movs	r0, #1
 800185e:	f000 fac9 	bl	8001df4 <SD_IO_CSState>
    HAL_Delay(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f000 fb76 	bl	8001f54 <HAL_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 8001868:	2000      	movs	r0, #0
 800186a:	f000 fac3 	bl	8001df4 <SD_IO_CSState>
    
    /* Wait IO line return 0xFF */
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF); 
 800186e:	bf00      	nop
 8001870:	20ff      	movs	r0, #255	; 0xff
 8001872:	f000 faec 	bl	8001e4e <SD_IO_WriteByte>
 8001876:	4603      	mov	r3, r0
 8001878:	2bff      	cmp	r3, #255	; 0xff
 800187a:	d1f9      	bne.n	8001870 <SD_SendCmd+0xd0>
    break;
 800187c:	e023      	b.n	80018c6 <SD_SendCmd+0x126>
  case SD_ANSWER_R2_EXPECTED :
    retr.r1 = SD_ReadData();
 800187e:	f000 f96b 	bl	8001b58 <SD_ReadData>
 8001882:	4603      	mov	r3, r0
 8001884:	743b      	strb	r3, [r7, #16]
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001886:	20ff      	movs	r0, #255	; 0xff
 8001888:	f000 fae1 	bl	8001e4e <SD_IO_WriteByte>
 800188c:	4603      	mov	r3, r0
 800188e:	747b      	strb	r3, [r7, #17]
    break;
 8001890:	e019      	b.n	80018c6 <SD_SendCmd+0x126>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    retr.r1 = SD_ReadData();
 8001892:	f000 f961 	bl	8001b58 <SD_ReadData>
 8001896:	4603      	mov	r3, r0
 8001898:	743b      	strb	r3, [r7, #16]
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800189a:	20ff      	movs	r0, #255	; 0xff
 800189c:	f000 fad7 	bl	8001e4e <SD_IO_WriteByte>
 80018a0:	4603      	mov	r3, r0
 80018a2:	747b      	strb	r3, [r7, #17]
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80018a4:	20ff      	movs	r0, #255	; 0xff
 80018a6:	f000 fad2 	bl	8001e4e <SD_IO_WriteByte>
 80018aa:	4603      	mov	r3, r0
 80018ac:	74bb      	strb	r3, [r7, #18]
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80018ae:	20ff      	movs	r0, #255	; 0xff
 80018b0:	f000 facd 	bl	8001e4e <SD_IO_WriteByte>
 80018b4:	4603      	mov	r3, r0
 80018b6:	74fb      	strb	r3, [r7, #19]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80018b8:	20ff      	movs	r0, #255	; 0xff
 80018ba:	f000 fac8 	bl	8001e4e <SD_IO_WriteByte>
 80018be:	4603      	mov	r3, r0
 80018c0:	753b      	strb	r3, [r7, #20]
    break;
 80018c2:	e000      	b.n	80018c6 <SD_SendCmd+0x126>
  default :
    break;
 80018c4:	bf00      	nop
  }  
  return retr;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	461a      	mov	r2, r3
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	6010      	str	r0, [r2, #0]
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	7113      	strb	r3, [r2, #4]
}
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	08009d28 	.word	0x08009d28

080018e4 <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
uint8_t SD_GetDataResponse(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  uint8_t dataresponse;
  uint8_t rvalue = SD_DATA_OTHER_ERROR;
 80018ea:	23ff      	movs	r3, #255	; 0xff
 80018ec:	71fb      	strb	r3, [r7, #7]
  
  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80018ee:	20ff      	movs	r0, #255	; 0xff
 80018f0:	f000 faad 	bl	8001e4e <SD_IO_WriteByte>
 80018f4:	4603      	mov	r3, r0
 80018f6:	71bb      	strb	r3, [r7, #6]
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 80018f8:	20ff      	movs	r0, #255	; 0xff
 80018fa:	f000 faa8 	bl	8001e4e <SD_IO_WriteByte>
 
  /* Mask unused bits */
  switch (dataresponse & 0x1F)
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2b0d      	cmp	r3, #13
 8001906:	d019      	beq.n	800193c <SD_GetDataResponse+0x58>
 8001908:	2b0d      	cmp	r3, #13
 800190a:	dc1a      	bgt.n	8001942 <SD_GetDataResponse+0x5e>
 800190c:	2b05      	cmp	r3, #5
 800190e:	d002      	beq.n	8001916 <SD_GetDataResponse+0x32>
 8001910:	2b0b      	cmp	r3, #11
 8001912:	d010      	beq.n	8001936 <SD_GetDataResponse+0x52>
    break;
  case SD_DATA_WRITE_ERROR:
    rvalue = SD_DATA_WRITE_ERROR;
    break;
  default:
    break;
 8001914:	e015      	b.n	8001942 <SD_GetDataResponse+0x5e>
    rvalue = SD_DATA_OK;
 8001916:	2305      	movs	r3, #5
 8001918:	71fb      	strb	r3, [r7, #7]
    SD_IO_CSState(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f000 fa6a 	bl	8001df4 <SD_IO_CSState>
    SD_IO_CSState(0);
 8001920:	2000      	movs	r0, #0
 8001922:	f000 fa67 	bl	8001df4 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8001926:	bf00      	nop
 8001928:	20ff      	movs	r0, #255	; 0xff
 800192a:	f000 fa90 	bl	8001e4e <SD_IO_WriteByte>
 800192e:	4603      	mov	r3, r0
 8001930:	2bff      	cmp	r3, #255	; 0xff
 8001932:	d1f9      	bne.n	8001928 <SD_GetDataResponse+0x44>
    break;
 8001934:	e006      	b.n	8001944 <SD_GetDataResponse+0x60>
    rvalue =  SD_DATA_CRC_ERROR;
 8001936:	230b      	movs	r3, #11
 8001938:	71fb      	strb	r3, [r7, #7]
    break;
 800193a:	e003      	b.n	8001944 <SD_GetDataResponse+0x60>
    rvalue = SD_DATA_WRITE_ERROR;
 800193c:	230d      	movs	r3, #13
 800193e:	71fb      	strb	r3, [r7, #7]
    break;
 8001940:	e000      	b.n	8001944 <SD_GetDataResponse+0x60>
    break;
 8001942:	bf00      	nop
  }
  
  /* Return response */
  return rvalue;
 8001944:	79fb      	ldrb	r3, [r7, #7]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
uint8_t SD_GoIdleState(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af02      	add	r7, sp, #8
  SD_CmdAnswer_typedef response;
  __IO uint8_t counter = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and 
     wait for In Idle State Response (R1 Format) equal to 0x01 */
  do{
    counter++;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	3301      	adds	r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	73fb      	strb	r3, [r7, #15]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8001964:	f107 0010 	add.w	r0, r7, #16
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2395      	movs	r3, #149	; 0x95
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	f7ff ff15 	bl	80017a0 <SD_SendCmd>
    SD_IO_CSState(1);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 fa3c 	bl	8001df4 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800197c:	20ff      	movs	r0, #255	; 0xff
 800197e:	f000 fa66 	bl	8001e4e <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b63      	cmp	r3, #99	; 0x63
 8001988:	d901      	bls.n	800198e <SD_GoIdleState+0x3e>
    {
      return BSP_SD_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0dd      	b.n	8001b4a <SD_GoIdleState+0x1fa>
    }
  }
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 800198e:	7c3b      	ldrb	r3, [r7, #16]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d1e2      	bne.n	800195a <SD_GoIdleState+0xa>
  
    
  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status 
     and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 8001994:	4638      	mov	r0, r7
 8001996:	2305      	movs	r3, #5
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2387      	movs	r3, #135	; 0x87
 800199c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80019a0:	2108      	movs	r1, #8
 80019a2:	f7ff fefd 	bl	80017a0 <SD_SendCmd>
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	463a      	mov	r2, r7
 80019ac:	6810      	ldr	r0, [r2, #0]
 80019ae:	6018      	str	r0, [r3, #0]
 80019b0:	7912      	ldrb	r2, [r2, #4]
 80019b2:	711a      	strb	r2, [r3, #4]
  SD_IO_CSState(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f000 fa1d 	bl	8001df4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80019ba:	20ff      	movs	r0, #255	; 0xff
 80019bc:	f000 fa47 	bl	8001e4e <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 80019c0:	7c3b      	ldrb	r3, [r7, #16]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d030      	beq.n	8001a2c <SD_GoIdleState+0xdc>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */ 
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80019ca:	4638      	mov	r0, r7
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	23ff      	movs	r3, #255	; 0xff
 80019d2:	2200      	movs	r2, #0
 80019d4:	2137      	movs	r1, #55	; 0x37
 80019d6:	f7ff fee3 	bl	80017a0 <SD_SendCmd>
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	463a      	mov	r2, r7
 80019e0:	6810      	ldr	r0, [r2, #0]
 80019e2:	6018      	str	r0, [r3, #0]
 80019e4:	7912      	ldrb	r2, [r2, #4]
 80019e6:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 80019e8:	2001      	movs	r0, #1
 80019ea:	f000 fa03 	bl	8001df4 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80019ee:	20ff      	movs	r0, #255	; 0xff
 80019f0:	f000 fa2d 	bl	8001e4e <SD_IO_WriteByte>
      
      /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80019f4:	4638      	mov	r0, r7
 80019f6:	2300      	movs	r3, #0
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	23ff      	movs	r3, #255	; 0xff
 80019fc:	2200      	movs	r2, #0
 80019fe:	2129      	movs	r1, #41	; 0x29
 8001a00:	f7ff fece 	bl	80017a0 <SD_SendCmd>
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	463a      	mov	r2, r7
 8001a0a:	6810      	ldr	r0, [r2, #0]
 8001a0c:	6018      	str	r0, [r3, #0]
 8001a0e:	7912      	ldrb	r2, [r2, #4]
 8001a10:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f000 f9ee 	bl	8001df4 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001a18:	20ff      	movs	r0, #255	; 0xff
 8001a1a:	f000 fa18 	bl	8001e4e <SD_IO_WriteByte>
    }
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8001a1e:	7c3b      	ldrb	r3, [r7, #16]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d0d2      	beq.n	80019ca <SD_GoIdleState+0x7a>
    flag_SDHC = 0;
 8001a24:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <SD_GoIdleState+0x204>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	e08d      	b.n	8001b48 <SD_GoIdleState+0x1f8>
  } 
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 8001a2c:	7c3b      	ldrb	r3, [r7, #16]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	f040 8088 	bne.w	8001b44 <SD_GoIdleState+0x1f4>
  {
      /* initialise card V2 */
    do {
      
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */ 
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001a34:	4638      	mov	r0, r7
 8001a36:	2300      	movs	r3, #0
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	23ff      	movs	r3, #255	; 0xff
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2137      	movs	r1, #55	; 0x37
 8001a40:	f7ff feae 	bl	80017a0 <SD_SendCmd>
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	463a      	mov	r2, r7
 8001a4a:	6810      	ldr	r0, [r2, #0]
 8001a4c:	6018      	str	r0, [r3, #0]
 8001a4e:	7912      	ldrb	r2, [r2, #4]
 8001a50:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f000 f9ce 	bl	8001df4 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001a58:	20ff      	movs	r0, #255	; 0xff
 8001a5a:	f000 f9f8 	bl	8001e4e <SD_IO_WriteByte>
      
      /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001a5e:	4638      	mov	r0, r7
 8001a60:	2300      	movs	r3, #0
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	23ff      	movs	r3, #255	; 0xff
 8001a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6a:	2129      	movs	r1, #41	; 0x29
 8001a6c:	f7ff fe98 	bl	80017a0 <SD_SendCmd>
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	463a      	mov	r2, r7
 8001a76:	6810      	ldr	r0, [r2, #0]
 8001a78:	6018      	str	r0, [r3, #0]
 8001a7a:	7912      	ldrb	r2, [r2, #4]
 8001a7c:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f000 f9b8 	bl	8001df4 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001a84:	20ff      	movs	r0, #255	; 0xff
 8001a86:	f000 f9e2 	bl	8001e4e <SD_IO_WriteByte>
    }
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8001a8a:	7c3b      	ldrb	r3, [r7, #16]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d0d1      	beq.n	8001a34 <SD_GoIdleState+0xe4>
    
    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8001a90:	7c3b      	ldrb	r3, [r7, #16]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d031      	beq.n	8001afe <SD_GoIdleState+0x1ae>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */ 
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	23ff      	movs	r3, #255	; 0xff
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2137      	movs	r1, #55	; 0x37
 8001aa6:	f7ff fe7b 	bl	80017a0 <SD_SendCmd>
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	463a      	mov	r2, r7
 8001ab0:	6810      	ldr	r0, [r2, #0]
 8001ab2:	6018      	str	r0, [r3, #0]
 8001ab4:	7912      	ldrb	r2, [r2, #4]
 8001ab6:	711a      	strb	r2, [r3, #4]
        SD_IO_CSState(1);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f000 f99b 	bl	8001df4 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001abe:	20ff      	movs	r0, #255	; 0xff
 8001ac0:	f000 f9c5 	bl	8001e4e <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 8001ac4:	7c3b      	ldrb	r3, [r7, #16]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d001      	beq.n	8001ace <SD_GoIdleState+0x17e>
        {
          return BSP_SD_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e03d      	b.n	8001b4a <SD_GoIdleState+0x1fa>
        }
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001ace:	4638      	mov	r0, r7
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	23ff      	movs	r3, #255	; 0xff
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2129      	movs	r1, #41	; 0x29
 8001ada:	f7ff fe61 	bl	80017a0 <SD_SendCmd>
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	463a      	mov	r2, r7
 8001ae4:	6810      	ldr	r0, [r2, #0]
 8001ae6:	6018      	str	r0, [r3, #0]
 8001ae8:	7912      	ldrb	r2, [r2, #4]
 8001aea:	711a      	strb	r2, [r3, #4]
        SD_IO_CSState(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f000 f981 	bl	8001df4 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001af2:	20ff      	movs	r0, #255	; 0xff
 8001af4:	f000 f9ab 	bl	8001e4e <SD_IO_WriteByte>
      }
      while(response.r1 == SD_R1_IN_IDLE_STATE);        
 8001af8:	7c3b      	ldrb	r3, [r7, #16]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d0cd      	beq.n	8001a9a <SD_GoIdleState+0x14a>
    }  
    
    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8001afe:	4638      	mov	r0, r7
 8001b00:	2303      	movs	r3, #3
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	23ff      	movs	r3, #255	; 0xff
 8001b06:	2200      	movs	r2, #0
 8001b08:	213a      	movs	r1, #58	; 0x3a
 8001b0a:	f7ff fe49 	bl	80017a0 <SD_SendCmd>
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	463a      	mov	r2, r7
 8001b14:	6810      	ldr	r0, [r2, #0]
 8001b16:	6018      	str	r0, [r3, #0]
 8001b18:	7912      	ldrb	r2, [r2, #4]
 8001b1a:	711a      	strb	r2, [r3, #4]
    SD_IO_CSState(1);
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f000 f969 	bl	8001df4 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001b22:	20ff      	movs	r0, #255	; 0xff
 8001b24:	f000 f993 	bl	8001e4e <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 8001b28:	7c3b      	ldrb	r3, [r7, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SD_GoIdleState+0x1e2>
    {
      return BSP_SD_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00b      	b.n	8001b4a <SD_GoIdleState+0x1fa>
    } 
    flag_SDHC = (response.r2 & 0x40) >> 6;
 8001b32:	7c7b      	ldrb	r3, [r7, #17]
 8001b34:	119b      	asrs	r3, r3, #6
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SD_GoIdleState+0x204>)
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	e001      	b.n	8001b48 <SD_GoIdleState+0x1f8>
  }
  else
  {
    return BSP_SD_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <SD_GoIdleState+0x1fa>
  }
  
  return BSP_SD_OK; 
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200001fe 	.word	0x200001fe

08001b58 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  uint8_t timeout = 0x08;
 8001b5e:	2308      	movs	r3, #8
 8001b60:	71fb      	strb	r3, [r7, #7]
  uint8_t readvalue;
 
  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001b62:	20ff      	movs	r0, #255	; 0xff
 8001b64:	f000 f973 	bl	8001e4e <SD_IO_WriteByte>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71bb      	strb	r3, [r7, #6]
    timeout--;
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	71fb      	strb	r3, [r7, #7]
    
  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 8001b72:	79bb      	ldrb	r3, [r7, #6]
 8001b74:	2bff      	cmp	r3, #255	; 0xff
 8001b76:	d102      	bne.n	8001b7e <SD_ReadData+0x26>
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f1      	bne.n	8001b62 <SD_ReadData+0xa>

  /* Right response got */
  return readvalue;
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 8001b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b96:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue;
  
  /* Check if response is got or a timeout is happen */
  
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001b98:	20ff      	movs	r0, #255	; 0xff
 8001b9a:	f000 f958 	bl	8001e4e <SD_IO_WriteByte>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	737b      	strb	r3, [r7, #13]
    timeout--;
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != data) && timeout);
 8001ba8:	7b7a      	ldrb	r2, [r7, #13]
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d002      	beq.n	8001bb6 <SD_WaitData+0x2e>
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <SD_WaitData+0x10>

  if (timeout == 0)
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <SD_WaitData+0x38>
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e000      	b.n	8001bc2 <SD_WaitData+0x3a>
  }

  /* Right response got */
  return BSP_SD_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <BSP_LED_Off>:
  * @param  Led: Specifies the Led to be set off. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <BSP_LED_Off+0x24>)
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	2120      	movs	r1, #32
 8001be0:	2200      	movs	r2, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fd28 	bl	8002638 <HAL_GPIO_WritePin>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <SPIx_MspInit>:

/**
  * @brief  Initializes SPI MSP.
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <SPIx_MspInit+0xb0>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <SPIx_MspInit+0xb0>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <SPIx_MspInit+0xb0>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <SPIx_MspInit+0xb0>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <SPIx_MspInit+0xb0>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6313      	str	r3, [r2, #48]	; 0x30
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <SPIx_MspInit+0xb0>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPI SCK */
  GPIO_InitStruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8001c34:	2320      	movs	r3, #32
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_SCK_AF;
 8001c44:	2305      	movs	r3, #5
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4816      	ldr	r0, [pc, #88]	; (8001ca8 <SPIx_MspInit+0xb4>)
 8001c50:	f000 fa8a 	bl	8002168 <HAL_GPIO_Init>

  /* Configure SPI MISO and MOSI */ 
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 8001c58:	2305      	movs	r3, #5
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4810      	ldr	r0, [pc, #64]	; (8001ca8 <SPIx_MspInit+0xb4>)
 8001c68:	f000 fa7e 	bl	8002168 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001c6c:	2340      	movs	r3, #64	; 0x40
 8001c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <SPIx_MspInit+0xb4>)
 8001c7c:	f000 fa74 	bl	8002168 <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/ 
  /* Enable SPI clock */
  NUCLEO_SPIx_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <SPIx_MspInit+0xb0>)
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <SPIx_MspInit+0xb0>)
 8001c8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SPIx_MspInit+0xb0>)
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000

08001cac <SPIx_Init>:

/**
  * @brief  Initializes SPI HAL.
  */
static void SPIx_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001cb0:	4819      	ldr	r0, [pc, #100]	; (8001d18 <SPIx_Init+0x6c>)
 8001cb2:	f001 fb75 	bl	80033a0 <HAL_SPI_GetState>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d12b      	bne.n	8001d14 <SPIx_Init+0x68>
  {
    /* SPI Config */
    hspi1.Instance = NUCLEO_SPIx;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <SPIx_Init+0x6c>)
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <SPIx_Init+0x70>)
 8001cc0:	601a      	str	r2, [r3, #0]
            Since the provided driver doesn't use read capability from LCD, only constraint 
            on write baudrate is considered.
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK2 max frequency is 100 MHz 
       */ 
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <SPIx_Init+0x6c>)
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	61da      	str	r2, [r3, #28]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <SPIx_Init+0x6c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE; // SPI_PHASE_2EDGE;
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <SPIx_Init+0x6c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; // SPI_POLARITY_HIGH;
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <SPIx_Init+0x6c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <SPIx_Init+0x6c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <SPIx_Init+0x6c>)
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <SPIx_Init+0x6c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <SPIx_Init+0x6c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <SPIx_Init+0x6c>)
 8001cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf8:	619a      	str	r2, [r3, #24]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <SPIx_Init+0x6c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SPIx_Init+0x6c>)
 8001d02:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d06:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&hspi1);
 8001d08:	4803      	ldr	r0, [pc, #12]	; (8001d18 <SPIx_Init+0x6c>)
 8001d0a:	f7ff ff73 	bl	8001bf4 <SPIx_MspInit>
    HAL_SPI_Init(&hspi1);
 8001d0e:	4802      	ldr	r0, [pc, #8]	; (8001d18 <SPIx_Init+0x6c>)
 8001d10:	f001 f918 	bl	8002f44 <HAL_SPI_Init>
  }
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000638 	.word	0x20000638
 8001d1c:	40013000 	.word	0x40013000

08001d20 <SPIx_WriteReadData>:
  * @param  DataIn: value to be written
  * @param  DataOut: value to be read
  * @param  DataLegnth: length of data
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLegnth)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]

  status = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) DataIn, DataOut, DataLegnth, NUCLEO_SPIx_TIMEOUT_MAX);
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d38:	9200      	str	r2, [sp, #0]
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	4807      	ldr	r0, [pc, #28]	; (8001d5c <SPIx_WriteReadData+0x3c>)
 8001d40:	f001 f98c 	bl	800305c <HAL_SPI_TransmitReceive>
 8001d44:	4603      	mov	r3, r0
 8001d46:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <SPIx_WriteReadData+0x32>
  {
    /* Execute user timeout callback */
    SPIx_Error();
 8001d4e:	f000 f807 	bl	8001d60 <SPIx_Error>
  }
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000638 	.word	0x20000638

08001d60 <SPIx_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPIx_Error (void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hspi1);
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <SPIx_Error+0x14>)
 8001d66:	f001 f951 	bl	800300c <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8001d6a:	f7ff ff9f 	bl	8001cac <SPIx_Init>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000638 	.word	0x20000638

08001d78 <SD_IO_Init>:
/**
  * @brief  Initializes the SD Card and put it into StandBy State (Ready for 
  *         data transfer).
  */
void SD_IO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  uint8_t counter;

  /* SD_CS_GPIO Periph clock enable */
  SD_CS_GPIO_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <SD_IO_Init+0x74>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <SD_IO_Init+0x74>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <SD_IO_Init+0x74>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStruct.Pin = SD_CS_PIN;
 8001d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStruct);
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	4619      	mov	r1, r3
 8001db2:	480f      	ldr	r0, [pc, #60]	; (8001df0 <SD_IO_Init+0x78>)
 8001db4:	f000 f9d8 	bl	8002168 <HAL_GPIO_Init>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  SPIx_Init();
 8001db8:	f7ff ff78 	bl	8001cac <SPIx_Init>
  
  /* SD chip select high */
  SD_CS_HIGH();
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc2:	480b      	ldr	r0, [pc, #44]	; (8001df0 <SD_IO_Init+0x78>)
 8001dc4:	f000 fc38 	bl	8002638 <HAL_GPIO_WritePin>
  
  /* Send dummy byte 0xFF, 10 times with CS high */
  /* Rise CS and MOSI for 80 clocks cycles */
  for (counter = 0; counter <= 9; counter++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	77fb      	strb	r3, [r7, #31]
 8001dcc:	e005      	b.n	8001dda <SD_IO_Init+0x62>
  {
    /* Send dummy byte 0xFF */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001dce:	20ff      	movs	r0, #255	; 0xff
 8001dd0:	f000 f83d 	bl	8001e4e <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 8001dd4:	7ffb      	ldrb	r3, [r7, #31]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	77fb      	strb	r3, [r7, #31]
 8001dda:	7ffb      	ldrb	r3, [r7, #31]
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d9f6      	bls.n	8001dce <SD_IO_Init+0x56>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000

08001df4 <SD_IO_CSState>:
/**
  * @brief Set the SD_CS pin.
  * @param val: pin value.
  */
void SD_IO_CSState(uint8_t val)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if(val == 1) 
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <SD_IO_CSState+0x1e>
  {
    SD_CS_HIGH();
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e0a:	4807      	ldr	r0, [pc, #28]	; (8001e28 <SD_IO_CSState+0x34>)
 8001e0c:	f000 fc14 	bl	8002638 <HAL_GPIO_WritePin>
  }
  else
  {
    SD_CS_LOW();
  }
}
 8001e10:	e005      	b.n	8001e1e <SD_IO_CSState+0x2a>
    SD_CS_LOW();
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <SD_IO_CSState+0x34>)
 8001e1a:	f000 fc0d 	bl	8002638 <HAL_GPIO_WritePin>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40020000 	.word	0x40020000

08001e2c <SD_IO_WriteReadData>:
  * @param  DataIn: value to be written
  * @param  DataOut: value to be read
  * @param  DataLength: length of data
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff ff6d 	bl	8001d20 <SPIx_WriteReadData>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <SD_IO_WriteByte>:
/**
  * @brief  Writes a byte on the SD.
  * @param  Data: byte to send.
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 8001e58:	f107 010f 	add.w	r1, r7, #15
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <SPIx_WriteReadData>
  return tmp;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f931 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f004 fe82 	bl	8006bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f93b 	bl	800214e <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 f911 	bl	8002116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	2000047c 	.word	0x2000047c

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000047c 	.word	0x2000047c

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff ff8e 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff47 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002128:	f7ff ff5c 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 800212c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7ff ff8e 	bl	8002054 <NVIC_EncodePriority>
 8002138:	4602      	mov	r2, r0
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffb0 	bl	80020bc <SysTick_Config>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e159      	b.n	8002438 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	429a      	cmp	r2, r3
 800219e:	f040 8148 	bne.w	8002432 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d00b      	beq.n	80021c2 <HAL_GPIO_Init+0x5a>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b6:	2b11      	cmp	r3, #17
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d130      	bne.n	8002224 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0201 	and.w	r2, r3, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0xfc>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b12      	cmp	r3, #18
 8002262:	d123      	bne.n	80022ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	08da      	lsrs	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3208      	adds	r2, #8
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0203 	and.w	r2, r3, #3
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a2 	beq.w	8002432 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_GPIO_Init+0x2e8>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a56      	ldr	r2, [pc, #344]	; (8002450 <HAL_GPIO_Init+0x2e8>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b54      	ldr	r3, [pc, #336]	; (8002450 <HAL_GPIO_Init+0x2e8>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230a:	4a52      	ldr	r2, [pc, #328]	; (8002454 <HAL_GPIO_Init+0x2ec>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a49      	ldr	r2, [pc, #292]	; (8002458 <HAL_GPIO_Init+0x2f0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x202>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a48      	ldr	r2, [pc, #288]	; (800245c <HAL_GPIO_Init+0x2f4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x1fe>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a47      	ldr	r2, [pc, #284]	; (8002460 <HAL_GPIO_Init+0x2f8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x1fa>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a46      	ldr	r2, [pc, #280]	; (8002464 <HAL_GPIO_Init+0x2fc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x1f6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a45      	ldr	r2, [pc, #276]	; (8002468 <HAL_GPIO_Init+0x300>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x1f2>
 8002356:	2304      	movs	r3, #4
 8002358:	e008      	b.n	800236c <HAL_GPIO_Init+0x204>
 800235a:	2307      	movs	r3, #7
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x204>
 800235e:	2303      	movs	r3, #3
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x204>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x204>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x204>
 800236a:	2300      	movs	r3, #0
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	f002 0203 	and.w	r2, r2, #3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4093      	lsls	r3, r2
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800237c:	4935      	ldr	r1, [pc, #212]	; (8002454 <HAL_GPIO_Init+0x2ec>)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3302      	adds	r3, #2
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <HAL_GPIO_Init+0x304>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ae:	4a2f      	ldr	r2, [pc, #188]	; (800246c <HAL_GPIO_Init+0x304>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_GPIO_Init+0x304>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d8:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_GPIO_Init+0x304>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_GPIO_Init+0x304>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002402:	4a1a      	ldr	r2, [pc, #104]	; (800246c <HAL_GPIO_Init+0x304>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_GPIO_Init+0x304>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_GPIO_Init+0x304>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b0f      	cmp	r3, #15
 800243c:	f67f aea2 	bls.w	8002184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40013800 	.word	0x40013800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40021000 	.word	0x40021000
 800246c:	40013c00 	.word	0x40013c00

08002470 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e0bb      	b.n	8002604 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800248c:	2201      	movs	r2, #1
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	f040 80ab 	bne.w	80025fe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80024a8:	4a5c      	ldr	r2, [pc, #368]	; (800261c <HAL_GPIO_DeInit+0x1ac>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	4013      	ands	r3, r2
 80024c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a54      	ldr	r2, [pc, #336]	; (8002620 <HAL_GPIO_DeInit+0x1b0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_DeInit+0x96>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a53      	ldr	r2, [pc, #332]	; (8002624 <HAL_GPIO_DeInit+0x1b4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_DeInit+0x92>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_GPIO_DeInit+0x1b8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_GPIO_DeInit+0x8e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a51      	ldr	r2, [pc, #324]	; (800262c <HAL_GPIO_DeInit+0x1bc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_DeInit+0x8a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a50      	ldr	r2, [pc, #320]	; (8002630 <HAL_GPIO_DeInit+0x1c0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_GPIO_DeInit+0x86>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_DeInit+0x98>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_DeInit+0x98>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_DeInit+0x98>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_DeInit+0x98>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_DeInit+0x98>
 8002506:	2300      	movs	r3, #0
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	d132      	bne.n	800257e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_GPIO_DeInit+0x1c4>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	4944      	ldr	r1, [pc, #272]	; (8002634 <HAL_GPIO_DeInit+0x1c4>)
 8002522:	4013      	ands	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002526:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_GPIO_DeInit+0x1c4>)
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	4941      	ldr	r1, [pc, #260]	; (8002634 <HAL_GPIO_DeInit+0x1c4>)
 8002530:	4013      	ands	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002534:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_GPIO_DeInit+0x1c4>)
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43db      	mvns	r3, r3
 800253c:	493d      	ldr	r1, [pc, #244]	; (8002634 <HAL_GPIO_DeInit+0x1c4>)
 800253e:	4013      	ands	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002542:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <HAL_GPIO_DeInit+0x1c4>)
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43db      	mvns	r3, r3
 800254a:	493a      	ldr	r1, [pc, #232]	; (8002634 <HAL_GPIO_DeInit+0x1c4>)
 800254c:	4013      	ands	r3, r2
 800254e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	220f      	movs	r2, #15
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002560:	4a2e      	ldr	r2, [pc, #184]	; (800261c <HAL_GPIO_DeInit+0x1ac>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3302      	adds	r3, #2
 8002568:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	43da      	mvns	r2, r3
 8002570:	482a      	ldr	r0, [pc, #168]	; (800261c <HAL_GPIO_DeInit+0x1ac>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	400a      	ands	r2, r1
 8002578:	3302      	adds	r3, #2
 800257a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2103      	movs	r1, #3
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	401a      	ands	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	08d2      	lsrs	r2, r2, #3
 80025b4:	4019      	ands	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2103      	movs	r1, #3
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	2101      	movs	r1, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2103      	movs	r1, #3
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	f67f af40 	bls.w	800248c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40013800 	.word	0x40013800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400
 8002628:	40020800 	.word	0x40020800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40021000 	.word	0x40021000
 8002634:	40013c00 	.word	0x40013c00

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002654:	e003      	b.n	800265e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	619a      	str	r2, [r3, #24]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e25b      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d075      	beq.n	8002776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268a:	4ba3      	ldr	r3, [pc, #652]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b04      	cmp	r3, #4
 8002694:	d00c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002696:	4ba0      	ldr	r3, [pc, #640]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d112      	bne.n	80026c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a2:	4b9d      	ldr	r3, [pc, #628]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ae:	d10b      	bne.n	80026c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	4b99      	ldr	r3, [pc, #612]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d05b      	beq.n	8002774 <HAL_RCC_OscConfig+0x108>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d157      	bne.n	8002774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e236      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x74>
 80026d2:	4b91      	ldr	r3, [pc, #580]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a90      	ldr	r2, [pc, #576]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e01d      	b.n	800271c <HAL_RCC_OscConfig+0xb0>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x98>
 80026ea:	4b8b      	ldr	r3, [pc, #556]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a8a      	ldr	r2, [pc, #552]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b88      	ldr	r3, [pc, #544]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a87      	ldr	r2, [pc, #540]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0xb0>
 8002704:	4b84      	ldr	r3, [pc, #528]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a83      	ldr	r2, [pc, #524]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b81      	ldr	r3, [pc, #516]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a80      	ldr	r2, [pc, #512]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff fc0a 	bl	8001f3c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272c:	f7ff fc06 	bl	8001f3c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1fb      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b76      	ldr	r3, [pc, #472]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0xc0>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fbf6 	bl	8001f3c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002754:	f7ff fbf2 	bl	8001f3c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1e7      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	4b6c      	ldr	r3, [pc, #432]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0xe8>
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d063      	beq.n	800284a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002782:	4b65      	ldr	r3, [pc, #404]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278e:	4b62      	ldr	r3, [pc, #392]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002796:	2b08      	cmp	r3, #8
 8002798:	d11c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x152>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1bb      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027be:	4b56      	ldr	r3, [pc, #344]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4952      	ldr	r1, [pc, #328]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	e03a      	b.n	800284a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027dc:	4b4f      	ldr	r3, [pc, #316]	; (800291c <HAL_RCC_OscConfig+0x2b0>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7ff fbab 	bl	8001f3c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ea:	f7ff fba7 	bl	8001f3c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e19c      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	4b46      	ldr	r3, [pc, #280]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4940      	ldr	r1, [pc, #256]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e015      	b.n	800284a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b3f      	ldr	r3, [pc, #252]	; (800291c <HAL_RCC_OscConfig+0x2b0>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7ff fb8a 	bl	8001f3c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282c:	f7ff fb86 	bl	8001f3c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e17b      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	4b36      	ldr	r3, [pc, #216]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d030      	beq.n	80028b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_OscConfig+0x2b4>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7ff fb6a 	bl	8001f3c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286c:	f7ff fb66 	bl	8001f3c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e15b      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x200>
 800288a:	e015      	b.n	80028b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_OscConfig+0x2b4>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7ff fb53 	bl	8001f3c <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289a:	f7ff fb4f 	bl	8001f3c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e144      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80a0 	beq.w	8002a06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_OscConfig+0x2b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d121      	bne.n	8002946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_RCC_OscConfig+0x2b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a07      	ldr	r2, [pc, #28]	; (8002924 <HAL_RCC_OscConfig+0x2b8>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290e:	f7ff fb15 	bl	8001f3c <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	e011      	b.n	800293a <HAL_RCC_OscConfig+0x2ce>
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	42470000 	.word	0x42470000
 8002920:	42470e80 	.word	0x42470e80
 8002924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002928:	f7ff fb08 	bl	8001f3c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0fd      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b81      	ldr	r3, [pc, #516]	; (8002b40 <HAL_RCC_OscConfig+0x4d4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d106      	bne.n	800295c <HAL_RCC_OscConfig+0x2f0>
 800294e:	4b7d      	ldr	r3, [pc, #500]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a7c      	ldr	r2, [pc, #496]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	e01c      	b.n	8002996 <HAL_RCC_OscConfig+0x32a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d10c      	bne.n	800297e <HAL_RCC_OscConfig+0x312>
 8002964:	4b77      	ldr	r3, [pc, #476]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a76      	ldr	r2, [pc, #472]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
 8002970:	4b74      	ldr	r3, [pc, #464]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	4a73      	ldr	r2, [pc, #460]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6713      	str	r3, [r2, #112]	; 0x70
 800297c:	e00b      	b.n	8002996 <HAL_RCC_OscConfig+0x32a>
 800297e:	4b71      	ldr	r3, [pc, #452]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a70      	ldr	r2, [pc, #448]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	4b6e      	ldr	r3, [pc, #440]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	4a6d      	ldr	r2, [pc, #436]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d015      	beq.n	80029ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7ff facd 	bl	8001f3c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7ff fac9 	bl	8001f3c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0bc      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	4b61      	ldr	r3, [pc, #388]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ee      	beq.n	80029a6 <HAL_RCC_OscConfig+0x33a>
 80029c8:	e014      	b.n	80029f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7ff fab7 	bl	8001f3c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7ff fab3 	bl	8001f3c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e0a6      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	4b56      	ldr	r3, [pc, #344]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ee      	bne.n	80029d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d105      	bne.n	8002a06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a51      	ldr	r2, [pc, #324]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8092 	beq.w	8002b34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a10:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d05c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d141      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <HAL_RCC_OscConfig+0x4dc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7ff fa87 	bl	8001f3c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7ff fa83 	bl	8001f3c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e078      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a44:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	019b      	lsls	r3, r3, #6
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	061b      	lsls	r3, r3, #24
 8002a74:	4933      	ldr	r1, [pc, #204]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7a:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_RCC_OscConfig+0x4dc>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff fa5c 	bl	8001f3c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a88:	f7ff fa58 	bl	8001f3c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e04d      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x41c>
 8002aa6:	e045      	b.n	8002b34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_RCC_OscConfig+0x4dc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7ff fa45 	bl	8001f3c <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7ff fa41 	bl	8001f3c <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e036      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x44a>
 8002ad4:	e02e      	b.n	8002b34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e029      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_RCC_OscConfig+0x4d8>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d115      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d106      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40007000 	.word	0x40007000
 8002b44:	40023800 	.word	0x40023800
 8002b48:	42470060 	.word	0x42470060

08002b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0cc      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d90c      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba0:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	494d      	ldr	r1, [pc, #308]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d044      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d119      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e067      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4934      	ldr	r1, [pc, #208]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7ff f97e 	bl	8001f3c <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7ff f97a 	bl	8001f3c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e04f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20c      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e032      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4916      	ldr	r1, [pc, #88]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	490e      	ldr	r1, [pc, #56]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd2:	f000 f821 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	490a      	ldr	r1, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f8de 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	0800a22c 	.word	0x0800a22c
 8002d10:	2000000c 	.word	0x2000000c
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d30:	4b67      	ldr	r3, [pc, #412]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d00d      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x40>
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	f200 80bd 	bhi.w	8002ebc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x34>
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4a:	e0b7      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b61      	ldr	r3, [pc, #388]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d4e:	60bb      	str	r3, [r7, #8]
       break;
 8002d50:	e0b7      	b.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d52:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d54:	60bb      	str	r3, [r7, #8]
      break;
 8002d56:	e0b4      	b.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d58:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d62:	4b5b      	ldr	r3, [pc, #364]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d04d      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6e:	4b58      	ldr	r3, [pc, #352]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	461a      	mov	r2, r3
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d7e:	f04f 0100 	mov.w	r1, #0
 8002d82:	ea02 0800 	and.w	r8, r2, r0
 8002d86:	ea03 0901 	and.w	r9, r3, r1
 8002d8a:	4640      	mov	r0, r8
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	014b      	lsls	r3, r1, #5
 8002d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d9c:	0142      	lsls	r2, r0, #5
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	ebb0 0008 	subs.w	r0, r0, r8
 8002da6:	eb61 0109 	sbc.w	r1, r1, r9
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	018b      	lsls	r3, r1, #6
 8002db4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002db8:	0182      	lsls	r2, r0, #6
 8002dba:	1a12      	subs	r2, r2, r0
 8002dbc:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc0:	f04f 0000 	mov.w	r0, #0
 8002dc4:	f04f 0100 	mov.w	r1, #0
 8002dc8:	00d9      	lsls	r1, r3, #3
 8002dca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dce:	00d0      	lsls	r0, r2, #3
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	eb12 0208 	adds.w	r2, r2, r8
 8002dd8:	eb43 0309 	adc.w	r3, r3, r9
 8002ddc:	f04f 0000 	mov.w	r0, #0
 8002de0:	f04f 0100 	mov.w	r1, #0
 8002de4:	0259      	lsls	r1, r3, #9
 8002de6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002dea:	0250      	lsls	r0, r2, #9
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	f7fd fedc 	bl	8000bb8 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4613      	mov	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e04a      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0a:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	461a      	mov	r2, r3
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	ea02 0400 	and.w	r4, r2, r0
 8002e22:	ea03 0501 	and.w	r5, r3, r1
 8002e26:	4620      	mov	r0, r4
 8002e28:	4629      	mov	r1, r5
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	014b      	lsls	r3, r1, #5
 8002e34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e38:	0142      	lsls	r2, r0, #5
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	1b00      	subs	r0, r0, r4
 8002e40:	eb61 0105 	sbc.w	r1, r1, r5
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	018b      	lsls	r3, r1, #6
 8002e4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e52:	0182      	lsls	r2, r0, #6
 8002e54:	1a12      	subs	r2, r2, r0
 8002e56:	eb63 0301 	sbc.w	r3, r3, r1
 8002e5a:	f04f 0000 	mov.w	r0, #0
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	00d9      	lsls	r1, r3, #3
 8002e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e68:	00d0      	lsls	r0, r2, #3
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	1912      	adds	r2, r2, r4
 8002e70:	eb45 0303 	adc.w	r3, r5, r3
 8002e74:	f04f 0000 	mov.w	r0, #0
 8002e78:	f04f 0100 	mov.w	r1, #0
 8002e7c:	0299      	lsls	r1, r3, #10
 8002e7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e82:	0290      	lsls	r0, r2, #10
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	f7fd fe90 	bl	8000bb8 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb8:	60bb      	str	r3, [r7, #8]
      break;
 8002eba:	e002      	b.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ebe:	60bb      	str	r3, [r7, #8]
      break;
 8002ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	00f42400 	.word	0x00f42400
 8002ed8:	007a1200 	.word	0x007a1200

08002edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	2000000c 	.word	0x2000000c

08002ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef8:	f7ff fff0 	bl	8002edc <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0a9b      	lsrs	r3, r3, #10
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4903      	ldr	r1, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	0800a23c 	.word	0x0800a23c

08002f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f20:	f7ff ffdc 	bl	8002edc <HAL_RCC_GetHCLKFreq>
 8002f24:	4602      	mov	r2, r0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	0b5b      	lsrs	r3, r3, #13
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	4903      	ldr	r1, [pc, #12]	; (8002f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	0800a23c 	.word	0x0800a23c

08002f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e056      	b.n	8003004 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f003 fe43 	bl	8006bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	ea42 0103 	orr.w	r1, r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	f003 0104 	and.w	r1, r3, #4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e01a      	b.n	8003054 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003034:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f003 fe28 	bl	8006c8c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	; 0x30
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800306a:	2301      	movs	r3, #1
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x26>
 800307e:	2302      	movs	r3, #2
 8003080:	e18a      	b.n	8003398 <HAL_SPI_TransmitReceive+0x33c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800308a:	f7fe ff57 	bl	8001f3c <HAL_GetTick>
 800308e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d00f      	beq.n	80030cc <HAL_SPI_TransmitReceive+0x70>
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b2:	d107      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x68>
 80030bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d003      	beq.n	80030cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030ca:	e15b      	b.n	8003384 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_SPI_TransmitReceive+0x82>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_SPI_TransmitReceive+0x82>
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030e4:	e14e      	b.n	8003384 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d003      	beq.n	80030fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2205      	movs	r2, #5
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	887a      	ldrh	r2, [r7, #2]
 800310a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	887a      	ldrh	r2, [r7, #2]
 800311c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	887a      	ldrh	r2, [r7, #2]
 8003122:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d007      	beq.n	800314e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003156:	d178      	bne.n	800324a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <HAL_SPI_TransmitReceive+0x10a>
 8003160:	8b7b      	ldrh	r3, [r7, #26]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d166      	bne.n	8003234 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	1c9a      	adds	r2, r3, #2
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800318a:	e053      	b.n	8003234 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b02      	cmp	r3, #2
 8003198:	d11b      	bne.n	80031d2 <HAL_SPI_TransmitReceive+0x176>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d016      	beq.n	80031d2 <HAL_SPI_TransmitReceive+0x176>
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d113      	bne.n	80031d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	1c9a      	adds	r2, r3, #2
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d119      	bne.n	8003214 <HAL_SPI_TransmitReceive+0x1b8>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d014      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	b292      	uxth	r2, r2
 80031f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003210:	2301      	movs	r3, #1
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003214:	f7fe fe92 	bl	8001f3c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003220:	429a      	cmp	r2, r3
 8003222:	d807      	bhi.n	8003234 <HAL_SPI_TransmitReceive+0x1d8>
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d003      	beq.n	8003234 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003232:	e0a7      	b.n	8003384 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1a6      	bne.n	800318c <HAL_SPI_TransmitReceive+0x130>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1a1      	bne.n	800318c <HAL_SPI_TransmitReceive+0x130>
 8003248:	e07c      	b.n	8003344 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_SPI_TransmitReceive+0x1fc>
 8003252:	8b7b      	ldrh	r3, [r7, #26]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d16b      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	7812      	ldrb	r2, [r2, #0]
 8003264:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800327e:	e057      	b.n	8003330 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d11c      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x26c>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d017      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x26c>
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d114      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	7812      	ldrb	r2, [r2, #0]
 80032aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d119      	bne.n	800330a <HAL_SPI_TransmitReceive+0x2ae>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d014      	beq.n	800330a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003306:	2301      	movs	r3, #1
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800330a:	f7fe fe17 	bl	8001f3c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003316:	429a      	cmp	r2, r3
 8003318:	d803      	bhi.n	8003322 <HAL_SPI_TransmitReceive+0x2c6>
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d102      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x2cc>
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800332e:	e029      	b.n	8003384 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1a2      	bne.n	8003280 <HAL_SPI_TransmitReceive+0x224>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d19d      	bne.n	8003280 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003346:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f8a1 	bl	8003490 <SPI_EndRxTxTransaction>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003360:	e010      	b.n	8003384 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	e000      	b.n	8003384 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003382:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003398:	4618      	mov	r0, r3
 800339a:	3730      	adds	r7, #48	; 0x30
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ae:	b2db      	uxtb	r3, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033cc:	e04c      	b.n	8003468 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d048      	beq.n	8003468 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033d6:	f7fe fdb1 	bl	8001f3c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d902      	bls.n	80033ec <SPI_WaitFlagStateUntilTimeout+0x30>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d13d      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003404:	d111      	bne.n	800342a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340e:	d004      	beq.n	800341a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003418:	d107      	bne.n	800342a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003428:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003432:	d10f      	bne.n	8003454 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003452:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e00f      	b.n	8003488 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4013      	ands	r3, r2
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	429a      	cmp	r2, r3
 8003484:	d1a3      	bne.n	80033ce <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <SPI_EndRxTxTransaction+0x7c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <SPI_EndRxTxTransaction+0x80>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0d5b      	lsrs	r3, r3, #21
 80034a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d112      	bne.n	80034e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff ff78 	bl	80033bc <SPI_WaitFlagStateUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d016      	beq.n	8003500 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e00f      	b.n	8003502 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d0f2      	beq.n	80034e2 <SPI_EndRxTxTransaction+0x52>
 80034fc:	e000      	b.n	8003500 <SPI_EndRxTxTransaction+0x70>
        break;
 80034fe:	bf00      	nop
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2000000c 	.word	0x2000000c
 8003510:	165e9f81 	.word	0x165e9f81

08003514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e03f      	b.n	80035a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f003 fbc4 	bl	8006cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	; 0x24
 8003544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f90b 	bl	8003774 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800356c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800357c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800358c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b088      	sub	sp, #32
 80035b2:	af02      	add	r7, sp, #8
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	f040 8083 	bne.w	80036d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Transmit+0x2e>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e07b      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Transmit+0x40>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e074      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2221      	movs	r2, #33	; 0x21
 8003600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003604:	f7fe fc9a 	bl	8001f3c <HAL_GetTick>
 8003608:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800361e:	e042      	b.n	80036a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	d122      	bne.n	800367e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2200      	movs	r2, #0
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f84c 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e042      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003664:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3302      	adds	r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	e017      	b.n	80036a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3301      	adds	r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	e013      	b.n	80036a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f829 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e01f      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	60ba      	str	r2, [r7, #8]
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1b7      	bne.n	8003620 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f810 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e006      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	e02c      	b.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d028      	beq.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <UART_WaitOnFlagUntilTimeout+0x30>
 8003700:	f7fe fc1c 	bl	8001f3c <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	d21d      	bcs.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800371e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e00f      	b.n	800376c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	429a      	cmp	r2, r3
 8003768:	d0c3      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003778:	b0bd      	sub	sp, #244	; 0xf4
 800377a:	af00      	add	r7, sp, #0
 800377c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800378c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003790:	68d9      	ldr	r1, [r3, #12]
 8003792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	ea40 0301 	orr.w	r3, r0, r1
 800379c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80037c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037cc:	f021 010c 	bic.w	r1, r1, #12
 80037d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80037da:	430b      	orrs	r3, r1
 80037dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ee:	6999      	ldr	r1, [r3, #24]
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	ea40 0301 	orr.w	r3, r0, r1
 80037fa:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003806:	f040 81a5 	bne.w	8003b54 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4bcd      	ldr	r3, [pc, #820]	; (8003b48 <UART_SetConfig+0x3d4>)
 8003812:	429a      	cmp	r2, r3
 8003814:	d006      	beq.n	8003824 <UART_SetConfig+0xb0>
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4bcb      	ldr	r3, [pc, #812]	; (8003b4c <UART_SetConfig+0x3d8>)
 800381e:	429a      	cmp	r2, r3
 8003820:	f040 80cb 	bne.w	80039ba <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003824:	f7ff fb7a 	bl	8002f1c <HAL_RCC_GetPCLK2Freq>
 8003828:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800382c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003830:	461c      	mov	r4, r3
 8003832:	f04f 0500 	mov.w	r5, #0
 8003836:	4622      	mov	r2, r4
 8003838:	462b      	mov	r3, r5
 800383a:	1891      	adds	r1, r2, r2
 800383c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003840:	415b      	adcs	r3, r3
 8003842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003846:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800384a:	1912      	adds	r2, r2, r4
 800384c:	eb45 0303 	adc.w	r3, r5, r3
 8003850:	f04f 0000 	mov.w	r0, #0
 8003854:	f04f 0100 	mov.w	r1, #0
 8003858:	00d9      	lsls	r1, r3, #3
 800385a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800385e:	00d0      	lsls	r0, r2, #3
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	1911      	adds	r1, r2, r4
 8003866:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800386a:	416b      	adcs	r3, r5
 800386c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	461a      	mov	r2, r3
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	1891      	adds	r1, r2, r2
 800387e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003882:	415b      	adcs	r3, r3
 8003884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003888:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800388c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003890:	f7fd f992 	bl	8000bb8 <__aeabi_uldivmod>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4bad      	ldr	r3, [pc, #692]	; (8003b50 <UART_SetConfig+0x3dc>)
 800389a:	fba3 2302 	umull	r2, r3, r3, r2
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	011e      	lsls	r6, r3, #4
 80038a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038a6:	461c      	mov	r4, r3
 80038a8:	f04f 0500 	mov.w	r5, #0
 80038ac:	4622      	mov	r2, r4
 80038ae:	462b      	mov	r3, r5
 80038b0:	1891      	adds	r1, r2, r2
 80038b2:	67b9      	str	r1, [r7, #120]	; 0x78
 80038b4:	415b      	adcs	r3, r3
 80038b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80038bc:	1912      	adds	r2, r2, r4
 80038be:	eb45 0303 	adc.w	r3, r5, r3
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	00d9      	lsls	r1, r3, #3
 80038cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038d0:	00d0      	lsls	r0, r2, #3
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	1911      	adds	r1, r2, r4
 80038d8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80038dc:	416b      	adcs	r3, r5
 80038de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80038e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	461a      	mov	r2, r3
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	1891      	adds	r1, r2, r2
 80038f0:	6739      	str	r1, [r7, #112]	; 0x70
 80038f2:	415b      	adcs	r3, r3
 80038f4:	677b      	str	r3, [r7, #116]	; 0x74
 80038f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80038fa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80038fe:	f7fd f95b 	bl	8000bb8 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4b92      	ldr	r3, [pc, #584]	; (8003b50 <UART_SetConfig+0x3dc>)
 8003908:	fba3 1302 	umull	r1, r3, r3, r2
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	2164      	movs	r1, #100	; 0x64
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	3332      	adds	r3, #50	; 0x32
 800391a:	4a8d      	ldr	r2, [pc, #564]	; (8003b50 <UART_SetConfig+0x3dc>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003928:	441e      	add	r6, r3
 800392a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800392e:	4618      	mov	r0, r3
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	1894      	adds	r4, r2, r2
 800393a:	66bc      	str	r4, [r7, #104]	; 0x68
 800393c:	415b      	adcs	r3, r3
 800393e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003940:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003944:	1812      	adds	r2, r2, r0
 8003946:	eb41 0303 	adc.w	r3, r1, r3
 800394a:	f04f 0400 	mov.w	r4, #0
 800394e:	f04f 0500 	mov.w	r5, #0
 8003952:	00dd      	lsls	r5, r3, #3
 8003954:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003958:	00d4      	lsls	r4, r2, #3
 800395a:	4622      	mov	r2, r4
 800395c:	462b      	mov	r3, r5
 800395e:	1814      	adds	r4, r2, r0
 8003960:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003964:	414b      	adcs	r3, r1
 8003966:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	461a      	mov	r2, r3
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	1891      	adds	r1, r2, r2
 8003978:	6639      	str	r1, [r7, #96]	; 0x60
 800397a:	415b      	adcs	r3, r3
 800397c:	667b      	str	r3, [r7, #100]	; 0x64
 800397e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003986:	f7fd f917 	bl	8000bb8 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4b70      	ldr	r3, [pc, #448]	; (8003b50 <UART_SetConfig+0x3dc>)
 8003990:	fba3 1302 	umull	r1, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	2164      	movs	r1, #100	; 0x64
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	3332      	adds	r3, #50	; 0x32
 80039a2:	4a6b      	ldr	r2, [pc, #428]	; (8003b50 <UART_SetConfig+0x3dc>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	f003 0207 	and.w	r2, r3, #7
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4432      	add	r2, r6
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	e26d      	b.n	8003e96 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ba:	f7ff fa9b 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 80039be:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80039c6:	461c      	mov	r4, r3
 80039c8:	f04f 0500 	mov.w	r5, #0
 80039cc:	4622      	mov	r2, r4
 80039ce:	462b      	mov	r3, r5
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80039d4:	415b      	adcs	r3, r3
 80039d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039dc:	1912      	adds	r2, r2, r4
 80039de:	eb45 0303 	adc.w	r3, r5, r3
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	00d9      	lsls	r1, r3, #3
 80039ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f0:	00d0      	lsls	r0, r2, #3
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	1911      	adds	r1, r2, r4
 80039f8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80039fc:	416b      	adcs	r3, r5
 80039fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	1891      	adds	r1, r2, r2
 8003a10:	6539      	str	r1, [r7, #80]	; 0x50
 8003a12:	415b      	adcs	r3, r3
 8003a14:	657b      	str	r3, [r7, #84]	; 0x54
 8003a16:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a1a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003a1e:	f7fd f8cb 	bl	8000bb8 <__aeabi_uldivmod>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4b4a      	ldr	r3, [pc, #296]	; (8003b50 <UART_SetConfig+0x3dc>)
 8003a28:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	011e      	lsls	r6, r3, #4
 8003a30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a34:	461c      	mov	r4, r3
 8003a36:	f04f 0500 	mov.w	r5, #0
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	462b      	mov	r3, r5
 8003a3e:	1891      	adds	r1, r2, r2
 8003a40:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a42:	415b      	adcs	r3, r3
 8003a44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a4a:	1912      	adds	r2, r2, r4
 8003a4c:	eb45 0303 	adc.w	r3, r5, r3
 8003a50:	f04f 0000 	mov.w	r0, #0
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	00d9      	lsls	r1, r3, #3
 8003a5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a5e:	00d0      	lsls	r0, r2, #3
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	1911      	adds	r1, r2, r4
 8003a66:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003a6a:	416b      	adcs	r3, r5
 8003a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	1891      	adds	r1, r2, r2
 8003a7e:	6439      	str	r1, [r7, #64]	; 0x40
 8003a80:	415b      	adcs	r3, r3
 8003a82:	647b      	str	r3, [r7, #68]	; 0x44
 8003a84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a88:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003a8c:	f7fd f894 	bl	8000bb8 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <UART_SetConfig+0x3dc>)
 8003a96:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2164      	movs	r1, #100	; 0x64
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	3332      	adds	r3, #50	; 0x32
 8003aa8:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <UART_SetConfig+0x3dc>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ab6:	441e      	add	r6, r3
 8003ab8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003abc:	4618      	mov	r0, r3
 8003abe:	f04f 0100 	mov.w	r1, #0
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	1894      	adds	r4, r2, r2
 8003ac8:	63bc      	str	r4, [r7, #56]	; 0x38
 8003aca:	415b      	adcs	r3, r3
 8003acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ace:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ad2:	1812      	adds	r2, r2, r0
 8003ad4:	eb41 0303 	adc.w	r3, r1, r3
 8003ad8:	f04f 0400 	mov.w	r4, #0
 8003adc:	f04f 0500 	mov.w	r5, #0
 8003ae0:	00dd      	lsls	r5, r3, #3
 8003ae2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ae6:	00d4      	lsls	r4, r2, #3
 8003ae8:	4622      	mov	r2, r4
 8003aea:	462b      	mov	r3, r5
 8003aec:	1814      	adds	r4, r2, r0
 8003aee:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003af2:	414b      	adcs	r3, r1
 8003af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	1891      	adds	r1, r2, r2
 8003b06:	6339      	str	r1, [r7, #48]	; 0x30
 8003b08:	415b      	adcs	r3, r3
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b10:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b14:	f7fd f850 	bl	8000bb8 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <UART_SetConfig+0x3dc>)
 8003b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2164      	movs	r1, #100	; 0x64
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <UART_SetConfig+0x3dc>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 0207 	and.w	r2, r3, #7
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4432      	add	r2, r6
 8003b44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003b46:	e1a6      	b.n	8003e96 <UART_SetConfig+0x722>
 8003b48:	40011000 	.word	0x40011000
 8003b4c:	40011400 	.word	0x40011400
 8003b50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4bd1      	ldr	r3, [pc, #836]	; (8003ea0 <UART_SetConfig+0x72c>)
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d006      	beq.n	8003b6e <UART_SetConfig+0x3fa>
 8003b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4bcf      	ldr	r3, [pc, #828]	; (8003ea4 <UART_SetConfig+0x730>)
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	f040 80ca 	bne.w	8003d02 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b6e:	f7ff f9d5 	bl	8002f1c <HAL_RCC_GetPCLK2Freq>
 8003b72:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b7a:	461c      	mov	r4, r3
 8003b7c:	f04f 0500 	mov.w	r5, #0
 8003b80:	4622      	mov	r2, r4
 8003b82:	462b      	mov	r3, r5
 8003b84:	1891      	adds	r1, r2, r2
 8003b86:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b88:	415b      	adcs	r3, r3
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b90:	1912      	adds	r2, r2, r4
 8003b92:	eb45 0303 	adc.w	r3, r5, r3
 8003b96:	f04f 0000 	mov.w	r0, #0
 8003b9a:	f04f 0100 	mov.w	r1, #0
 8003b9e:	00d9      	lsls	r1, r3, #3
 8003ba0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ba4:	00d0      	lsls	r0, r2, #3
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	eb12 0a04 	adds.w	sl, r2, r4
 8003bae:	eb43 0b05 	adc.w	fp, r3, r5
 8003bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bcc:	0082      	lsls	r2, r0, #2
 8003bce:	4650      	mov	r0, sl
 8003bd0:	4659      	mov	r1, fp
 8003bd2:	f7fc fff1 	bl	8000bb8 <__aeabi_uldivmod>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4bb3      	ldr	r3, [pc, #716]	; (8003ea8 <UART_SetConfig+0x734>)
 8003bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	011e      	lsls	r6, r3, #4
 8003be4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003be8:	4618      	mov	r0, r3
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	1894      	adds	r4, r2, r2
 8003bf4:	623c      	str	r4, [r7, #32]
 8003bf6:	415b      	adcs	r3, r3
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bfe:	1812      	adds	r2, r2, r0
 8003c00:	eb41 0303 	adc.w	r3, r1, r3
 8003c04:	f04f 0400 	mov.w	r4, #0
 8003c08:	f04f 0500 	mov.w	r5, #0
 8003c0c:	00dd      	lsls	r5, r3, #3
 8003c0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c12:	00d4      	lsls	r4, r2, #3
 8003c14:	4622      	mov	r2, r4
 8003c16:	462b      	mov	r3, r5
 8003c18:	1814      	adds	r4, r2, r0
 8003c1a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003c1e:	414b      	adcs	r3, r1
 8003c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	008b      	lsls	r3, r1, #2
 8003c3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c3e:	0082      	lsls	r2, r0, #2
 8003c40:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003c44:	f7fc ffb8 	bl	8000bb8 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4b96      	ldr	r3, [pc, #600]	; (8003ea8 <UART_SetConfig+0x734>)
 8003c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2164      	movs	r1, #100	; 0x64
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	3332      	adds	r3, #50	; 0x32
 8003c60:	4a91      	ldr	r2, [pc, #580]	; (8003ea8 <UART_SetConfig+0x734>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c6c:	441e      	add	r6, r3
 8003c6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c72:	4618      	mov	r0, r3
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	1894      	adds	r4, r2, r2
 8003c7e:	61bc      	str	r4, [r7, #24]
 8003c80:	415b      	adcs	r3, r3
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c88:	1812      	adds	r2, r2, r0
 8003c8a:	eb41 0303 	adc.w	r3, r1, r3
 8003c8e:	f04f 0400 	mov.w	r4, #0
 8003c92:	f04f 0500 	mov.w	r5, #0
 8003c96:	00dd      	lsls	r5, r3, #3
 8003c98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c9c:	00d4      	lsls	r4, r2, #3
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	1814      	adds	r4, r2, r0
 8003ca4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003ca8:	414b      	adcs	r3, r1
 8003caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	008b      	lsls	r3, r1, #2
 8003cc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cc8:	0082      	lsls	r2, r0, #2
 8003cca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003cce:	f7fc ff73 	bl	8000bb8 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4b74      	ldr	r3, [pc, #464]	; (8003ea8 <UART_SetConfig+0x734>)
 8003cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	2164      	movs	r1, #100	; 0x64
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	3332      	adds	r3, #50	; 0x32
 8003cea:	4a6f      	ldr	r2, [pc, #444]	; (8003ea8 <UART_SetConfig+0x734>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	f003 020f 	and.w	r2, r3, #15
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4432      	add	r2, r6
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	e0c9      	b.n	8003e96 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d02:	f7ff f8f7 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 8003d06:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d0e:	461c      	mov	r4, r3
 8003d10:	f04f 0500 	mov.w	r5, #0
 8003d14:	4622      	mov	r2, r4
 8003d16:	462b      	mov	r3, r5
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	6139      	str	r1, [r7, #16]
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d24:	1912      	adds	r2, r2, r4
 8003d26:	eb45 0303 	adc.w	r3, r5, r3
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	00d9      	lsls	r1, r3, #3
 8003d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d38:	00d0      	lsls	r0, r2, #3
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	eb12 0804 	adds.w	r8, r2, r4
 8003d42:	eb43 0905 	adc.w	r9, r3, r5
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f04f 0100 	mov.w	r1, #0
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	008b      	lsls	r3, r1, #2
 8003d5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d60:	0082      	lsls	r2, r0, #2
 8003d62:	4640      	mov	r0, r8
 8003d64:	4649      	mov	r1, r9
 8003d66:	f7fc ff27 	bl	8000bb8 <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ea8 <UART_SetConfig+0x734>)
 8003d70:	fba3 2302 	umull	r2, r3, r3, r2
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	011e      	lsls	r6, r3, #4
 8003d78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	1894      	adds	r4, r2, r2
 8003d88:	60bc      	str	r4, [r7, #8]
 8003d8a:	415b      	adcs	r3, r3
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d92:	1812      	adds	r2, r2, r0
 8003d94:	eb41 0303 	adc.w	r3, r1, r3
 8003d98:	f04f 0400 	mov.w	r4, #0
 8003d9c:	f04f 0500 	mov.w	r5, #0
 8003da0:	00dd      	lsls	r5, r3, #3
 8003da2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003da6:	00d4      	lsls	r4, r2, #3
 8003da8:	4622      	mov	r2, r4
 8003daa:	462b      	mov	r3, r5
 8003dac:	1814      	adds	r4, r2, r0
 8003dae:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003db2:	414b      	adcs	r3, r1
 8003db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f04f 0100 	mov.w	r1, #0
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	008b      	lsls	r3, r1, #2
 8003dce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dd2:	0082      	lsls	r2, r0, #2
 8003dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dd8:	f7fc feee 	bl	8000bb8 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <UART_SetConfig+0x734>)
 8003de2:	fba3 1302 	umull	r1, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2164      	movs	r1, #100	; 0x64
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a2c      	ldr	r2, [pc, #176]	; (8003ea8 <UART_SetConfig+0x734>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e00:	441e      	add	r6, r3
 8003e02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e06:	4618      	mov	r0, r3
 8003e08:	f04f 0100 	mov.w	r1, #0
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	1894      	adds	r4, r2, r2
 8003e12:	603c      	str	r4, [r7, #0]
 8003e14:	415b      	adcs	r3, r3
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e1c:	1812      	adds	r2, r2, r0
 8003e1e:	eb41 0303 	adc.w	r3, r1, r3
 8003e22:	f04f 0400 	mov.w	r4, #0
 8003e26:	f04f 0500 	mov.w	r5, #0
 8003e2a:	00dd      	lsls	r5, r3, #3
 8003e2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e30:	00d4      	lsls	r4, r2, #3
 8003e32:	4622      	mov	r2, r4
 8003e34:	462b      	mov	r3, r5
 8003e36:	1814      	adds	r4, r2, r0
 8003e38:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003e3c:	414b      	adcs	r3, r1
 8003e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f04f 0100 	mov.w	r1, #0
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	008b      	lsls	r3, r1, #2
 8003e58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e5c:	0082      	lsls	r2, r0, #2
 8003e5e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003e62:	f7fc fea9 	bl	8000bb8 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <UART_SetConfig+0x734>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <UART_SetConfig+0x734>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4432      	add	r2, r6
 8003e92:	609a      	str	r2, [r3, #8]
}
 8003e94:	e7ff      	b.n	8003e96 <UART_SetConfig+0x722>
 8003e96:	bf00      	nop
 8003e98:	37f4      	adds	r7, #244	; 0xf4
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea0:	40011000 	.word	0x40011000
 8003ea4:	40011400 	.word	0x40011400
 8003ea8:	51eb851f 	.word	0x51eb851f

08003eac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	4a08      	ldr	r2, [pc, #32]	; (8003edc <disk_status+0x30>)
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	79fa      	ldrb	r2, [r7, #7]
 8003ec4:	4905      	ldr	r1, [pc, #20]	; (8003edc <disk_status+0x30>)
 8003ec6:	440a      	add	r2, r1
 8003ec8:	7b12      	ldrb	r2, [r2, #12]
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4798      	blx	r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	2000022c 	.word	0x2000022c

08003ee0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <disk_initialize+0x48>)
 8003ef2:	5cd3      	ldrb	r3, [r2, r3]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d111      	bne.n	8003f1c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <disk_initialize+0x48>)
 8003efc:	2101      	movs	r1, #1
 8003efe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <disk_initialize+0x48>)
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	79fa      	ldrb	r2, [r7, #7]
 8003f0e:	4906      	ldr	r1, [pc, #24]	; (8003f28 <disk_initialize+0x48>)
 8003f10:	440a      	add	r2, r1
 8003f12:	7b12      	ldrb	r2, [r2, #12]
 8003f14:	4610      	mov	r0, r2
 8003f16:	4798      	blx	r3
 8003f18:	4603      	mov	r3, r0
 8003f1a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	2000022c 	.word	0x2000022c

08003f2c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <disk_read+0x3c>)
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	689c      	ldr	r4, [r3, #8]
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <disk_read+0x3c>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	7b18      	ldrb	r0, [r3, #12]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	47a0      	blx	r4
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd90      	pop	{r4, r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2000022c 	.word	0x2000022c

08003f6c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <disk_write+0x3c>)
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68dc      	ldr	r4, [r3, #12]
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <disk_write+0x3c>)
 8003f8c:	4413      	add	r3, r2
 8003f8e:	7b18      	ldrb	r0, [r3, #12]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	47a0      	blx	r4
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2000022c 	.word	0x2000022c

08003fac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003fbc:	89fb      	ldrh	r3, [r7, #14]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	b21a      	sxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	b21b      	sxth	r3, r3
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b21b      	sxth	r3, r3
 8003fcc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003fce:	89fb      	ldrh	r3, [r7, #14]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3303      	adds	r3, #3
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	3202      	adds	r2, #2
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	3201      	adds	r2, #1
 8004002:	7812      	ldrb	r2, [r2, #0]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	7812      	ldrb	r2, [r2, #0]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
	return rv;
 8004014:	68fb      	ldr	r3, [r7, #12]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	887a      	ldrh	r2, [r7, #2]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	0a1b      	lsrs	r3, r3, #8
 8004096:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	617a      	str	r2, [r7, #20]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f3      	bne.n	80040c0 <mem_set+0x10>
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80040e6:	b480      	push	{r7}
 80040e8:	b089      	sub	sp, #36	; 0x24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	61fa      	str	r2, [r7, #28]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	4619      	mov	r1, r3
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	61ba      	str	r2, [r7, #24]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	1acb      	subs	r3, r1, r3
 8004112:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3b01      	subs	r3, #1
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <mem_cmp+0x40>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0eb      	beq.n	80040fe <mem_cmp+0x18>

	return r;
 8004126:	697b      	ldr	r3, [r7, #20]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3724      	adds	r7, #36	; 0x24
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800413e:	e002      	b.n	8004146 <chk_chr+0x12>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3301      	adds	r3, #1
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <chk_chr+0x26>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4293      	cmp	r3, r2
 8004158:	d1f2      	bne.n	8004140 <chk_chr+0xc>
	return *str;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	781b      	ldrb	r3, [r3, #0]
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	e01f      	b.n	80041bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800417c:	4a41      	ldr	r2, [pc, #260]	; (8004284 <inc_lock+0x118>)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	4413      	add	r3, r2
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d113      	bne.n	80041b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800418e:	4a3d      	ldr	r2, [pc, #244]	; (8004284 <inc_lock+0x118>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800419e:	429a      	cmp	r2, r3
 80041a0:	d109      	bne.n	80041b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80041a2:	4a38      	ldr	r2, [pc, #224]	; (8004284 <inc_lock+0x118>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	4413      	add	r3, r2
 80041aa:	3308      	adds	r3, #8
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d006      	beq.n	80041c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d9dc      	bls.n	800417c <inc_lock+0x10>
 80041c2:	e000      	b.n	80041c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80041c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d132      	bne.n	8004232 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e002      	b.n	80041d8 <inc_lock+0x6c>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d806      	bhi.n	80041ec <inc_lock+0x80>
 80041de:	4a29      	ldr	r2, [pc, #164]	; (8004284 <inc_lock+0x118>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	4413      	add	r3, r2
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f2      	bne.n	80041d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d101      	bne.n	80041f6 <inc_lock+0x8a>
 80041f2:	2300      	movs	r3, #0
 80041f4:	e040      	b.n	8004278 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4922      	ldr	r1, [pc, #136]	; (8004284 <inc_lock+0x118>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	440b      	add	r3, r1
 8004202:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	491e      	ldr	r1, [pc, #120]	; (8004284 <inc_lock+0x118>)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	440b      	add	r3, r1
 8004210:	3304      	adds	r3, #4
 8004212:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	491a      	ldr	r1, [pc, #104]	; (8004284 <inc_lock+0x118>)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	440b      	add	r3, r1
 8004220:	3308      	adds	r3, #8
 8004222:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004224:	4a17      	ldr	r2, [pc, #92]	; (8004284 <inc_lock+0x118>)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	4413      	add	r3, r2
 800422c:	330c      	adds	r3, #12
 800422e:	2200      	movs	r2, #0
 8004230:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <inc_lock+0xe0>
 8004238:	4a12      	ldr	r2, [pc, #72]	; (8004284 <inc_lock+0x118>)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4413      	add	r3, r2
 8004240:	330c      	adds	r3, #12
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <inc_lock+0xe0>
 8004248:	2300      	movs	r3, #0
 800424a:	e015      	b.n	8004278 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d108      	bne.n	8004264 <inc_lock+0xf8>
 8004252:	4a0c      	ldr	r2, [pc, #48]	; (8004284 <inc_lock+0x118>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	4413      	add	r3, r2
 800425a:	330c      	adds	r3, #12
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	e001      	b.n	8004268 <inc_lock+0xfc>
 8004264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004268:	4906      	ldr	r1, [pc, #24]	; (8004284 <inc_lock+0x118>)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	440b      	add	r3, r1
 8004270:	330c      	adds	r3, #12
 8004272:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3301      	adds	r3, #1
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	2000020c 	.word	0x2000020c

08004288 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d825      	bhi.n	80042e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800429c:	4a17      	ldr	r2, [pc, #92]	; (80042fc <dec_lock+0x74>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	4413      	add	r3, r2
 80042a4:	330c      	adds	r3, #12
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80042aa:	89fb      	ldrh	r3, [r7, #14]
 80042ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b0:	d101      	bne.n	80042b6 <dec_lock+0x2e>
 80042b2:	2300      	movs	r3, #0
 80042b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80042b6:	89fb      	ldrh	r3, [r7, #14]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <dec_lock+0x3a>
 80042bc:	89fb      	ldrh	r3, [r7, #14]
 80042be:	3b01      	subs	r3, #1
 80042c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80042c2:	4a0e      	ldr	r2, [pc, #56]	; (80042fc <dec_lock+0x74>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	4413      	add	r3, r2
 80042ca:	330c      	adds	r3, #12
 80042cc:	89fa      	ldrh	r2, [r7, #14]
 80042ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80042d0:	89fb      	ldrh	r3, [r7, #14]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d105      	bne.n	80042e2 <dec_lock+0x5a>
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <dec_lock+0x74>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	4413      	add	r3, r2
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	737b      	strb	r3, [r7, #13]
 80042e6:	e001      	b.n	80042ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80042e8:	2302      	movs	r3, #2
 80042ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80042ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	2000020c 	.word	0x2000020c

08004300 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e010      	b.n	8004330 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800430e:	4a0d      	ldr	r2, [pc, #52]	; (8004344 <clear_lock+0x44>)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	4413      	add	r3, r2
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d105      	bne.n	800432a <clear_lock+0x2a>
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <clear_lock+0x44>)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	4413      	add	r3, r2
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3301      	adds	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d9eb      	bls.n	800430e <clear_lock+0xe>
	}
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	2000020c 	.word	0x2000020c

08004348 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	78db      	ldrb	r3, [r3, #3]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d034      	beq.n	80043c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	7858      	ldrb	r0, [r3, #1]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800436c:	2301      	movs	r3, #1
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	f7ff fdfc 	bl	8003f6c <disk_write>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <sync_window+0x38>
			res = FR_DISK_ERR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
 800437e:	e022      	b.n	80043c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	1ad2      	subs	r2, r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	429a      	cmp	r2, r3
 8004394:	d217      	bcs.n	80043c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	789b      	ldrb	r3, [r3, #2]
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e010      	b.n	80043c0 <sync_window+0x78>
					wsect += fs->fsize;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4413      	add	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	7858      	ldrb	r0, [r3, #1]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80043b2:	2301      	movs	r3, #1
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	f7ff fdd9 	bl	8003f6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	3b01      	subs	r3, #1
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d8eb      	bhi.n	800439e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d01b      	beq.n	8004420 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ffad 	bl	8004348 <sync_window>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d113      	bne.n	8004420 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	7858      	ldrb	r0, [r3, #1]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004402:	2301      	movs	r3, #1
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	f7ff fd91 	bl	8003f2c <disk_read>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	3b02      	subs	r3, #2
 8004438:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	3b02      	subs	r3, #2
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d301      	bcc.n	800444a <clust2sect+0x20>
 8004446:	2300      	movs	r3, #0
 8004448:	e008      	b.n	800445c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	895b      	ldrh	r3, [r3, #10]
 800444e:	461a      	mov	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	fb03 f202 	mul.w	r2, r3, r2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	4413      	add	r3, r2
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d904      	bls.n	8004488 <get_fat+0x20>
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d302      	bcc.n	800448e <get_fat+0x26>
		val = 1;	/* Internal error */
 8004488:	2301      	movs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e08f      	b.n	80045ae <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b03      	cmp	r3, #3
 800449a:	d062      	beq.n	8004562 <get_fat+0xfa>
 800449c:	2b03      	cmp	r3, #3
 800449e:	dc7c      	bgt.n	800459a <get_fat+0x132>
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d002      	beq.n	80044aa <get_fat+0x42>
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d042      	beq.n	800452e <get_fat+0xc6>
 80044a8:	e077      	b.n	800459a <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	0a5b      	lsrs	r3, r3, #9
 80044c0:	4413      	add	r3, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	6938      	ldr	r0, [r7, #16]
 80044c6:	f7ff ff83 	bl	80043d0 <move_window>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d167      	bne.n	80045a0 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	60fa      	str	r2, [r7, #12]
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4413      	add	r3, r2
 80044de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044e2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	0a5b      	lsrs	r3, r3, #9
 80044ec:	4413      	add	r3, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	6938      	ldr	r0, [r7, #16]
 80044f2:	f7ff ff6d 	bl	80043d0 <move_window>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d153      	bne.n	80045a4 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	461a      	mov	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <get_fat+0xbc>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	e002      	b.n	800452a <get_fat+0xc2>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800452a:	617b      	str	r3, [r7, #20]
			break;
 800452c:	e03f      	b.n	80045ae <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	4413      	add	r3, r2
 8004538:	4619      	mov	r1, r3
 800453a:	6938      	ldr	r0, [r7, #16]
 800453c:	f7ff ff48 	bl	80043d0 <move_window>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d130      	bne.n	80045a8 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004554:	4413      	add	r3, r2
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fd28 	bl	8003fac <ld_word>
 800455c:	4603      	mov	r3, r0
 800455e:	617b      	str	r3, [r7, #20]
			break;
 8004560:	e025      	b.n	80045ae <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	09db      	lsrs	r3, r3, #7
 800456a:	4413      	add	r3, r2
 800456c:	4619      	mov	r1, r3
 800456e:	6938      	ldr	r0, [r7, #16]
 8004570:	f7ff ff2e 	bl	80043d0 <move_window>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d118      	bne.n	80045ac <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004588:	4413      	add	r3, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fd26 	bl	8003fdc <ld_dword>
 8004590:	4603      	mov	r3, r0
 8004592:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004596:	617b      	str	r3, [r7, #20]
			break;
 8004598:	e009      	b.n	80045ae <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800459a:	2301      	movs	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e006      	b.n	80045ae <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045a0:	bf00      	nop
 80045a2:	e004      	b.n	80045ae <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045a4:	bf00      	nop
 80045a6:	e002      	b.n	80045ae <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80045ac:	bf00      	nop
		}
	}

	return val;
 80045ae:	697b      	ldr	r3, [r7, #20]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b089      	sub	sp, #36	; 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80045c4:	2302      	movs	r3, #2
 80045c6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	f240 80d2 	bls.w	8004774 <put_fat+0x1bc>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	f080 80cc 	bcs.w	8004774 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	f000 8096 	beq.w	8004712 <put_fat+0x15a>
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	f300 80cd 	bgt.w	8004786 <put_fat+0x1ce>
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d002      	beq.n	80045f6 <put_fat+0x3e>
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d06e      	beq.n	80046d2 <put_fat+0x11a>
 80045f4:	e0c7      	b.n	8004786 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	0a5b      	lsrs	r3, r3, #9
 800460c:	4413      	add	r3, r2
 800460e:	4619      	mov	r1, r3
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff fedd 	bl	80043d0 <move_window>
 8004616:	4603      	mov	r3, r0
 8004618:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800461a:	7ffb      	ldrb	r3, [r7, #31]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 80ab 	bne.w	8004778 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	1c59      	adds	r1, r3, #1
 800462c:	61b9      	str	r1, [r7, #24]
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	4413      	add	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <put_fat+0xa4>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b25b      	sxtb	r3, r3
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	b25a      	sxtb	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	b25b      	sxtb	r3, r3
 8004654:	4313      	orrs	r3, r2
 8004656:	b25b      	sxtb	r3, r3
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e001      	b.n	8004660 <put_fat+0xa8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	0a5b      	lsrs	r3, r3, #9
 8004672:	4413      	add	r3, r2
 8004674:	4619      	mov	r1, r3
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff feaa 	bl	80043d0 <move_window>
 800467c:	4603      	mov	r3, r0
 800467e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004680:	7ffb      	ldrb	r3, [r7, #31]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d17a      	bne.n	800477c <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	4413      	add	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <put_fat+0xf0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e00e      	b.n	80046c6 <put_fat+0x10e>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	f023 030f 	bic.w	r3, r3, #15
 80046b2:	b25a      	sxtb	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	b25b      	sxtb	r3, r3
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	b25b      	sxtb	r3, r3
 80046c0:	4313      	orrs	r3, r2
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	70da      	strb	r2, [r3, #3]
			break;
 80046d0:	e059      	b.n	8004786 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	4413      	add	r3, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff fe76 	bl	80043d0 <move_window>
 80046e4:	4603      	mov	r3, r0
 80046e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80046e8:	7ffb      	ldrb	r3, [r7, #31]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d148      	bne.n	8004780 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80046fc:	4413      	add	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	b292      	uxth	r2, r2
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fc8c 	bl	8004022 <st_word>
			fs->wflag = 1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	70da      	strb	r2, [r3, #3]
			break;
 8004710:	e039      	b.n	8004786 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	09db      	lsrs	r3, r3, #7
 800471a:	4413      	add	r3, r2
 800471c:	4619      	mov	r1, r3
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fe56 	bl	80043d0 <move_window>
 8004724:	4603      	mov	r3, r0
 8004726:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004728:	7ffb      	ldrb	r3, [r7, #31]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d12a      	bne.n	8004784 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004742:	4413      	add	r3, r2
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fc49 	bl	8003fdc <ld_dword>
 800474a:	4603      	mov	r3, r0
 800474c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004750:	4323      	orrs	r3, r4
 8004752:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004762:	4413      	add	r3, r2
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fc76 	bl	8004058 <st_dword>
			fs->wflag = 1;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	70da      	strb	r2, [r3, #3]
			break;
 8004772:	e008      	b.n	8004786 <put_fat+0x1ce>
		}
	}
 8004774:	bf00      	nop
 8004776:	e006      	b.n	8004786 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004778:	bf00      	nop
 800477a:	e004      	b.n	8004786 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800477c:	bf00      	nop
 800477e:	e002      	b.n	8004786 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004780:	bf00      	nop
 8004782:	e000      	b.n	8004786 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004784:	bf00      	nop
	return res;
 8004786:	7ffb      	ldrb	r3, [r7, #31]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3724      	adds	r7, #36	; 0x24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd90      	pop	{r4, r7, pc}

08004790 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10d      	bne.n	80047c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <create_chain+0x2c>
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d31b      	bcc.n	80047f4 <create_chain+0x64>
 80047bc:	2301      	movs	r3, #1
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e018      	b.n	80047f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80047c2:	6839      	ldr	r1, [r7, #0]
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff fe4f 	bl	8004468 <get_fat>
 80047ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d801      	bhi.n	80047d6 <create_chain+0x46>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e070      	b.n	80048b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d101      	bne.n	80047e2 <create_chain+0x52>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	e06a      	b.n	80048b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d201      	bcs.n	80047f0 <create_chain+0x60>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	e063      	b.n	80048b8 <create_chain+0x128>
		scl = clst;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	429a      	cmp	r2, r3
 8004806:	d307      	bcc.n	8004818 <create_chain+0x88>
				ncl = 2;
 8004808:	2302      	movs	r3, #2
 800480a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	429a      	cmp	r2, r3
 8004812:	d901      	bls.n	8004818 <create_chain+0x88>
 8004814:	2300      	movs	r3, #0
 8004816:	e04f      	b.n	80048b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004818:	69f9      	ldr	r1, [r7, #28]
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fe24 	bl	8004468 <get_fat>
 8004820:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00e      	beq.n	8004846 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d003      	beq.n	8004836 <create_chain+0xa6>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d101      	bne.n	800483a <create_chain+0xaa>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	e03e      	b.n	80048b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	429a      	cmp	r2, r3
 8004840:	d1da      	bne.n	80047f8 <create_chain+0x68>
 8004842:	2300      	movs	r3, #0
 8004844:	e038      	b.n	80048b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004846:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004848:	f04f 32ff 	mov.w	r2, #4294967295
 800484c:	69f9      	ldr	r1, [r7, #28]
 800484e:	6938      	ldr	r0, [r7, #16]
 8004850:	f7ff feb2 	bl	80045b8 <put_fat>
 8004854:	4603      	mov	r3, r0
 8004856:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <create_chain+0xe2>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d006      	beq.n	8004872 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	6938      	ldr	r0, [r7, #16]
 800486a:	f7ff fea5 	bl	80045b8 <put_fat>
 800486e:	4603      	mov	r3, r0
 8004870:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d116      	bne.n	80048a6 <create_chain+0x116>
		fs->last_clst = ncl;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	3b02      	subs	r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d804      	bhi.n	8004896 <create_chain+0x106>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	1e5a      	subs	r2, r3, #1
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	791b      	ldrb	r3, [r3, #4]
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	711a      	strb	r2, [r3, #4]
 80048a4:	e007      	b.n	80048b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d102      	bne.n	80048b2 <create_chain+0x122>
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
 80048b0:	e000      	b.n	80048b4 <create_chain+0x124>
 80048b2:	2301      	movs	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80048b6:	69fb      	ldr	r3, [r7, #28]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048d6:	d204      	bcs.n	80048e2 <dir_sdi+0x22>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80048e2:	2302      	movs	r3, #2
 80048e4:	e063      	b.n	80049ae <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <dir_sdi+0x46>
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d902      	bls.n	8004906 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10c      	bne.n	8004926 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	8912      	ldrh	r2, [r2, #8]
 8004914:	4293      	cmp	r3, r2
 8004916:	d301      	bcc.n	800491c <dir_sdi+0x5c>
 8004918:	2302      	movs	r3, #2
 800491a:	e048      	b.n	80049ae <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	61da      	str	r2, [r3, #28]
 8004924:	e029      	b.n	800497a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	895b      	ldrh	r3, [r3, #10]
 800492a:	025b      	lsls	r3, r3, #9
 800492c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800492e:	e019      	b.n	8004964 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6979      	ldr	r1, [r7, #20]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fd97 	bl	8004468 <get_fat>
 800493a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d101      	bne.n	8004948 <dir_sdi+0x88>
 8004944:	2301      	movs	r3, #1
 8004946:	e032      	b.n	80049ae <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d904      	bls.n	8004958 <dir_sdi+0x98>
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	429a      	cmp	r2, r3
 8004956:	d301      	bcc.n	800495c <dir_sdi+0x9c>
 8004958:	2302      	movs	r3, #2
 800495a:	e028      	b.n	80049ae <dir_sdi+0xee>
			ofs -= csz;
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	429a      	cmp	r2, r3
 800496a:	d2e1      	bcs.n	8004930 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800496c:	6979      	ldr	r1, [r7, #20]
 800496e:	6938      	ldr	r0, [r7, #16]
 8004970:	f7ff fd5b 	bl	800442a <clust2sect>
 8004974:	4602      	mov	r2, r0
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <dir_sdi+0xcc>
 8004988:	2302      	movs	r3, #2
 800498a:	e010      	b.n	80049ae <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	0a5b      	lsrs	r3, r3, #9
 8004994:	441a      	add	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	441a      	add	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	3320      	adds	r3, #32
 80049cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <dir_next+0x28>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049dc:	d301      	bcc.n	80049e2 <dir_next+0x2c>
 80049de:	2304      	movs	r3, #4
 80049e0:	e0aa      	b.n	8004b38 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 8098 	bne.w	8004b1e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10b      	bne.n	8004a18 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	8912      	ldrh	r2, [r2, #8]
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f0c0 8088 	bcc.w	8004b1e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	61da      	str	r2, [r3, #28]
 8004a14:	2304      	movs	r3, #4
 8004a16:	e08f      	b.n	8004b38 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	0a5b      	lsrs	r3, r3, #9
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	8952      	ldrh	r2, [r2, #10]
 8004a20:	3a01      	subs	r2, #1
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d17a      	bne.n	8004b1e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f7ff fd19 	bl	8004468 <get_fat>
 8004a36:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d801      	bhi.n	8004a42 <dir_next+0x8c>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e07a      	b.n	8004b38 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d101      	bne.n	8004a4e <dir_next+0x98>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e074      	b.n	8004b38 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d358      	bcc.n	8004b0a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d104      	bne.n	8004a68 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	61da      	str	r2, [r3, #28]
 8004a64:	2304      	movs	r3, #4
 8004a66:	e067      	b.n	8004b38 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f7ff fe8d 	bl	8004790 <create_chain>
 8004a76:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <dir_next+0xcc>
 8004a7e:	2307      	movs	r3, #7
 8004a80:	e05a      	b.n	8004b38 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <dir_next+0xd6>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e055      	b.n	8004b38 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d101      	bne.n	8004a98 <dir_next+0xe2>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e04f      	b.n	8004b38 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff fc55 	bl	8004348 <sync_window>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <dir_next+0xf2>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e047      	b.n	8004b38 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3334      	adds	r3, #52	; 0x34
 8004aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fafc 	bl	80040b0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff fcb3 	bl	800442a <clust2sect>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8004aca:	e012      	b.n	8004af2 <dir_next+0x13c>
						fs->wflag = 1;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff fc38 	bl	8004348 <sync_window>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <dir_next+0x12c>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e02a      	b.n	8004b38 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	895b      	ldrh	r3, [r3, #10]
 8004af6:	461a      	mov	r2, r3
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d3e6      	bcc.n	8004acc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad2      	subs	r2, r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004b10:	6979      	ldr	r1, [r7, #20]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff fc89 	bl	800442a <clust2sect>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	331a      	adds	r3, #26
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fa2c 	bl	8003fac <ld_word>
 8004b54:	4603      	mov	r3, r0
 8004b56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d109      	bne.n	8004b74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fa21 	bl	8003fac <ld_word>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	041b      	lsls	r3, r3, #16
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	331a      	adds	r3, #26
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fa0c 	bl	8003fac <ld_word>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <cmp_lfn+0x1e>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e059      	b.n	8004c52 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba6:	1e5a      	subs	r2, r3, #1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	81fb      	strh	r3, [r7, #14]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	e033      	b.n	8004c26 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004bbe:	4a27      	ldr	r2, [pc, #156]	; (8004c5c <cmp_lfn+0xdc>)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4413      	add	r3, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff f9ed 	bl	8003fac <ld_word>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004bd6:	89fb      	ldrh	r3, [r7, #14]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01a      	beq.n	8004c12 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2bfe      	cmp	r3, #254	; 0xfe
 8004be0:	d812      	bhi.n	8004c08 <cmp_lfn+0x88>
 8004be2:	89bb      	ldrh	r3, [r7, #12]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 fb63 	bl	80062b0 <ff_wtoupper>
 8004bea:	4603      	mov	r3, r0
 8004bec:	461c      	mov	r4, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	617a      	str	r2, [r7, #20]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 fb57 	bl	80062b0 <ff_wtoupper>
 8004c02:	4603      	mov	r3, r0
 8004c04:	429c      	cmp	r4, r3
 8004c06:	d001      	beq.n	8004c0c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e022      	b.n	8004c52 <cmp_lfn+0xd2>
			}
			wc = uc;
 8004c0c:	89bb      	ldrh	r3, [r7, #12]
 8004c0e:	81fb      	strh	r3, [r7, #14]
 8004c10:	e006      	b.n	8004c20 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004c12:	89bb      	ldrh	r3, [r7, #12]
 8004c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d001      	beq.n	8004c20 <cmp_lfn+0xa0>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e018      	b.n	8004c52 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3301      	adds	r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d9c8      	bls.n	8004bbe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00b      	beq.n	8004c50 <cmp_lfn+0xd0>
 8004c38:	89fb      	ldrh	r3, [r7, #14]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <cmp_lfn+0xd0>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <cmp_lfn+0xd0>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e000      	b.n	8004c52 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004c50:	2301      	movs	r3, #1
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd90      	pop	{r4, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08009e58 	.word	0x08009e58

08004c60 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	331a      	adds	r3, #26
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff f99c 	bl	8003fac <ld_word>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <pick_lfn+0x1e>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e04d      	b.n	8004d1a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c86:	1e5a      	subs	r2, r3, #1
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004c94:	2301      	movs	r3, #1
 8004c96:	81fb      	strh	r3, [r7, #14]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	e028      	b.n	8004cf0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004c9e:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <pick_lfn+0xc4>)
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4413      	add	r3, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff f97d 	bl	8003fac <ld_word>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004cb6:	89fb      	ldrh	r3, [r7, #14]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00f      	beq.n	8004cdc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2bfe      	cmp	r3, #254	; 0xfe
 8004cc0:	d901      	bls.n	8004cc6 <pick_lfn+0x66>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e029      	b.n	8004d1a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004cc6:	89bb      	ldrh	r3, [r7, #12]
 8004cc8:	81fb      	strh	r3, [r7, #14]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	617a      	str	r2, [r7, #20]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	89fa      	ldrh	r2, [r7, #14]
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	e006      	b.n	8004cea <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004cdc:	89bb      	ldrh	r3, [r7, #12]
 8004cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d001      	beq.n	8004cea <pick_lfn+0x8a>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e017      	b.n	8004d1a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3301      	adds	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d9d3      	bls.n	8004c9e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2bfe      	cmp	r3, #254	; 0xfe
 8004d06:	d901      	bls.n	8004d0c <pick_lfn+0xac>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e006      	b.n	8004d1a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	2200      	movs	r2, #0
 8004d16:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8004d18:	2301      	movs	r3, #1
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	08009e58 	.word	0x08009e58

08004d28 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004d34:	230b      	movs	r3, #11
 8004d36:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	0852      	lsrs	r2, r2, #1
 8004d3e:	01db      	lsls	r3, r3, #7
 8004d40:	4313      	orrs	r3, r2
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	1c59      	adds	r1, r3, #1
 8004d48:	6079      	str	r1, [r7, #4]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1ed      	bne.n	8004d38 <sum_sfn+0x10>
	return sum;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8004d74:	2304      	movs	r3, #4
 8004d76:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8004d7e:	23ff      	movs	r3, #255	; 0xff
 8004d80:	757b      	strb	r3, [r7, #21]
 8004d82:	23ff      	movs	r3, #255	; 0xff
 8004d84:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8004d86:	e081      	b.n	8004e8c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6938      	ldr	r0, [r7, #16]
 8004d90:	f7ff fb1e 	bl	80043d0 <move_window>
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d17c      	bne.n	8004e98 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8004da6:	7dbb      	ldrb	r3, [r7, #22]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8004dac:	2304      	movs	r3, #4
 8004dae:	75fb      	strb	r3, [r7, #23]
 8004db0:	e077      	b.n	8004ea2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	330b      	adds	r3, #11
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	7bfa      	ldrb	r2, [r7, #15]
 8004dc4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8004dc6:	7dbb      	ldrb	r3, [r7, #22]
 8004dc8:	2be5      	cmp	r3, #229	; 0xe5
 8004dca:	d00e      	beq.n	8004dea <dir_read+0x80>
 8004dcc:	7dbb      	ldrb	r3, [r7, #22]
 8004dce:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd0:	d00b      	beq.n	8004dea <dir_read+0x80>
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	f023 0320 	bic.w	r3, r3, #32
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d002      	beq.n	8004df0 <dir_read+0x86>
				ord = 0xFF;
 8004dea:	23ff      	movs	r3, #255	; 0xff
 8004dec:	757b      	strb	r3, [r7, #21]
 8004dee:	e044      	b.n	8004e7a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b0f      	cmp	r3, #15
 8004df4:	d12f      	bne.n	8004e56 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8004df6:	7dbb      	ldrb	r3, [r7, #22]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00d      	beq.n	8004e1c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	7b5b      	ldrb	r3, [r3, #13]
 8004e06:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8004e08:	7dbb      	ldrb	r3, [r7, #22]
 8004e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0e:	75bb      	strb	r3, [r7, #22]
 8004e10:	7dbb      	ldrb	r3, [r7, #22]
 8004e12:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695a      	ldr	r2, [r3, #20]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004e1c:	7dba      	ldrb	r2, [r7, #22]
 8004e1e:	7d7b      	ldrb	r3, [r7, #21]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d115      	bne.n	8004e50 <dir_read+0xe6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	330d      	adds	r3, #13
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	7d3a      	ldrb	r2, [r7, #20]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d10e      	bne.n	8004e50 <dir_read+0xe6>
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	f7ff ff0f 	bl	8004c60 <pick_lfn>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <dir_read+0xe6>
 8004e48:	7d7b      	ldrb	r3, [r7, #21]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e000      	b.n	8004e52 <dir_read+0xe8>
 8004e50:	23ff      	movs	r3, #255	; 0xff
 8004e52:	757b      	strb	r3, [r7, #21]
 8004e54:	e011      	b.n	8004e7a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8004e56:	7d7b      	ldrb	r3, [r7, #21]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <dir_read+0x106>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff61 	bl	8004d28 <sum_sfn>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	7d3b      	ldrb	r3, [r7, #20]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d015      	beq.n	8004e9c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8004e78:	e010      	b.n	8004e9c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff fd9a 	bl	80049b6 <dir_next>
 8004e82:	4603      	mov	r3, r0
 8004e84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <dir_read+0x136>
	while (dp->sect) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f47f af79 	bne.w	8004d88 <dir_read+0x1e>
 8004e96:	e004      	b.n	8004ea2 <dir_read+0x138>
		if (res != FR_OK) break;
 8004e98:	bf00      	nop
 8004e9a:	e002      	b.n	8004ea2 <dir_read+0x138>
					break;
 8004e9c:	bf00      	nop
 8004e9e:	e000      	b.n	8004ea2 <dir_read+0x138>
		if (res != FR_OK) break;
 8004ea0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <dir_read+0x144>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	61da      	str	r2, [r3, #28]
	return res;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fcf9 	bl	80048c0 <dir_sdi>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <dir_find+0x24>
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	e0a9      	b.n	8005030 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004edc:	23ff      	movs	r3, #255	; 0xff
 8004ede:	753b      	strb	r3, [r7, #20]
 8004ee0:	7d3b      	ldrb	r3, [r7, #20]
 8004ee2:	757b      	strb	r3, [r7, #21]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6938      	ldr	r0, [r7, #16]
 8004ef4:	f7ff fa6c 	bl	80043d0 <move_window>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f040 8090 	bne.w	8005024 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004f0c:	7dbb      	ldrb	r3, [r7, #22]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <dir_find+0x60>
 8004f12:	2304      	movs	r3, #4
 8004f14:	75fb      	strb	r3, [r7, #23]
 8004f16:	e08a      	b.n	800502e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	330b      	adds	r3, #11
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f24:	73fb      	strb	r3, [r7, #15]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	7bfa      	ldrb	r2, [r7, #15]
 8004f2a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004f2c:	7dbb      	ldrb	r3, [r7, #22]
 8004f2e:	2be5      	cmp	r3, #229	; 0xe5
 8004f30:	d007      	beq.n	8004f42 <dir_find+0x8a>
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <dir_find+0x98>
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b0f      	cmp	r3, #15
 8004f40:	d006      	beq.n	8004f50 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004f42:	23ff      	movs	r3, #255	; 0xff
 8004f44:	757b      	strb	r3, [r7, #21]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f4e:	e05e      	b.n	800500e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b0f      	cmp	r3, #15
 8004f54:	d136      	bne.n	8004fc4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d154      	bne.n	800500e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004f64:	7dbb      	ldrb	r3, [r7, #22]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	7b5b      	ldrb	r3, [r3, #13]
 8004f74:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004f76:	7dbb      	ldrb	r3, [r7, #22]
 8004f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7c:	75bb      	strb	r3, [r7, #22]
 8004f7e:	7dbb      	ldrb	r3, [r7, #22]
 8004f80:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695a      	ldr	r2, [r3, #20]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004f8a:	7dba      	ldrb	r2, [r7, #22]
 8004f8c:	7d7b      	ldrb	r3, [r7, #21]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d115      	bne.n	8004fbe <dir_find+0x106>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	330d      	adds	r3, #13
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	7d3a      	ldrb	r2, [r7, #20]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d10e      	bne.n	8004fbe <dir_find+0x106>
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7ff fde8 	bl	8004b80 <cmp_lfn>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <dir_find+0x106>
 8004fb6:	7d7b      	ldrb	r3, [r7, #21]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	e000      	b.n	8004fc0 <dir_find+0x108>
 8004fbe:	23ff      	movs	r3, #255	; 0xff
 8004fc0:	757b      	strb	r3, [r7, #21]
 8004fc2:	e024      	b.n	800500e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004fc4:	7d7b      	ldrb	r3, [r7, #21]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <dir_find+0x126>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff feaa 	bl	8004d28 <sum_sfn>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	7d3b      	ldrb	r3, [r7, #20]
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d024      	beq.n	8005028 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <dir_find+0x14a>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a18      	ldr	r0, [r3, #32]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3324      	adds	r3, #36	; 0x24
 8004ff4:	220b      	movs	r2, #11
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	f7ff f875 	bl	80040e6 <mem_cmp>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d014      	beq.n	800502c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005002:	23ff      	movs	r3, #255	; 0xff
 8005004:	757b      	strb	r3, [r7, #21]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f04f 32ff 	mov.w	r2, #4294967295
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800500e:	2100      	movs	r1, #0
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fcd0 	bl	80049b6 <dir_next>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f43f af65 	beq.w	8004eec <dir_find+0x34>
 8005022:	e004      	b.n	800502e <dir_find+0x176>
		if (res != FR_OK) break;
 8005024:	bf00      	nop
 8005026:	e002      	b.n	800502e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005028:	bf00      	nop
 800502a:	e000      	b.n	800502e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800502c:	bf00      	nop

	return res;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80c9 	beq.w	80051ea <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d032      	beq.n	80050c8 <get_fileinfo+0x90>
			i = j = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800506a:	e01b      	b.n	80050a4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800506c:	89fb      	ldrh	r3, [r7, #14]
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f001 f8e1 	bl	8006238 <ff_convert>
 8005076:	4603      	mov	r3, r0
 8005078:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800507a:	89fb      	ldrh	r3, [r7, #14]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <get_fileinfo+0x4e>
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	e01a      	b.n	80050bc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	2bfe      	cmp	r3, #254	; 0xfe
 800508a:	d902      	bls.n	8005092 <get_fileinfo+0x5a>
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	e014      	b.n	80050bc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	61fa      	str	r2, [r7, #28]
 8005098:	89fa      	ldrh	r2, [r7, #14]
 800509a:	b2d1      	uxtb	r1, r2
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	4413      	add	r3, r2
 80050a0:	460a      	mov	r2, r1
 80050a2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	1c59      	adds	r1, r3, #1
 80050ac:	61b9      	str	r1, [r7, #24]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	81fb      	strh	r3, [r7, #14]
 80050b6:	89fb      	ldrh	r3, [r7, #14]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1d7      	bne.n	800506c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	3316      	adds	r3, #22
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	3316      	adds	r3, #22
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80050dc:	e04c      	b.n	8005178 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	1c59      	adds	r1, r3, #1
 80050e6:	61f9      	str	r1, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d100      	bne.n	80050f6 <get_fileinfo+0xbe>
 80050f4:	e040      	b.n	8005178 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d101      	bne.n	8005100 <get_fileinfo+0xc8>
 80050fc:	23e5      	movs	r3, #229	; 0xe5
 80050fe:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b09      	cmp	r3, #9
 8005104:	d10f      	bne.n	8005126 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8005106:	89bb      	ldrh	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d105      	bne.n	8005118 <get_fileinfo+0xe0>
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	4413      	add	r3, r2
 8005112:	3316      	adds	r3, #22
 8005114:	222e      	movs	r2, #46	; 0x2e
 8005116:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	61ba      	str	r2, [r7, #24]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	4413      	add	r3, r2
 8005122:	222e      	movs	r2, #46	; 0x2e
 8005124:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	4413      	add	r3, r2
 800512c:	3309      	adds	r3, #9
 800512e:	7dfa      	ldrb	r2, [r7, #23]
 8005130:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8005132:	89bb      	ldrh	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11c      	bne.n	8005172 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d913      	bls.n	8005166 <get_fileinfo+0x12e>
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b5a      	cmp	r3, #90	; 0x5a
 8005142:	d810      	bhi.n	8005166 <get_fileinfo+0x12e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	330c      	adds	r3, #12
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d901      	bls.n	8005158 <get_fileinfo+0x120>
 8005154:	2310      	movs	r3, #16
 8005156:	e000      	b.n	800515a <get_fileinfo+0x122>
 8005158:	2308      	movs	r3, #8
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8005160:	7dfb      	ldrb	r3, [r7, #23]
 8005162:	3320      	adds	r3, #32
 8005164:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	4413      	add	r3, r2
 800516c:	3316      	adds	r3, #22
 800516e:	7dfa      	ldrb	r2, [r7, #23]
 8005170:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	3301      	adds	r3, #1
 8005176:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2b0a      	cmp	r3, #10
 800517c:	d9af      	bls.n	80050de <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800517e:	89bb      	ldrh	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10d      	bne.n	80051a0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	4413      	add	r3, r2
 800518a:	3316      	adds	r3, #22
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	330c      	adds	r3, #12
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <get_fileinfo+0x168>
 800519c:	2300      	movs	r3, #0
 800519e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	4413      	add	r3, r2
 80051a6:	3309      	adds	r3, #9
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	7ada      	ldrb	r2, [r3, #11]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	331c      	adds	r3, #28
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe ff0d 	bl	8003fdc <ld_dword>
 80051c2:	4602      	mov	r2, r0
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	3316      	adds	r3, #22
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe ff04 	bl	8003fdc <ld_dword>
 80051d4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	b29a      	uxth	r2, r3
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	80da      	strh	r2, [r3, #6]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	809a      	strh	r2, [r3, #4]
 80051e8:	e000      	b.n	80051ec <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80051ea:	bf00      	nop
}
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	61ba      	str	r2, [r7, #24]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4413      	add	r3, r2
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005224:	2b1f      	cmp	r3, #31
 8005226:	d940      	bls.n	80052aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800522a:	2b2f      	cmp	r3, #47	; 0x2f
 800522c:	d006      	beq.n	800523c <create_name+0x48>
 800522e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005230:	2b5c      	cmp	r3, #92	; 0x5c
 8005232:	d110      	bne.n	8005256 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005234:	e002      	b.n	800523c <create_name+0x48>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	3301      	adds	r3, #1
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	4413      	add	r3, r2
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b2f      	cmp	r3, #47	; 0x2f
 8005246:	d0f6      	beq.n	8005236 <create_name+0x42>
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	4413      	add	r3, r2
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b5c      	cmp	r3, #92	; 0x5c
 8005252:	d0f0      	beq.n	8005236 <create_name+0x42>
			break;
 8005254:	e02a      	b.n	80052ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2bfe      	cmp	r3, #254	; 0xfe
 800525a:	d901      	bls.n	8005260 <create_name+0x6c>
 800525c:	2306      	movs	r3, #6
 800525e:	e177      	b.n	8005550 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005262:	b2db      	uxtb	r3, r3
 8005264:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005268:	2101      	movs	r1, #1
 800526a:	4618      	mov	r0, r3
 800526c:	f000 ffe4 	bl	8006238 <ff_convert>
 8005270:	4603      	mov	r3, r0
 8005272:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <create_name+0x8a>
 800527a:	2306      	movs	r3, #6
 800527c:	e168      	b.n	8005550 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800527e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005280:	2b7f      	cmp	r3, #127	; 0x7f
 8005282:	d809      	bhi.n	8005298 <create_name+0xa4>
 8005284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005286:	4619      	mov	r1, r3
 8005288:	48b3      	ldr	r0, [pc, #716]	; (8005558 <create_name+0x364>)
 800528a:	f7fe ff53 	bl	8004134 <chk_chr>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <create_name+0xa4>
 8005294:	2306      	movs	r3, #6
 8005296:	e15b      	b.n	8005550 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	617a      	str	r2, [r7, #20]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80052a8:	e7b4      	b.n	8005214 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80052aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	441a      	add	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80052b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052b8:	2b1f      	cmp	r3, #31
 80052ba:	d801      	bhi.n	80052c0 <create_name+0xcc>
 80052bc:	2304      	movs	r3, #4
 80052be:	e000      	b.n	80052c2 <create_name+0xce>
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80052c6:	e011      	b.n	80052ec <create_name+0xf8>
		w = lfn[di - 1];
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80052ce:	3b01      	subs	r3, #1
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80052da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d002      	beq.n	80052e6 <create_name+0xf2>
 80052e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052e2:	2b2e      	cmp	r3, #46	; 0x2e
 80052e4:	d106      	bne.n	80052f4 <create_name+0x100>
		di--;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ea      	bne.n	80052c8 <create_name+0xd4>
 80052f2:	e000      	b.n	80052f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80052f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	2200      	movs	r2, #0
 8005300:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <create_name+0x118>
 8005308:	2306      	movs	r3, #6
 800530a:	e121      	b.n	8005550 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3324      	adds	r3, #36	; 0x24
 8005310:	220b      	movs	r2, #11
 8005312:	2120      	movs	r1, #32
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe fecb 	bl	80040b0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800531a:	2300      	movs	r3, #0
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	e002      	b.n	8005326 <create_name+0x132>
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	3301      	adds	r3, #1
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	2b20      	cmp	r3, #32
 8005332:	d0f5      	beq.n	8005320 <create_name+0x12c>
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	2b2e      	cmp	r3, #46	; 0x2e
 8005340:	d0ee      	beq.n	8005320 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d009      	beq.n	800535c <create_name+0x168>
 8005348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800534c:	f043 0303 	orr.w	r3, r3, #3
 8005350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005354:	e002      	b.n	800535c <create_name+0x168>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	3b01      	subs	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <create_name+0x182>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005368:	3b01      	subs	r3, #1
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	2b2e      	cmp	r3, #46	; 0x2e
 8005374:	d1ef      	bne.n	8005356 <create_name+0x162>

	i = b = 0; ni = 8;
 8005376:	2300      	movs	r3, #0
 8005378:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800537c:	2300      	movs	r3, #0
 800537e:	623b      	str	r3, [r7, #32]
 8005380:	2308      	movs	r3, #8
 8005382:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	61ba      	str	r2, [r7, #24]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8090 	beq.w	80054bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800539c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d006      	beq.n	80053b0 <create_name+0x1bc>
 80053a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053a4:	2b2e      	cmp	r3, #46	; 0x2e
 80053a6:	d10a      	bne.n	80053be <create_name+0x1ca>
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d006      	beq.n	80053be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80053b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053b4:	f043 0303 	orr.w	r3, r3, #3
 80053b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053bc:	e07d      	b.n	80054ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80053be:	6a3a      	ldr	r2, [r7, #32]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d203      	bcs.n	80053ce <create_name+0x1da>
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d123      	bne.n	8005416 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	2b0b      	cmp	r3, #11
 80053d2:	d106      	bne.n	80053e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80053d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053d8:	f043 0303 	orr.w	r3, r3, #3
 80053dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053e0:	e06f      	b.n	80054c2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d005      	beq.n	80053f6 <create_name+0x202>
 80053ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053ee:	f043 0303 	orr.w	r3, r3, #3
 80053f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d860      	bhi.n	80054c0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	2308      	movs	r3, #8
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	230b      	movs	r3, #11
 8005408:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800540a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005414:	e051      	b.n	80054ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005418:	2b7f      	cmp	r3, #127	; 0x7f
 800541a:	d914      	bls.n	8005446 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800541c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f000 ff09 	bl	8006238 <ff_convert>
 8005426:	4603      	mov	r3, r0
 8005428:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800542a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <create_name+0x246>
 8005430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005432:	3b80      	subs	r3, #128	; 0x80
 8005434:	4a49      	ldr	r2, [pc, #292]	; (800555c <create_name+0x368>)
 8005436:	5cd3      	ldrb	r3, [r2, r3]
 8005438:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800543a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800543e:	f043 0302 	orr.w	r3, r3, #2
 8005442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <create_name+0x268>
 800544c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800544e:	4619      	mov	r1, r3
 8005450:	4843      	ldr	r0, [pc, #268]	; (8005560 <create_name+0x36c>)
 8005452:	f7fe fe6f 	bl	8004134 <chk_chr>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800545c:	235f      	movs	r3, #95	; 0x5f
 800545e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005464:	f043 0303 	orr.w	r3, r3, #3
 8005468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800546c:	e01b      	b.n	80054a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800546e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	d909      	bls.n	8005488 <create_name+0x294>
 8005474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005476:	2b5a      	cmp	r3, #90	; 0x5a
 8005478:	d806      	bhi.n	8005488 <create_name+0x294>
					b |= 2;
 800547a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800547e:	f043 0302 	orr.w	r3, r3, #2
 8005482:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005486:	e00e      	b.n	80054a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800548a:	2b60      	cmp	r3, #96	; 0x60
 800548c:	d90b      	bls.n	80054a6 <create_name+0x2b2>
 800548e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005490:	2b7a      	cmp	r3, #122	; 0x7a
 8005492:	d808      	bhi.n	80054a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005494:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80054a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054a2:	3b20      	subs	r3, #32
 80054a4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	623a      	str	r2, [r7, #32]
 80054ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054ae:	b2d1      	uxtb	r1, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	460a      	mov	r2, r1
 80054b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80054ba:	e763      	b.n	8005384 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80054c0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054c8:	2be5      	cmp	r3, #229	; 0xe5
 80054ca:	d103      	bne.n	80054d4 <create_name+0x2e0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2205      	movs	r2, #5
 80054d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d104      	bne.n	80054e4 <create_name+0x2f0>
 80054da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80054e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054e8:	f003 030c 	and.w	r3, r3, #12
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	d005      	beq.n	80054fc <create_name+0x308>
 80054f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d105      	bne.n	8005508 <create_name+0x314>
 80054fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005500:	f043 0302 	orr.w	r3, r3, #2
 8005504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d117      	bne.n	8005544 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d105      	bne.n	800552c <create_name+0x338>
 8005520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005524:	f043 0310 	orr.w	r3, r3, #16
 8005528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800552c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b04      	cmp	r3, #4
 8005536:	d105      	bne.n	8005544 <create_name+0x350>
 8005538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800553c:	f043 0308 	orr.w	r3, r3, #8
 8005540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800554a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800554e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005550:	4618      	mov	r0, r3
 8005552:	3728      	adds	r7, #40	; 0x28
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	08009d30 	.word	0x08009d30
 800555c:	08009dd8 	.word	0x08009dd8
 8005560:	08009d3c 	.word	0x08009d3c

08005564 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005578:	e002      	b.n	8005580 <follow_path+0x1c>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	3301      	adds	r3, #1
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b2f      	cmp	r3, #47	; 0x2f
 8005586:	d0f8      	beq.n	800557a <follow_path+0x16>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b5c      	cmp	r3, #92	; 0x5c
 800558e:	d0f4      	beq.n	800557a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2200      	movs	r2, #0
 8005594:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b1f      	cmp	r3, #31
 800559c:	d80a      	bhi.n	80055b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2280      	movs	r2, #128	; 0x80
 80055a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff f989 	bl	80048c0 <dir_sdi>
 80055ae:	4603      	mov	r3, r0
 80055b0:	75fb      	strb	r3, [r7, #23]
 80055b2:	e043      	b.n	800563c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80055b4:	463b      	mov	r3, r7
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff fe1b 	bl	80051f4 <create_name>
 80055be:	4603      	mov	r3, r0
 80055c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d134      	bne.n	8005632 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fc75 	bl	8004eb8 <dir_find>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80055d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d127      	bne.n	8005636 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80055e6:	7afb      	ldrb	r3, [r7, #11]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d122      	bne.n	8005636 <follow_path+0xd2>
 80055f0:	2305      	movs	r3, #5
 80055f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80055f4:	e01f      	b.n	8005636 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80055f6:	7afb      	ldrb	r3, [r7, #11]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d11c      	bne.n	800563a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	799b      	ldrb	r3, [r3, #6]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800560c:	2305      	movs	r3, #5
 800560e:	75fb      	strb	r3, [r7, #23]
 8005610:	e014      	b.n	800563c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005620:	4413      	add	r3, r2
 8005622:	4619      	mov	r1, r3
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7ff fa8b 	bl	8004b40 <ld_clust>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005630:	e7c0      	b.n	80055b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005632:	bf00      	nop
 8005634:	e002      	b.n	800563c <follow_path+0xd8>
				break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800563a:	bf00      	nop
			}
		}
	}

	return res;
 800563c:	7dfb      	ldrb	r3, [r7, #23]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005646:	b480      	push	{r7}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800564e:	f04f 33ff 	mov.w	r3, #4294967295
 8005652:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d031      	beq.n	80056c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e002      	b.n	800566a <get_ldnumber+0x24>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	3301      	adds	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b1f      	cmp	r3, #31
 8005670:	d903      	bls.n	800567a <get_ldnumber+0x34>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b3a      	cmp	r3, #58	; 0x3a
 8005678:	d1f4      	bne.n	8005664 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b3a      	cmp	r3, #58	; 0x3a
 8005680:	d11c      	bne.n	80056bc <get_ldnumber+0x76>
			tp = *path;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	60fa      	str	r2, [r7, #12]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	3b30      	subs	r3, #48	; 0x30
 8005692:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b09      	cmp	r3, #9
 8005698:	d80e      	bhi.n	80056b8 <get_ldnumber+0x72>
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d10a      	bne.n	80056b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d807      	bhi.n	80056b8 <get_ldnumber+0x72>
					vol = (int)i;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3301      	adds	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	e002      	b.n	80056c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80056c0:	693b      	ldr	r3, [r7, #16]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	70da      	strb	r2, [r3, #3]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f04f 32ff 	mov.w	r2, #4294967295
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fe fe70 	bl	80043d0 <move_window>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <check_fs+0x2a>
 80056f6:	2304      	movs	r3, #4
 80056f8:	e038      	b.n	800576c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3334      	adds	r3, #52	; 0x34
 80056fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fc52 	bl	8003fac <ld_word>
 8005708:	4603      	mov	r3, r0
 800570a:	461a      	mov	r2, r3
 800570c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <check_fs+0x48>
 8005714:	2303      	movs	r3, #3
 8005716:	e029      	b.n	800576c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800571e:	2be9      	cmp	r3, #233	; 0xe9
 8005720:	d009      	beq.n	8005736 <check_fs+0x66>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005728:	2beb      	cmp	r3, #235	; 0xeb
 800572a:	d11e      	bne.n	800576a <check_fs+0x9a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005732:	2b90      	cmp	r3, #144	; 0x90
 8005734:	d119      	bne.n	800576a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3334      	adds	r3, #52	; 0x34
 800573a:	3336      	adds	r3, #54	; 0x36
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe fc4d 	bl	8003fdc <ld_dword>
 8005742:	4603      	mov	r3, r0
 8005744:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005748:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <check_fs+0xa4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d101      	bne.n	8005752 <check_fs+0x82>
 800574e:	2300      	movs	r3, #0
 8005750:	e00c      	b.n	800576c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3334      	adds	r3, #52	; 0x34
 8005756:	3352      	adds	r3, #82	; 0x52
 8005758:	4618      	mov	r0, r3
 800575a:	f7fe fc3f 	bl	8003fdc <ld_dword>
 800575e:	4603      	mov	r3, r0
 8005760:	4a05      	ldr	r2, [pc, #20]	; (8005778 <check_fs+0xa8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <check_fs+0x9a>
 8005766:	2300      	movs	r3, #0
 8005768:	e000      	b.n	800576c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800576a:	2302      	movs	r3, #2
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	00544146 	.word	0x00544146
 8005778:	33544146 	.word	0x33544146

0800577c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b096      	sub	sp, #88	; 0x58
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff ff58 	bl	8005646 <get_ldnumber>
 8005796:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579a:	2b00      	cmp	r3, #0
 800579c:	da01      	bge.n	80057a2 <find_volume+0x26>
 800579e:	230b      	movs	r3, #11
 80057a0:	e22e      	b.n	8005c00 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80057a2:	4aa8      	ldr	r2, [pc, #672]	; (8005a44 <find_volume+0x2c8>)
 80057a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <find_volume+0x3a>
 80057b2:	230c      	movs	r3, #12
 80057b4:	e224      	b.n	8005c00 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01a      	beq.n	8005802 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe fb6b 	bl	8003eac <disk_status>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80057dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10c      	bne.n	8005802 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <find_volume+0x82>
 80057ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80057fa:	230a      	movs	r3, #10
 80057fc:	e200      	b.n	8005c00 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80057fe:	2300      	movs	r3, #0
 8005800:	e1fe      	b.n	8005c00 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580a:	b2da      	uxtb	r2, r3
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	4618      	mov	r0, r3
 8005816:	f7fe fb63 	bl	8003ee0 <disk_initialize>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800582c:	2303      	movs	r3, #3
 800582e:	e1e7      	b.n	8005c00 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <find_volume+0xca>
 8005836:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005842:	230a      	movs	r3, #10
 8005844:	e1dc      	b.n	8005c00 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800584a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800584c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800584e:	f7ff ff3f 	bl	80056d0 <check_fs>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005858:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800585c:	2b02      	cmp	r3, #2
 800585e:	d14b      	bne.n	80058f8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005860:	2300      	movs	r3, #0
 8005862:	643b      	str	r3, [r7, #64]	; 0x40
 8005864:	e01f      	b.n	80058a6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800586c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005874:	4413      	add	r3, r2
 8005876:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	3304      	adds	r3, #4
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d006      	beq.n	8005890 <find_volume+0x114>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	3308      	adds	r3, #8
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe fba8 	bl	8003fdc <ld_dword>
 800588c:	4602      	mov	r2, r0
 800588e:	e000      	b.n	8005892 <find_volume+0x116>
 8005890:	2200      	movs	r2, #0
 8005892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800589a:	440b      	add	r3, r1
 800589c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80058a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058a2:	3301      	adds	r3, #1
 80058a4:	643b      	str	r3, [r7, #64]	; 0x40
 80058a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d9dc      	bls.n	8005866 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80058ac:	2300      	movs	r3, #0
 80058ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80058b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <find_volume+0x140>
 80058b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b8:	3b01      	subs	r3, #1
 80058ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80058bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80058c4:	4413      	add	r3, r2
 80058c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80058ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80058cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <find_volume+0x162>
 80058d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058d6:	f7ff fefb 	bl	80056d0 <check_fs>
 80058da:	4603      	mov	r3, r0
 80058dc:	e000      	b.n	80058e0 <find_volume+0x164>
 80058de:	2303      	movs	r3, #3
 80058e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80058e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d905      	bls.n	80058f8 <find_volume+0x17c>
 80058ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ee:	3301      	adds	r3, #1
 80058f0:	643b      	str	r3, [r7, #64]	; 0x40
 80058f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d9e1      	bls.n	80058bc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80058f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d101      	bne.n	8005904 <find_volume+0x188>
 8005900:	2301      	movs	r3, #1
 8005902:	e17d      	b.n	8005c00 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005904:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005908:	2b01      	cmp	r3, #1
 800590a:	d901      	bls.n	8005910 <find_volume+0x194>
 800590c:	230d      	movs	r3, #13
 800590e:	e177      	b.n	8005c00 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	3334      	adds	r3, #52	; 0x34
 8005914:	330b      	adds	r3, #11
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fb48 	bl	8003fac <ld_word>
 800591c:	4603      	mov	r3, r0
 800591e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005922:	d001      	beq.n	8005928 <find_volume+0x1ac>
 8005924:	230d      	movs	r3, #13
 8005926:	e16b      	b.n	8005c00 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	3334      	adds	r3, #52	; 0x34
 800592c:	3316      	adds	r3, #22
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fb3c 	bl	8003fac <ld_word>
 8005934:	4603      	mov	r3, r0
 8005936:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <find_volume+0x1d0>
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	3334      	adds	r3, #52	; 0x34
 8005942:	3324      	adds	r3, #36	; 0x24
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fb49 	bl	8003fdc <ld_dword>
 800594a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005950:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	789b      	ldrb	r3, [r3, #2]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d005      	beq.n	8005970 <find_volume+0x1f4>
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	789b      	ldrb	r3, [r3, #2]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d001      	beq.n	8005970 <find_volume+0x1f4>
 800596c:	230d      	movs	r3, #13
 800596e:	e147      	b.n	8005c00 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	789b      	ldrb	r3, [r3, #2]
 8005974:	461a      	mov	r2, r3
 8005976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005978:	fb02 f303 	mul.w	r3, r2, r3
 800597c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005984:	b29a      	uxth	r2, r3
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	895b      	ldrh	r3, [r3, #10]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <find_volume+0x228>
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	895b      	ldrh	r3, [r3, #10]
 8005996:	461a      	mov	r2, r3
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	895b      	ldrh	r3, [r3, #10]
 800599c:	3b01      	subs	r3, #1
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <find_volume+0x22c>
 80059a4:	230d      	movs	r3, #13
 80059a6:	e12b      	b.n	8005c00 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	3334      	adds	r3, #52	; 0x34
 80059ac:	3311      	adds	r3, #17
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe fafc 	bl	8003fac <ld_word>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	891b      	ldrh	r3, [r3, #8]
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <find_volume+0x252>
 80059ca:	230d      	movs	r3, #13
 80059cc:	e118      	b.n	8005c00 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	3334      	adds	r3, #52	; 0x34
 80059d2:	3313      	adds	r3, #19
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fae9 	bl	8003fac <ld_word>
 80059da:	4603      	mov	r3, r0
 80059dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80059de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <find_volume+0x276>
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	3334      	adds	r3, #52	; 0x34
 80059e8:	3320      	adds	r3, #32
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe faf6 	bl	8003fdc <ld_dword>
 80059f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	3334      	adds	r3, #52	; 0x34
 80059f6:	330e      	adds	r3, #14
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe fad7 	bl	8003fac <ld_word>
 80059fe:	4603      	mov	r3, r0
 8005a00:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005a02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <find_volume+0x290>
 8005a08:	230d      	movs	r3, #13
 8005a0a:	e0f9      	b.n	8005c00 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005a0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a10:	4413      	add	r3, r2
 8005a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a14:	8912      	ldrh	r2, [r2, #8]
 8005a16:	0912      	lsrs	r2, r2, #4
 8005a18:	b292      	uxth	r2, r2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d201      	bcs.n	8005a2a <find_volume+0x2ae>
 8005a26:	230d      	movs	r3, #13
 8005a28:	e0ea      	b.n	8005c00 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a32:	8952      	ldrh	r2, [r2, #10]
 8005a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d103      	bne.n	8005a48 <find_volume+0x2cc>
 8005a40:	230d      	movs	r3, #13
 8005a42:	e0dd      	b.n	8005c00 <find_volume+0x484>
 8005a44:	20000200 	.word	0x20000200
		fmt = FS_FAT32;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d802      	bhi.n	8005a5e <find_volume+0x2e2>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d802      	bhi.n	8005a6e <find_volume+0x2f2>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a7a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005a7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a80:	441a      	add	r2, r3
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8a:	441a      	add	r2, r3
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d11e      	bne.n	8005ad6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	3334      	adds	r3, #52	; 0x34
 8005a9c:	332a      	adds	r3, #42	; 0x2a
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fa84 	bl	8003fac <ld_word>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <find_volume+0x332>
 8005aaa:	230d      	movs	r3, #13
 8005aac:	e0a8      	b.n	8005c00 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	891b      	ldrh	r3, [r3, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <find_volume+0x33e>
 8005ab6:	230d      	movs	r3, #13
 8005ab8:	e0a2      	b.n	8005c00 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	3334      	adds	r3, #52	; 0x34
 8005abe:	332c      	adds	r3, #44	; 0x2c
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe fa8b 	bl	8003fdc <ld_dword>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad4:	e01f      	b.n	8005b16 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	891b      	ldrh	r3, [r3, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <find_volume+0x366>
 8005ade:	230d      	movs	r3, #13
 8005ae0:	e08e      	b.n	8005c00 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae8:	441a      	add	r2, r3
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005aee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d103      	bne.n	8005afe <find_volume+0x382>
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	e00a      	b.n	8005b14 <find_volume+0x398>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	4613      	mov	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	085a      	lsrs	r2, r3, #1
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005b14:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	69da      	ldr	r2, [r3, #28]
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005b20:	0a5b      	lsrs	r3, r3, #9
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d201      	bcs.n	8005b2a <find_volume+0x3ae>
 8005b26:	230d      	movs	r3, #13
 8005b28:	e06a      	b.n	8005c00 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b30:	615a      	str	r2, [r3, #20]
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	2280      	movs	r2, #128	; 0x80
 8005b3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005b40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d149      	bne.n	8005bdc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	3334      	adds	r3, #52	; 0x34
 8005b4c:	3330      	adds	r3, #48	; 0x30
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fa2c 	bl	8003fac <ld_word>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d140      	bne.n	8005bdc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b62:	f7fe fc35 	bl	80043d0 <move_window>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d137      	bne.n	8005bdc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	2200      	movs	r2, #0
 8005b70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	3334      	adds	r3, #52	; 0x34
 8005b76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fa16 	bl	8003fac <ld_word>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d127      	bne.n	8005bdc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	3334      	adds	r3, #52	; 0x34
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fa23 	bl	8003fdc <ld_dword>
 8005b96:	4603      	mov	r3, r0
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <find_volume+0x48c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d11e      	bne.n	8005bdc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	3334      	adds	r3, #52	; 0x34
 8005ba2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fa18 	bl	8003fdc <ld_dword>
 8005bac:	4603      	mov	r3, r0
 8005bae:	4a17      	ldr	r2, [pc, #92]	; (8005c0c <find_volume+0x490>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d113      	bne.n	8005bdc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	3334      	adds	r3, #52	; 0x34
 8005bb8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe fa0d 	bl	8003fdc <ld_dword>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	3334      	adds	r3, #52	; 0x34
 8005bcc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fa03 	bl	8003fdc <ld_dword>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005be2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005be4:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <find_volume+0x494>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <find_volume+0x494>)
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <find_volume+0x494>)
 8005bf2:	881a      	ldrh	r2, [r3, #0]
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005bf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bfa:	f7fe fb81 	bl	8004300 <clear_lock>
#endif
	return FR_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3758      	adds	r7, #88	; 0x58
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	41615252 	.word	0x41615252
 8005c0c:	61417272 	.word	0x61417272
 8005c10:	20000208 	.word	0x20000208

08005c14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005c1e:	2309      	movs	r3, #9
 8005c20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01c      	beq.n	8005c62 <validate+0x4e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d018      	beq.n	8005c62 <validate+0x4e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d013      	beq.n	8005c62 <validate+0x4e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	889a      	ldrh	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	88db      	ldrh	r3, [r3, #6]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d10c      	bne.n	8005c62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe f92c 	bl	8003eac <disk_status>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <validate+0x4e>
			res = FR_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <validate+0x5a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	e000      	b.n	8005c70 <validate+0x5c>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	6013      	str	r3, [r2, #0]
	return res;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005c92:	f107 0310 	add.w	r3, r7, #16
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fcd5 	bl	8005646 <get_ldnumber>
 8005c9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	da01      	bge.n	8005ca8 <f_mount+0x28>
 8005ca4:	230b      	movs	r3, #11
 8005ca6:	e02b      	b.n	8005d00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005ca8:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <f_mount+0x88>)
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005cb8:	69b8      	ldr	r0, [r7, #24]
 8005cba:	f7fe fb21 	bl	8004300 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	490d      	ldr	r1, [pc, #52]	; (8005d08 <f_mount+0x88>)
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <f_mount+0x66>
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d001      	beq.n	8005cea <f_mount+0x6a>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e00a      	b.n	8005d00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005cea:	f107 010c 	add.w	r1, r7, #12
 8005cee:	f107 0308 	add.w	r3, r7, #8
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fd41 	bl	800577c <find_volume>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20000200 	.word	0x20000200

08005d0c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <f_opendir+0x14>
 8005d1c:	2309      	movs	r3, #9
 8005d1e:	e074      	b.n	8005e0a <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8005d24:	f107 0108 	add.w	r1, r7, #8
 8005d28:	463b      	mov	r3, r7
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fd25 	bl	800577c <find_volume>
 8005d32:	4603      	mov	r3, r0
 8005d34:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d15f      	bne.n	8005dfc <f_opendir+0xf0>
		obj->fs = fs;
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8005d42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d46:	f000 fa5f 	bl	8006208 <ff_memalloc>
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <f_opendir+0x4a>
 8005d52:	2311      	movs	r3, #17
 8005d54:	e059      	b.n	8005e0a <f_opendir+0xfe>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff fbff 	bl	8005564 <follow_path>
 8005d66:	4603      	mov	r3, r0
 8005d68:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d13d      	bne.n	8005dec <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d76:	b25b      	sxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	db12      	blt.n	8005da2 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	799b      	ldrb	r3, [r3, #6]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f7fe fed5 	bl	8004b40 <ld_clust>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	609a      	str	r2, [r3, #8]
 8005d9c:	e001      	b.n	8005da2 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8005d9e:	2305      	movs	r3, #5
 8005da0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d121      	bne.n	8005dec <f_opendir+0xe0>
				obj->id = fs->id;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	88da      	ldrh	r2, [r3, #6]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005db0:	2100      	movs	r1, #0
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fe fd84 	bl	80048c0 <dir_sdi>
 8005db8:	4603      	mov	r3, r0
 8005dba:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d114      	bne.n	8005dec <f_opendir+0xe0>
					if (obj->sclust) {
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00d      	beq.n	8005de6 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8005dca:	2100      	movs	r1, #0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fe f9cd 	bl	800416c <inc_lock>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <f_opendir+0xe0>
 8005de0:	2312      	movs	r3, #18
 8005de2:	75fb      	strb	r3, [r7, #23]
 8005de4:	e002      	b.n	8005dec <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2200      	movs	r2, #0
 8005dea:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fa17 	bl	8006220 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d101      	bne.n	8005dfc <f_opendir+0xf0>
 8005df8:	2305      	movs	r3, #5
 8005dfa:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <f_opendir+0xfc>
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f107 0208 	add.w	r2, r7, #8
 8005e20:	4611      	mov	r1, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fef6 	bl	8005c14 <validate>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d110      	bne.n	8005e54 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d006      	beq.n	8005e48 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe fa22 	bl	8004288 <dec_lock>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f107 020c 	add.w	r2, r7, #12
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fecf 	bl	8005c14 <validate>
 8005e76:	4603      	mov	r3, r0
 8005e78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d136      	bne.n	8005eee <f_readdir+0x90>
		if (!fno) {
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005e86:	2100      	movs	r1, #0
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7fe fd19 	bl	80048c0 <dir_sdi>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	75fb      	strb	r3, [r7, #23]
 8005e92:	e02c      	b.n	8005eee <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 8005e94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005e98:	f000 f9b6 	bl	8006208 <ff_memalloc>
 8005e9c:	6138      	str	r0, [r7, #16]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <f_readdir+0x4a>
 8005ea4:	2311      	movs	r3, #17
 8005ea6:	e023      	b.n	8005ef0 <f_readdir+0x92>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8005eae:	2100      	movs	r1, #0
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fe ff5a 	bl	8004d6a <dir_read>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d101      	bne.n	8005ec4 <f_readdir+0x66>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10e      	bne.n	8005ee8 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff f8b3 	bl	8005038 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7fe fd6e 	bl	80049b6 <dir_next>
 8005eda:	4603      	mov	r3, r0
 8005edc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d101      	bne.n	8005ee8 <f_readdir+0x8a>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8005ee8:	6938      	ldr	r0, [r7, #16]
 8005eea:	f000 f999 	bl	8006220 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005f06:	2301      	movs	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005f0e:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <FATFS_LinkDriverEx+0x94>)
 8005f10:	7b9b      	ldrb	r3, [r3, #14]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d831      	bhi.n	8005f7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005f18:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <FATFS_LinkDriverEx+0x94>)
 8005f1a:	7b9b      	ldrb	r3, [r3, #14]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <FATFS_LinkDriverEx+0x94>)
 8005f22:	2100      	movs	r1, #0
 8005f24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005f26:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <FATFS_LinkDriverEx+0x94>)
 8005f28:	7b9b      	ldrb	r3, [r3, #14]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	4a17      	ldr	r2, [pc, #92]	; (8005f8c <FATFS_LinkDriverEx+0x94>)
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005f36:	4b15      	ldr	r3, [pc, #84]	; (8005f8c <FATFS_LinkDriverEx+0x94>)
 8005f38:	7b9b      	ldrb	r3, [r3, #14]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <FATFS_LinkDriverEx+0x94>)
 8005f40:	4413      	add	r3, r2
 8005f42:	79fa      	ldrb	r2, [r7, #7]
 8005f44:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <FATFS_LinkDriverEx+0x94>)
 8005f48:	7b9b      	ldrb	r3, [r3, #14]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	b2d1      	uxtb	r1, r2
 8005f50:	4a0e      	ldr	r2, [pc, #56]	; (8005f8c <FATFS_LinkDriverEx+0x94>)
 8005f52:	7391      	strb	r1, [r2, #14]
 8005f54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005f56:	7dbb      	ldrb	r3, [r7, #22]
 8005f58:	3330      	adds	r3, #48	; 0x30
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3301      	adds	r3, #1
 8005f64:	223a      	movs	r2, #58	; 0x3a
 8005f66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	222f      	movs	r2, #47	; 0x2f
 8005f6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	3303      	adds	r3, #3
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	2000022c 	.word	0x2000022c

08005f90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ffaa 	bl	8005ef8 <FATFS_LinkDriverEx>
 8005fa4:	4603      	mov	r3, r0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8005fc4:	4b15      	ldr	r3, [pc, #84]	; (800601c <FATFS_UnLinkDriverEx+0x6c>)
 8005fc6:	7b9b      	ldrb	r3, [r3, #14]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01e      	beq.n	800600c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	3b30      	subs	r3, #48	; 0x30
 8005fd4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	4a10      	ldr	r2, [pc, #64]	; (800601c <FATFS_UnLinkDriverEx+0x6c>)
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d013      	beq.n	800600c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	4a0d      	ldr	r2, [pc, #52]	; (800601c <FATFS_UnLinkDriverEx+0x6c>)
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	2200      	movs	r2, #0
 8005fee:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	; (800601c <FATFS_UnLinkDriverEx+0x6c>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	731a      	strb	r2, [r3, #12]
      disk.nbr--;
 8005ffa:	4b08      	ldr	r3, [pc, #32]	; (800601c <FATFS_UnLinkDriverEx+0x6c>)
 8005ffc:	7b9b      	ldrb	r3, [r3, #14]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b2da      	uxtb	r2, r3
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <FATFS_UnLinkDriverEx+0x6c>)
 8006006:	739a      	strb	r2, [r3, #14]
      ret = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	2000022c 	.word	0x2000022c

08006020 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8006028:	2100      	movs	r1, #0
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ffc0 	bl	8005fb0 <FATFS_UnLinkDriverEx>
 8006030:	4603      	mov	r3, r0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006046:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <SD_CheckStatus+0x38>)
 8006048:	2201      	movs	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800604c:	f7fb f8d4 	bl	80011f8 <BSP_SD_GetCardState>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d107      	bne.n	8006066 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006056:	4b07      	ldr	r3, [pc, #28]	; (8006074 <SD_CheckStatus+0x38>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b04      	ldr	r3, [pc, #16]	; (8006074 <SD_CheckStatus+0x38>)
 8006064:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006066:	4b03      	ldr	r3, [pc, #12]	; (8006074 <SD_CheckStatus+0x38>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	b2db      	uxtb	r3, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000009 	.word	0x20000009

08006078 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <SD_initialize+0x38>)
 8006084:	2201      	movs	r2, #1
 8006086:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006088:	f7fa ff12 	bl	8000eb0 <BSP_SD_Init>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d107      	bne.n	80060a2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff ffd1 	bl	800603c <SD_CheckStatus>
 800609a:	4603      	mov	r3, r0
 800609c:	461a      	mov	r2, r3
 800609e:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <SD_initialize+0x38>)
 80060a0:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80060a2:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <SD_initialize+0x38>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	b2db      	uxtb	r3, r3
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000009 	.word	0x20000009

080060b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ffbb 	bl	800603c <SD_CheckStatus>
 80060c6:	4603      	mov	r3, r0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <SD_read+0x40>)
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	68b8      	ldr	r0, [r7, #8]
 80060ec:	f7fa ff5e 	bl	8000fac <BSP_SD_ReadBlocks>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d107      	bne.n	8006106 <SD_read+0x36>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80060f6:	bf00      	nop
 80060f8:	f7fb f87e 	bl	80011f8 <BSP_SD_GetCardState>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1fa      	bne.n	80060f8 <SD_read+0x28>
    {
    }
    res = RES_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006106:	7dfb      	ldrb	r3, [r7, #23]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	05f5e100 	.word	0x05f5e100

08006114 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <SD_write+0x40>)
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	68b8      	ldr	r0, [r7, #8]
 8006130:	f7fa ffce 	bl	80010d0 <BSP_SD_WriteBlocks>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <SD_write+0x36>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800613a:	bf00      	nop
 800613c:	f7fb f85c 	bl	80011f8 <BSP_SD_GetCardState>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1fa      	bne.n	800613c <SD_write+0x28>
    {
    }
    res = RES_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	05f5e100 	.word	0x05f5e100

08006158 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b094      	sub	sp, #80	; 0x50
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	603a      	str	r2, [r7, #0]
 8006162:	71fb      	strb	r3, [r7, #7]
 8006164:	460b      	mov	r3, r1
 8006166:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800616e:	4b25      	ldr	r3, [pc, #148]	; (8006204 <SD_ioctl+0xac>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <SD_ioctl+0x28>
 800617c:	2303      	movs	r3, #3
 800617e:	e03c      	b.n	80061fa <SD_ioctl+0xa2>

  switch (cmd)
 8006180:	79bb      	ldrb	r3, [r7, #6]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d834      	bhi.n	80061f0 <SD_ioctl+0x98>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <SD_ioctl+0x34>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	0800619d 	.word	0x0800619d
 8006190:	080061a5 	.word	0x080061a5
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061d7 	.word	0x080061d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 80061a2:	e028      	b.n	80061f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80061a4:	f107 030c 	add.w	r3, r7, #12
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fa fe8f 	bl	8000ecc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80061ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 80061ba:	e01c      	b.n	80061f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061bc:	f107 030c 	add.w	r3, r7, #12
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fa fe83 	bl	8000ecc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80061c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 80061d4:	e00f      	b.n	80061f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061d6:	f107 030c 	add.w	r3, r7, #12
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fa fe76 	bl	8000ecc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80061e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e2:	0a5a      	lsrs	r2, r3, #9
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 80061ee:	e002      	b.n	80061f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80061f0:	2304      	movs	r3, #4
 80061f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return res;
 80061f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3750      	adds	r7, #80	; 0x50
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000009 	.word	0x20000009

08006208 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fe85 	bl	8006f20 <malloc>
 8006216:	4603      	mov	r3, r0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fe81 	bl	8006f30 <free>
}
 800622e:	bf00      	nop
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	6039      	str	r1, [r7, #0]
 8006242:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	2b7f      	cmp	r3, #127	; 0x7f
 8006248:	d802      	bhi.n	8006250 <ff_convert+0x18>
		c = chr;
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	81fb      	strh	r3, [r7, #14]
 800624e:	e025      	b.n	800629c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	2bff      	cmp	r3, #255	; 0xff
 800625a:	d805      	bhi.n	8006268 <ff_convert+0x30>
 800625c:	88fb      	ldrh	r3, [r7, #6]
 800625e:	3b80      	subs	r3, #128	; 0x80
 8006260:	4a12      	ldr	r2, [pc, #72]	; (80062ac <ff_convert+0x74>)
 8006262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006266:	e000      	b.n	800626a <ff_convert+0x32>
 8006268:	2300      	movs	r3, #0
 800626a:	81fb      	strh	r3, [r7, #14]
 800626c:	e016      	b.n	800629c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800626e:	2300      	movs	r3, #0
 8006270:	81fb      	strh	r3, [r7, #14]
 8006272:	e009      	b.n	8006288 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006274:	89fb      	ldrh	r3, [r7, #14]
 8006276:	4a0d      	ldr	r2, [pc, #52]	; (80062ac <ff_convert+0x74>)
 8006278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800627c:	88fa      	ldrh	r2, [r7, #6]
 800627e:	429a      	cmp	r2, r3
 8006280:	d006      	beq.n	8006290 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006282:	89fb      	ldrh	r3, [r7, #14]
 8006284:	3301      	adds	r3, #1
 8006286:	81fb      	strh	r3, [r7, #14]
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	2b7f      	cmp	r3, #127	; 0x7f
 800628c:	d9f2      	bls.n	8006274 <ff_convert+0x3c>
 800628e:	e000      	b.n	8006292 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006290:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006292:	89fb      	ldrh	r3, [r7, #14]
 8006294:	3380      	adds	r3, #128	; 0x80
 8006296:	b29b      	uxth	r3, r3
 8006298:	b2db      	uxtb	r3, r3
 800629a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800629c:	89fb      	ldrh	r3, [r7, #14]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	08009e7c 	.word	0x08009e7c

080062b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c0:	d201      	bcs.n	80062c6 <ff_wtoupper+0x16>
 80062c2:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <ff_wtoupper+0x10c>)
 80062c4:	e000      	b.n	80062c8 <ff_wtoupper+0x18>
 80062c6:	4b3e      	ldr	r3, [pc, #248]	; (80063c0 <ff_wtoupper+0x110>)
 80062c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	1c9a      	adds	r2, r3, #2
 80062ce:	617a      	str	r2, [r7, #20]
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80062d4:	8a7b      	ldrh	r3, [r7, #18]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d068      	beq.n	80063ac <ff_wtoupper+0xfc>
 80062da:	88fa      	ldrh	r2, [r7, #6]
 80062dc:	8a7b      	ldrh	r3, [r7, #18]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d364      	bcc.n	80063ac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	617a      	str	r2, [r7, #20]
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	823b      	strh	r3, [r7, #16]
 80062ec:	8a3b      	ldrh	r3, [r7, #16]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	81fb      	strh	r3, [r7, #14]
 80062f2:	8a3b      	ldrh	r3, [r7, #16]
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80062f8:	88fa      	ldrh	r2, [r7, #6]
 80062fa:	8a79      	ldrh	r1, [r7, #18]
 80062fc:	8a3b      	ldrh	r3, [r7, #16]
 80062fe:	440b      	add	r3, r1
 8006300:	429a      	cmp	r2, r3
 8006302:	da49      	bge.n	8006398 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006304:	89fb      	ldrh	r3, [r7, #14]
 8006306:	2b08      	cmp	r3, #8
 8006308:	d84f      	bhi.n	80063aa <ff_wtoupper+0xfa>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <ff_wtoupper+0x60>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006335 	.word	0x08006335
 8006314:	08006347 	.word	0x08006347
 8006318:	0800635d 	.word	0x0800635d
 800631c:	08006365 	.word	0x08006365
 8006320:	0800636d 	.word	0x0800636d
 8006324:	08006375 	.word	0x08006375
 8006328:	0800637d 	.word	0x0800637d
 800632c:	08006385 	.word	0x08006385
 8006330:	0800638d 	.word	0x0800638d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	8a7b      	ldrh	r3, [r7, #18]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	80fb      	strh	r3, [r7, #6]
 8006344:	e027      	b.n	8006396 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006346:	88fa      	ldrh	r2, [r7, #6]
 8006348:	8a7b      	ldrh	r3, [r7, #18]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	b29b      	uxth	r3, r3
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	b29b      	uxth	r3, r3
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	80fb      	strh	r3, [r7, #6]
 800635a:	e01c      	b.n	8006396 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	3b10      	subs	r3, #16
 8006360:	80fb      	strh	r3, [r7, #6]
 8006362:	e018      	b.n	8006396 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006364:	88fb      	ldrh	r3, [r7, #6]
 8006366:	3b20      	subs	r3, #32
 8006368:	80fb      	strh	r3, [r7, #6]
 800636a:	e014      	b.n	8006396 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800636c:	88fb      	ldrh	r3, [r7, #6]
 800636e:	3b30      	subs	r3, #48	; 0x30
 8006370:	80fb      	strh	r3, [r7, #6]
 8006372:	e010      	b.n	8006396 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	3b1a      	subs	r3, #26
 8006378:	80fb      	strh	r3, [r7, #6]
 800637a:	e00c      	b.n	8006396 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	3308      	adds	r3, #8
 8006380:	80fb      	strh	r3, [r7, #6]
 8006382:	e008      	b.n	8006396 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	3b50      	subs	r3, #80	; 0x50
 8006388:	80fb      	strh	r3, [r7, #6]
 800638a:	e004      	b.n	8006396 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006392:	80fb      	strh	r3, [r7, #6]
 8006394:	bf00      	nop
			}
			break;
 8006396:	e008      	b.n	80063aa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006398:	89fb      	ldrh	r3, [r7, #14]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d195      	bne.n	80062ca <ff_wtoupper+0x1a>
 800639e:	8a3b      	ldrh	r3, [r7, #16]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80063a8:	e78f      	b.n	80062ca <ff_wtoupper+0x1a>
			break;
 80063aa:	bf00      	nop
	}

	return chr;
 80063ac:	88fb      	ldrh	r3, [r7, #6]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	08009f7c 	.word	0x08009f7c
 80063c0:	0800a170 	.word	0x0800a170

080063c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80063c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063c6:	b0b1      	sub	sp, #196	; 0xc4
 80063c8:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063ca:	f7fb fd51 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80063ce:	f000 f9a7 	bl	8006720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80063d2:	f000 fa6f 	bl	80068b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80063d6:	f000 fa43 	bl	8006860 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80063da:	f000 fa0b 	bl	80067f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	snprintf(buffer, sizeof(buffer), "Start\n");
 80063de:	1d3b      	adds	r3, r7, #4
 80063e0:	4ac6      	ldr	r2, [pc, #792]	; (80066fc <main+0x338>)
 80063e2:	2180      	movs	r1, #128	; 0x80
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fad7 	bl	8007998 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7f9 fef7 	bl	80001e0 <strlen>
 80063f2:	4603      	mov	r3, r0
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	1d39      	adds	r1, r7, #4
 80063f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063fc:	48c0      	ldr	r0, [pc, #768]	; (8006700 <main+0x33c>)
 80063fe:	f7fd f8d6 	bl	80035ae <HAL_UART_Transmit>

	//SD_IO_Init();

	BSP_LED_Off(LED2);
 8006402:	2000      	movs	r0, #0
 8006404:	f7fb fbe2 	bl	8001bcc <BSP_LED_Off>

	/*##-1- Link the SD disk I/O driver ########################################*/
	if(FATFS_LinkDriver(&SD_Driver, SD_Path) == 0)
 8006408:	49be      	ldr	r1, [pc, #760]	; (8006704 <main+0x340>)
 800640a:	48bf      	ldr	r0, [pc, #764]	; (8006708 <main+0x344>)
 800640c:	f7ff fdc0 	bl	8005f90 <FATFS_LinkDriver>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	f040 816e 	bne.w	80066f4 <main+0x330>
	{
		/*##-2- Register the file system object to the FatFs module ##############*/
		if(f_mount(&SD_FatFs, (TCHAR const*)SD_Path, 0) != FR_OK)
 8006418:	2200      	movs	r2, #0
 800641a:	49ba      	ldr	r1, [pc, #744]	; (8006704 <main+0x340>)
 800641c:	48bb      	ldr	r0, [pc, #748]	; (800670c <main+0x348>)
 800641e:	f7ff fc2f 	bl	8005c80 <f_mount>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <main+0x6a>
		{
			/* FatFs Initialization Error */
			Error_Handler();
 8006428:	f000 fbb8 	bl	8006b9c <Error_Handler>
 800642c:	e162      	b.n	80066f4 <main+0x330>
		}
		else
		{
			/*##-3- Create a FAT file system (format) on the logical drive #########*/
			char path[2]="/";
 800642e:	232f      	movs	r3, #47	; 0x2f
 8006430:	803b      	strh	r3, [r7, #0]
			FRESULT res = scan_files(path, items, &items_sz);
 8006432:	463b      	mov	r3, r7
 8006434:	4ab6      	ldr	r2, [pc, #728]	; (8006710 <main+0x34c>)
 8006436:	49b7      	ldr	r1, [pc, #732]	; (8006714 <main+0x350>)
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fa9f 	bl	800697c <scan_files>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			snprintf(buffer, sizeof(buffer), "==============================================\n");
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	4ab4      	ldr	r2, [pc, #720]	; (8006718 <main+0x354>)
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	4618      	mov	r0, r3
 800644c:	f001 faa4 	bl	8007998 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 8006450:	1d3b      	adds	r3, r7, #4
 8006452:	4618      	mov	r0, r3
 8006454:	f7f9 fec4 	bl	80001e0 <strlen>
 8006458:	4603      	mov	r3, r0
 800645a:	b29a      	uxth	r2, r3
 800645c:	1d39      	adds	r1, r7, #4
 800645e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006462:	48a7      	ldr	r0, [pc, #668]	; (8006700 <main+0x33c>)
 8006464:	f7fd f8a3 	bl	80035ae <HAL_UART_Transmit>

			for (UINT it=0; it<items_sz; it++){
 8006468:	2300      	movs	r3, #0
 800646a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800646e:	e04f      	b.n	8006510 <main+0x14c>
				snprintf(buffer, sizeof(buffer), "dir %x\n", items[it].dir);
 8006470:	49a8      	ldr	r1, [pc, #672]	; (8006714 <main+0x350>)
 8006472:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006476:	4613      	mov	r3, r2
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	1a9b      	subs	r3, r3, r2
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	440b      	add	r3, r1
 8006480:	3320      	adds	r3, #32
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	1d38      	adds	r0, r7, #4
 8006486:	4aa5      	ldr	r2, [pc, #660]	; (800671c <main+0x358>)
 8006488:	2180      	movs	r1, #128	; 0x80
 800648a:	f001 fa85 	bl	8007998 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 800648e:	1d3b      	adds	r3, r7, #4
 8006490:	4618      	mov	r0, r3
 8006492:	f7f9 fea5 	bl	80001e0 <strlen>
 8006496:	4603      	mov	r3, r0
 8006498:	b29a      	uxth	r2, r3
 800649a:	1d39      	adds	r1, r7, #4
 800649c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064a0:	4897      	ldr	r0, [pc, #604]	; (8006700 <main+0x33c>)
 80064a2:	f7fd f884 	bl	80035ae <HAL_UART_Transmit>
				FRESULT res = read_filename(path, items[it], buffer);
 80064a6:	499b      	ldr	r1, [pc, #620]	; (8006714 <main+0x350>)
 80064a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80064ac:	4613      	mov	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	18ce      	adds	r6, r1, r3
 80064b6:	46bc      	mov	ip, r7
 80064b8:	1d3b      	adds	r3, r7, #4
 80064ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80064bc:	466d      	mov	r5, sp
 80064be:	f106 040c 	add.w	r4, r6, #12
 80064c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064ca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80064ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80064d2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80064d6:	4660      	mov	r0, ip
 80064d8:	f000 fb00 	bl	8006adc <read_filename>
 80064dc:	4603      	mov	r3, r0
 80064de:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
				if (res != FR_OK) continue;
 80064e2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10c      	bne.n	8006504 <main+0x140>
				HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7f9 fe77 	bl	80001e0 <strlen>
 80064f2:	4603      	mov	r3, r0
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	1d39      	adds	r1, r7, #4
 80064f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064fc:	4880      	ldr	r0, [pc, #512]	; (8006700 <main+0x33c>)
 80064fe:	f7fd f856 	bl	80035ae <HAL_UART_Transmit>
 8006502:	e000      	b.n	8006506 <main+0x142>
				if (res != FR_OK) continue;
 8006504:	bf00      	nop
			for (UINT it=0; it<items_sz; it++){
 8006506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800650a:	3301      	adds	r3, #1
 800650c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006510:	4b7f      	ldr	r3, [pc, #508]	; (8006710 <main+0x34c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006518:	429a      	cmp	r2, r3
 800651a:	d3a9      	bcc.n	8006470 <main+0xac>
			}

			snprintf(buffer, sizeof(buffer), "==============================================\n");
 800651c:	1d3b      	adds	r3, r7, #4
 800651e:	4a7e      	ldr	r2, [pc, #504]	; (8006718 <main+0x354>)
 8006520:	2180      	movs	r1, #128	; 0x80
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fa38 	bl	8007998 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 8006528:	1d3b      	adds	r3, r7, #4
 800652a:	4618      	mov	r0, r3
 800652c:	f7f9 fe58 	bl	80001e0 <strlen>
 8006530:	4603      	mov	r3, r0
 8006532:	b29a      	uxth	r2, r3
 8006534:	1d39      	adds	r1, r7, #4
 8006536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800653a:	4871      	ldr	r0, [pc, #452]	; (8006700 <main+0x33c>)
 800653c:	f7fd f837 	bl	80035ae <HAL_UART_Transmit>

			for (UINT it=0; it<items_sz; it++){
 8006540:	2300      	movs	r3, #0
 8006542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006546:	e034      	b.n	80065b2 <main+0x1ee>
				FRESULT res = read_filename(path, items[it], buffer);
 8006548:	4972      	ldr	r1, [pc, #456]	; (8006714 <main+0x350>)
 800654a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800654e:	4613      	mov	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	18ce      	adds	r6, r1, r3
 8006558:	46bc      	mov	ip, r7
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	930b      	str	r3, [sp, #44]	; 0x2c
 800655e:	466d      	mov	r5, sp
 8006560:	f106 040c 	add.w	r4, r6, #12
 8006564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800656a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800656c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006570:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006574:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8006578:	4660      	mov	r0, ip
 800657a:	f000 faaf 	bl	8006adc <read_filename>
 800657e:	4603      	mov	r3, r0
 8006580:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				if (res != FR_OK) continue;
 8006584:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10c      	bne.n	80065a6 <main+0x1e2>
				HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 800658c:	1d3b      	adds	r3, r7, #4
 800658e:	4618      	mov	r0, r3
 8006590:	f7f9 fe26 	bl	80001e0 <strlen>
 8006594:	4603      	mov	r3, r0
 8006596:	b29a      	uxth	r2, r3
 8006598:	1d39      	adds	r1, r7, #4
 800659a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800659e:	4858      	ldr	r0, [pc, #352]	; (8006700 <main+0x33c>)
 80065a0:	f7fd f805 	bl	80035ae <HAL_UART_Transmit>
 80065a4:	e000      	b.n	80065a8 <main+0x1e4>
				if (res != FR_OK) continue;
 80065a6:	bf00      	nop
			for (UINT it=0; it<items_sz; it++){
 80065a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065ac:	3301      	adds	r3, #1
 80065ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065b2:	4b57      	ldr	r3, [pc, #348]	; (8006710 <main+0x34c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d3c4      	bcc.n	8006548 <main+0x184>
			}

			snprintf(buffer, sizeof(buffer), "==============================================\n");
 80065be:	1d3b      	adds	r3, r7, #4
 80065c0:	4a55      	ldr	r2, [pc, #340]	; (8006718 <main+0x354>)
 80065c2:	2180      	movs	r1, #128	; 0x80
 80065c4:	4618      	mov	r0, r3
 80065c6:	f001 f9e7 	bl	8007998 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 80065ca:	1d3b      	adds	r3, r7, #4
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7f9 fe07 	bl	80001e0 <strlen>
 80065d2:	4603      	mov	r3, r0
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	1d39      	adds	r1, r7, #4
 80065d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065dc:	4848      	ldr	r0, [pc, #288]	; (8006700 <main+0x33c>)
 80065de:	f7fc ffe6 	bl	80035ae <HAL_UART_Transmit>

			res = read_filename(path, items[10], buffer);
 80065e2:	4e4c      	ldr	r6, [pc, #304]	; (8006714 <main+0x350>)
 80065e4:	46bc      	mov	ip, r7
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ea:	466d      	mov	r5, sp
 80065ec:	f506 740f 	add.w	r4, r6, #572	; 0x23c
 80065f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80065fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006600:	f506 730c 	add.w	r3, r6, #560	; 0x230
 8006604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006606:	4660      	mov	r0, ip
 8006608:	f000 fa68 	bl	8006adc <read_filename>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res == FR_OK) HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 8006612:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <main+0x26e>
 800661a:	1d3b      	adds	r3, r7, #4
 800661c:	4618      	mov	r0, r3
 800661e:	f7f9 fddf 	bl	80001e0 <strlen>
 8006622:	4603      	mov	r3, r0
 8006624:	b29a      	uxth	r2, r3
 8006626:	1d39      	adds	r1, r7, #4
 8006628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800662c:	4834      	ldr	r0, [pc, #208]	; (8006700 <main+0x33c>)
 800662e:	f7fc ffbe 	bl	80035ae <HAL_UART_Transmit>

			res = read_filename(path, items[0], buffer);
 8006632:	4e38      	ldr	r6, [pc, #224]	; (8006714 <main+0x350>)
 8006634:	46bc      	mov	ip, r7
 8006636:	1d3b      	adds	r3, r7, #4
 8006638:	930b      	str	r3, [sp, #44]	; 0x2c
 800663a:	466d      	mov	r5, sp
 800663c:	f106 040c 	add.w	r4, r6, #12
 8006640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006648:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800664c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006650:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8006654:	4660      	mov	r0, ip
 8006656:	f000 fa41 	bl	8006adc <read_filename>
 800665a:	4603      	mov	r3, r0
 800665c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res == FR_OK) HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 8006660:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <main+0x2bc>
 8006668:	1d3b      	adds	r3, r7, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 fdb8 	bl	80001e0 <strlen>
 8006670:	4603      	mov	r3, r0
 8006672:	b29a      	uxth	r2, r3
 8006674:	1d39      	adds	r1, r7, #4
 8006676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800667a:	4821      	ldr	r0, [pc, #132]	; (8006700 <main+0x33c>)
 800667c:	f7fc ff97 	bl	80035ae <HAL_UART_Transmit>

			res = read_filename(path, items[5], buffer);
 8006680:	4e24      	ldr	r6, [pc, #144]	; (8006714 <main+0x350>)
 8006682:	46bc      	mov	ip, r7
 8006684:	1d3b      	adds	r3, r7, #4
 8006686:	930b      	str	r3, [sp, #44]	; 0x2c
 8006688:	466d      	mov	r5, sp
 800668a:	f506 7492 	add.w	r4, r6, #292	; 0x124
 800668e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006696:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800669a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800669e:	f506 738c 	add.w	r3, r6, #280	; 0x118
 80066a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066a4:	4660      	mov	r0, ip
 80066a6:	f000 fa19 	bl	8006adc <read_filename>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res == FR_OK) HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 80066b0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <main+0x30c>
 80066b8:	1d3b      	adds	r3, r7, #4
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7f9 fd90 	bl	80001e0 <strlen>
 80066c0:	4603      	mov	r3, r0
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	1d39      	adds	r1, r7, #4
 80066c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066ca:	480d      	ldr	r0, [pc, #52]	; (8006700 <main+0x33c>)
 80066cc:	f7fc ff6f 	bl	80035ae <HAL_UART_Transmit>

			snprintf(buffer, sizeof(buffer), "==============================================\n");
 80066d0:	1d3b      	adds	r3, r7, #4
 80066d2:	4a11      	ldr	r2, [pc, #68]	; (8006718 <main+0x354>)
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 f95e 	bl	8007998 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 80066dc:	1d3b      	adds	r3, r7, #4
 80066de:	4618      	mov	r0, r3
 80066e0:	f7f9 fd7e 	bl	80001e0 <strlen>
 80066e4:	4603      	mov	r3, r0
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	1d39      	adds	r1, r7, #4
 80066ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066ee:	4804      	ldr	r0, [pc, #16]	; (8006700 <main+0x33c>)
 80066f0:	f7fc ff5d 	bl	80035ae <HAL_UART_Transmit>

		}
	}

	/*##-11- Unlink the SD disk I/O driver ####################################*/
	FATFS_UnLinkDriver(SD_Path);
 80066f4:	4803      	ldr	r0, [pc, #12]	; (8006704 <main+0x340>)
 80066f6:	f7ff fc93 	bl	8006020 <FATFS_UnLinkDriver>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80066fa:	e7fe      	b.n	80066fa <main+0x336>
 80066fc:	08009d78 	.word	0x08009d78
 8006700:	20000690 	.word	0x20000690
 8006704:	200005fc 	.word	0x200005fc
 8006708:	08009e68 	.word	0x08009e68
 800670c:	200006e4 	.word	0x200006e4
 8006710:	2000023c 	.word	0x2000023c
 8006714:	20000918 	.word	0x20000918
 8006718:	08009d80 	.word	0x08009d80
 800671c:	08009db0 	.word	0x08009db0

08006720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b094      	sub	sp, #80	; 0x50
 8006724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006726:	f107 0320 	add.w	r3, r7, #32
 800672a:	2230      	movs	r2, #48	; 0x30
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fc06 	bl	8006f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006734:	f107 030c 	add.w	r3, r7, #12
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	609a      	str	r2, [r3, #8]
 8006740:	60da      	str	r2, [r3, #12]
 8006742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006744:	2300      	movs	r3, #0
 8006746:	60bb      	str	r3, [r7, #8]
 8006748:	4b28      	ldr	r3, [pc, #160]	; (80067ec <SystemClock_Config+0xcc>)
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	4a27      	ldr	r2, [pc, #156]	; (80067ec <SystemClock_Config+0xcc>)
 800674e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006752:	6413      	str	r3, [r2, #64]	; 0x40
 8006754:	4b25      	ldr	r3, [pc, #148]	; (80067ec <SystemClock_Config+0xcc>)
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675c:	60bb      	str	r3, [r7, #8]
 800675e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006760:	2300      	movs	r3, #0
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	4b22      	ldr	r3, [pc, #136]	; (80067f0 <SystemClock_Config+0xd0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <SystemClock_Config+0xd0>)
 800676a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	4b1f      	ldr	r3, [pc, #124]	; (80067f0 <SystemClock_Config+0xd0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800677c:	2302      	movs	r3, #2
 800677e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006780:	2301      	movs	r3, #1
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006784:	2310      	movs	r3, #16
 8006786:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006788:	2302      	movs	r3, #2
 800678a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800678c:	2300      	movs	r3, #0
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006790:	2310      	movs	r3, #16
 8006792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006794:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800679a:	2304      	movs	r3, #4
 800679c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800679e:	2304      	movs	r3, #4
 80067a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067a2:	f107 0320 	add.w	r3, r7, #32
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fb ff60 	bl	800266c <HAL_RCC_OscConfig>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80067b2:	f000 f9f3 	bl	8006b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067b6:	230f      	movs	r3, #15
 80067b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80067ba:	2302      	movs	r3, #2
 80067bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80067c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80067c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80067cc:	f107 030c 	add.w	r3, r7, #12
 80067d0:	2102      	movs	r1, #2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fc f9ba 	bl	8002b4c <HAL_RCC_ClockConfig>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80067de:	f000 f9dd 	bl	8006b9c <Error_Handler>
  }
}
 80067e2:	bf00      	nop
 80067e4:	3750      	adds	r7, #80	; 0x50
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	40023800 	.word	0x40023800
 80067f0:	40007000 	.word	0x40007000

080067f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80067f8:	4b17      	ldr	r3, [pc, #92]	; (8006858 <MX_SPI1_Init+0x64>)
 80067fa:	4a18      	ldr	r2, [pc, #96]	; (800685c <MX_SPI1_Init+0x68>)
 80067fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80067fe:	4b16      	ldr	r3, [pc, #88]	; (8006858 <MX_SPI1_Init+0x64>)
 8006800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006806:	4b14      	ldr	r3, [pc, #80]	; (8006858 <MX_SPI1_Init+0x64>)
 8006808:	2200      	movs	r2, #0
 800680a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800680c:	4b12      	ldr	r3, [pc, #72]	; (8006858 <MX_SPI1_Init+0x64>)
 800680e:	2200      	movs	r2, #0
 8006810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006812:	4b11      	ldr	r3, [pc, #68]	; (8006858 <MX_SPI1_Init+0x64>)
 8006814:	2200      	movs	r2, #0
 8006816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006818:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <MX_SPI1_Init+0x64>)
 800681a:	2200      	movs	r2, #0
 800681c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <MX_SPI1_Init+0x64>)
 8006820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <MX_SPI1_Init+0x64>)
 8006828:	2210      	movs	r2, #16
 800682a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800682c:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <MX_SPI1_Init+0x64>)
 800682e:	2200      	movs	r2, #0
 8006830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <MX_SPI1_Init+0x64>)
 8006834:	2200      	movs	r2, #0
 8006836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <MX_SPI1_Init+0x64>)
 800683a:	2200      	movs	r2, #0
 800683c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800683e:	4b06      	ldr	r3, [pc, #24]	; (8006858 <MX_SPI1_Init+0x64>)
 8006840:	220a      	movs	r2, #10
 8006842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006844:	4804      	ldr	r0, [pc, #16]	; (8006858 <MX_SPI1_Init+0x64>)
 8006846:	f7fc fb7d 	bl	8002f44 <HAL_SPI_Init>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006850:	f000 f9a4 	bl	8006b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006854:	bf00      	nop
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000638 	.word	0x20000638
 800685c:	40013000 	.word	0x40013000

08006860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006864:	4b11      	ldr	r3, [pc, #68]	; (80068ac <MX_USART2_UART_Init+0x4c>)
 8006866:	4a12      	ldr	r2, [pc, #72]	; (80068b0 <MX_USART2_UART_Init+0x50>)
 8006868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800686a:	4b10      	ldr	r3, [pc, #64]	; (80068ac <MX_USART2_UART_Init+0x4c>)
 800686c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006872:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <MX_USART2_UART_Init+0x4c>)
 8006874:	2200      	movs	r2, #0
 8006876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <MX_USART2_UART_Init+0x4c>)
 800687a:	2200      	movs	r2, #0
 800687c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800687e:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <MX_USART2_UART_Init+0x4c>)
 8006880:	2200      	movs	r2, #0
 8006882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006884:	4b09      	ldr	r3, [pc, #36]	; (80068ac <MX_USART2_UART_Init+0x4c>)
 8006886:	220c      	movs	r2, #12
 8006888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800688a:	4b08      	ldr	r3, [pc, #32]	; (80068ac <MX_USART2_UART_Init+0x4c>)
 800688c:	2200      	movs	r2, #0
 800688e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006890:	4b06      	ldr	r3, [pc, #24]	; (80068ac <MX_USART2_UART_Init+0x4c>)
 8006892:	2200      	movs	r2, #0
 8006894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006896:	4805      	ldr	r0, [pc, #20]	; (80068ac <MX_USART2_UART_Init+0x4c>)
 8006898:	f7fc fe3c 	bl	8003514 <HAL_UART_Init>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80068a2:	f000 f97b 	bl	8006b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80068a6:	bf00      	nop
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000690 	.word	0x20000690
 80068b0:	40004400 	.word	0x40004400

080068b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068ba:	f107 030c 	add.w	r3, r7, #12
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	605a      	str	r2, [r3, #4]
 80068c4:	609a      	str	r2, [r3, #8]
 80068c6:	60da      	str	r2, [r3, #12]
 80068c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	4b27      	ldr	r3, [pc, #156]	; (800696c <MX_GPIO_Init+0xb8>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	4a26      	ldr	r2, [pc, #152]	; (800696c <MX_GPIO_Init+0xb8>)
 80068d4:	f043 0304 	orr.w	r3, r3, #4
 80068d8:	6313      	str	r3, [r2, #48]	; 0x30
 80068da:	4b24      	ldr	r3, [pc, #144]	; (800696c <MX_GPIO_Init+0xb8>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	60bb      	str	r3, [r7, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	4b20      	ldr	r3, [pc, #128]	; (800696c <MX_GPIO_Init+0xb8>)
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	4a1f      	ldr	r2, [pc, #124]	; (800696c <MX_GPIO_Init+0xb8>)
 80068f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f4:	6313      	str	r3, [r2, #48]	; 0x30
 80068f6:	4b1d      	ldr	r3, [pc, #116]	; (800696c <MX_GPIO_Init+0xb8>)
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	607b      	str	r3, [r7, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006902:	2300      	movs	r3, #0
 8006904:	603b      	str	r3, [r7, #0]
 8006906:	4b19      	ldr	r3, [pc, #100]	; (800696c <MX_GPIO_Init+0xb8>)
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	4a18      	ldr	r2, [pc, #96]	; (800696c <MX_GPIO_Init+0xb8>)
 800690c:	f043 0301 	orr.w	r3, r3, #1
 8006910:	6313      	str	r3, [r2, #48]	; 0x30
 8006912:	4b16      	ldr	r3, [pc, #88]	; (800696c <MX_GPIO_Init+0xb8>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800691e:	2200      	movs	r2, #0
 8006920:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006924:	4812      	ldr	r0, [pc, #72]	; (8006970 <MX_GPIO_Init+0xbc>)
 8006926:	f7fb fe87 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800692a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800692e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006930:	4b10      	ldr	r3, [pc, #64]	; (8006974 <MX_GPIO_Init+0xc0>)
 8006932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006938:	f107 030c 	add.w	r3, r7, #12
 800693c:	4619      	mov	r1, r3
 800693e:	480e      	ldr	r0, [pc, #56]	; (8006978 <MX_GPIO_Init+0xc4>)
 8006940:	f7fb fc12 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8006944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800694a:	2301      	movs	r3, #1
 800694c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006952:	2300      	movs	r3, #0
 8006954:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	4619      	mov	r1, r3
 800695c:	4804      	ldr	r0, [pc, #16]	; (8006970 <MX_GPIO_Init+0xbc>)
 800695e:	f7fb fc03 	bl	8002168 <HAL_GPIO_Init>

}
 8006962:	bf00      	nop
 8006964:	3720      	adds	r7, #32
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40023800 	.word	0x40023800
 8006970:	40020000 	.word	0x40020000
 8006974:	10210000 	.word	0x10210000
 8006978:	40020800 	.word	0x40020800

0800697c <scan_files>:

/* USER CODE BEGIN 4 */
FRESULT scan_files (char* path, DIR* items, UINT *items_sz)        /* Start node to be scanned (***also used as work area***) */
{
 800697c:	b5b0      	push	{r4, r5, r7, lr}
 800697e:	b0b6      	sub	sp, #216	; 0xd8
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
	DIR dir;
	UINT i;
	static FILINFO fno;
	char buffer[128];

	res = f_opendir(&dir, path);                       /* Open the directory */
 8006988:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800698c:	68f9      	ldr	r1, [r7, #12]
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff f9bc 	bl	8005d0c <f_opendir>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if (res == FR_OK) {
 800699a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 808b 	bne.w	8006aba <scan_files+0x13e>
		items[*items_sz]=dir;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	461a      	mov	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4413      	add	r3, r2
 80069b6:	461d      	mov	r5, r3
 80069b8:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80069bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069cc:	e885 0003 	stmia.w	r5, {r0, r1}
		(*items_sz)++;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	601a      	str	r2, [r3, #0]
		for (;;) {
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80069da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80069de:	493a      	ldr	r1, [pc, #232]	; (8006ac8 <scan_files+0x14c>)
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fa3c 	bl	8005e5e <f_readdir>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

			if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80069ec:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d15d      	bne.n	8006ab0 <scan_files+0x134>
 80069f4:	4b34      	ldr	r3, [pc, #208]	; (8006ac8 <scan_files+0x14c>)
 80069f6:	7d9b      	ldrb	r3, [r3, #22]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d059      	beq.n	8006ab0 <scan_files+0x134>
//				res = scan_files(path, items, items_sz);     /* Enter the directory */
//				if (res != FR_OK) break;
//				path[i] = 0;
//			} else
			{                                       /* It is a file. */
				snprintf(buffer, sizeof(buffer), "%s/%s\n", path, fno.fname);
 80069fc:	f107 0014 	add.w	r0, r7, #20
 8006a00:	4b32      	ldr	r3, [pc, #200]	; (8006acc <scan_files+0x150>)
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4a32      	ldr	r2, [pc, #200]	; (8006ad0 <scan_files+0x154>)
 8006a08:	2180      	movs	r1, #128	; 0x80
 8006a0a:	f000 ffc5 	bl	8007998 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 8006a0e:	f107 0314 	add.w	r3, r7, #20
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 fbe4 	bl	80001e0 <strlen>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	f107 0114 	add.w	r1, r7, #20
 8006a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a24:	482b      	ldr	r0, [pc, #172]	; (8006ad4 <scan_files+0x158>)
 8006a26:	f7fc fdc2 	bl	80035ae <HAL_UART_Transmit>
				if (*items_sz>255) break;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2bff      	cmp	r3, #255	; 0xff
 8006a30:	d83d      	bhi.n	8006aae <scan_files+0x132>
				items[*items_sz]=dir;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4613      	mov	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4413      	add	r3, r2
 8006a44:	461d      	mov	r5, r3
 8006a46:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8006a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a5a:	e885 0003 	stmia.w	r5, {r0, r1}
				snprintf(buffer, sizeof(buffer), "DIR.dir pointer %x %x\n", dir.dir, items[*items_sz].dir);
 8006a5e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4413      	add	r3, r2
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f107 0014 	add.w	r0, r7, #20
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4a16      	ldr	r2, [pc, #88]	; (8006ad8 <scan_files+0x15c>)
 8006a80:	2180      	movs	r1, #128	; 0x80
 8006a82:	f000 ff89 	bl	8007998 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 8006a86:	f107 0314 	add.w	r3, r7, #20
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7f9 fba8 	bl	80001e0 <strlen>
 8006a90:	4603      	mov	r3, r0
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	f107 0114 	add.w	r1, r7, #20
 8006a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a9c:	480d      	ldr	r0, [pc, #52]	; (8006ad4 <scan_files+0x158>)
 8006a9e:	f7fc fd86 	bl	80035ae <HAL_UART_Transmit>
				(*items_sz)++;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	601a      	str	r2, [r3, #0]
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006aac:	e795      	b.n	80069da <scan_files+0x5e>
				if (*items_sz>255) break;
 8006aae:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8006ab0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff f9ac 	bl	8005e12 <f_closedir>
	}

	return res;
 8006aba:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	37d0      	adds	r7, #208	; 0xd0
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000240 	.word	0x20000240
 8006acc:	20000256 	.word	0x20000256
 8006ad0:	08009db8 	.word	0x08009db8
 8006ad4:	20000690 	.word	0x20000690
 8006ad8:	08009dc0 	.word	0x08009dc0

08006adc <read_filename>:

FRESULT read_filename(char* path, DIR target_dir, char* fname)        /* Start node to be scanned (***also used as work area***) */
{
 8006adc:	b084      	sub	sp, #16
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b0b4      	sub	sp, #208	; 0xd0
 8006ae2:	af02      	add	r7, sp, #8
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8006aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	DIR dir;
	UINT i;
	static FILINFO fno;
	char buffer[STRING_SZ];

	res = f_opendir(&dir, path);                       /* Open the directory */
 8006aee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff f909 	bl	8005d0c <f_opendir>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	if (res == FR_OK) {
 8006b00:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d135      	bne.n	8006b74 <read_filename+0x98>
		res = f_readdir(&target_dir, &fno);                   /* Read a directory item */
 8006b08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006b0c:	4920      	ldr	r1, [pc, #128]	; (8006b90 <read_filename+0xb4>)
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff f9a5 	bl	8005e5e <f_readdir>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

		if (res != FR_OK || fno.fname[0] == 0) {
 8006b1a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d103      	bne.n	8006b2a <read_filename+0x4e>
 8006b22:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <read_filename+0xb4>)
 8006b24:	7d9b      	ldrb	r3, [r3, #22]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <read_filename+0x64>
			fname[0]=0;
 8006b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
			f_closedir(&dir);
 8006b32:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff f96b 	bl	8005e12 <f_closedir>
			return FR_INT_ERR;  /* Break on error or end of dir */
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e020      	b.n	8006b82 <read_filename+0xa6>
		}
		if (fno.fattrib & AM_DIR) {
 8006b40:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <read_filename+0xb4>)
 8006b42:	7a1b      	ldrb	r3, [r3, #8]
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <read_filename+0x86>
			fname[0]=0;
 8006b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
			f_closedir(&dir);
 8006b54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff f95a 	bl	8005e12 <f_closedir>
			return FR_INT_ERR;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e00f      	b.n	8006b82 <read_filename+0xa6>
		}

		snprintf(fname, STRING_SZ, "%s/%s\n", path, fno.fname);
 8006b62:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <read_filename+0xb8>)
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a0b      	ldr	r2, [pc, #44]	; (8006b98 <read_filename+0xbc>)
 8006b6a:	2180      	movs	r1, #128	; 0x80
 8006b6c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8006b70:	f000 ff12 	bl	8007998 <sniprintf>
	}
	f_closedir(&dir);
 8006b74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff f94a 	bl	8005e12 <f_closedir>

	return res;
 8006b7e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	37c8      	adds	r7, #200	; 0xc8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b8c:	b004      	add	sp, #16
 8006b8e:	4770      	bx	lr
 8006b90:	20000358 	.word	0x20000358
 8006b94:	2000036e 	.word	0x2000036e
 8006b98:	08009db8 	.word	0x08009db8

08006b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006ba0:	bf00      	nop
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]
 8006bb6:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <HAL_MspInit+0x4c>)
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	4a0f      	ldr	r2, [pc, #60]	; (8006bf8 <HAL_MspInit+0x4c>)
 8006bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <HAL_MspInit+0x4c>)
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bce:	2300      	movs	r3, #0
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <HAL_MspInit+0x4c>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <HAL_MspInit+0x4c>)
 8006bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_MspInit+0x4c>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006bea:	2007      	movs	r0, #7
 8006bec:	f7fb fa88 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40023800 	.word	0x40023800

08006bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	; 0x28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c04:	f107 0314 	add.w	r3, r7, #20
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	605a      	str	r2, [r3, #4]
 8006c0e:	609a      	str	r2, [r3, #8]
 8006c10:	60da      	str	r2, [r3, #12]
 8006c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <HAL_SPI_MspInit+0x84>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d12b      	bne.n	8006c76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	4b18      	ldr	r3, [pc, #96]	; (8006c84 <HAL_SPI_MspInit+0x88>)
 8006c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c26:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <HAL_SPI_MspInit+0x88>)
 8006c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8006c2e:	4b15      	ldr	r3, [pc, #84]	; (8006c84 <HAL_SPI_MspInit+0x88>)
 8006c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <HAL_SPI_MspInit+0x88>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	4a10      	ldr	r2, [pc, #64]	; (8006c84 <HAL_SPI_MspInit+0x88>)
 8006c44:	f043 0301 	orr.w	r3, r3, #1
 8006c48:	6313      	str	r3, [r2, #48]	; 0x30
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <HAL_SPI_MspInit+0x88>)
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NUCLEO_SPIx_SCK_Pin|NUCLEO_SPIx_MISO_Pin|NUCLEO_SPIx_MOSI_Pin;
 8006c56:	23e0      	movs	r3, #224	; 0xe0
 8006c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c62:	2303      	movs	r3, #3
 8006c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006c66:	2305      	movs	r3, #5
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c6a:	f107 0314 	add.w	r3, r7, #20
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4805      	ldr	r0, [pc, #20]	; (8006c88 <HAL_SPI_MspInit+0x8c>)
 8006c72:	f7fb fa79 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006c76:	bf00      	nop
 8006c78:	3728      	adds	r7, #40	; 0x28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40013000 	.word	0x40013000
 8006c84:	40023800 	.word	0x40023800
 8006c88:	40020000 	.word	0x40020000

08006c8c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a08      	ldr	r2, [pc, #32]	; (8006cbc <HAL_SPI_MspDeInit+0x30>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d109      	bne.n	8006cb2 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8006c9e:	4b08      	ldr	r3, [pc, #32]	; (8006cc0 <HAL_SPI_MspDeInit+0x34>)
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	4a07      	ldr	r2, [pc, #28]	; (8006cc0 <HAL_SPI_MspDeInit+0x34>)
 8006ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, NUCLEO_SPIx_SCK_Pin|NUCLEO_SPIx_MISO_Pin|NUCLEO_SPIx_MOSI_Pin);
 8006caa:	21e0      	movs	r1, #224	; 0xe0
 8006cac:	4805      	ldr	r0, [pc, #20]	; (8006cc4 <HAL_SPI_MspDeInit+0x38>)
 8006cae:	f7fb fbdf 	bl	8002470 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40013000 	.word	0x40013000
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	40020000 	.word	0x40020000

08006cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	; 0x28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	609a      	str	r2, [r3, #8]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <HAL_UART_MspInit+0x84>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d12b      	bne.n	8006d42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	4b18      	ldr	r3, [pc, #96]	; (8006d50 <HAL_UART_MspInit+0x88>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_UART_MspInit+0x88>)
 8006cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cfa:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <HAL_UART_MspInit+0x88>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <HAL_UART_MspInit+0x88>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	4a10      	ldr	r2, [pc, #64]	; (8006d50 <HAL_UART_MspInit+0x88>)
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	6313      	str	r3, [r2, #48]	; 0x30
 8006d16:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <HAL_UART_MspInit+0x88>)
 8006d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006d22:	230c      	movs	r3, #12
 8006d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d26:	2302      	movs	r3, #2
 8006d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d32:	2307      	movs	r3, #7
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d36:	f107 0314 	add.w	r3, r7, #20
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4805      	ldr	r0, [pc, #20]	; (8006d54 <HAL_UART_MspInit+0x8c>)
 8006d3e:	f7fb fa13 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006d42:	bf00      	nop
 8006d44:	3728      	adds	r7, #40	; 0x28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40004400 	.word	0x40004400
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40020000 	.word	0x40020000

08006d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d66:	b480      	push	{r7}
 8006d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d6a:	e7fe      	b.n	8006d6a <HardFault_Handler+0x4>

08006d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d70:	e7fe      	b.n	8006d70 <MemManage_Handler+0x4>

08006d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d72:	b480      	push	{r7}
 8006d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d76:	e7fe      	b.n	8006d76 <BusFault_Handler+0x4>

08006d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d7c:	e7fe      	b.n	8006d7c <UsageFault_Handler+0x4>

08006d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d82:	bf00      	nop
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d90:	bf00      	nop
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d9e:	bf00      	nop
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006dac:	f7fb f8b2 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006db0:	bf00      	nop
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006dbc:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <_sbrk+0x50>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <_sbrk+0x16>
		heap_end = &end;
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <_sbrk+0x50>)
 8006dc6:	4a10      	ldr	r2, [pc, #64]	; (8006e08 <_sbrk+0x54>)
 8006dc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006dca:	4b0e      	ldr	r3, [pc, #56]	; (8006e04 <_sbrk+0x50>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <_sbrk+0x50>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	466a      	mov	r2, sp
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d907      	bls.n	8006dee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006dde:	f000 f875 	bl	8006ecc <__errno>
 8006de2:	4603      	mov	r3, r0
 8006de4:	220c      	movs	r2, #12
 8006de6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006de8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dec:	e006      	b.n	8006dfc <_sbrk+0x48>
	}

	heap_end += incr;
 8006dee:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <_sbrk+0x50>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4413      	add	r3, r2
 8006df6:	4a03      	ldr	r2, [pc, #12]	; (8006e04 <_sbrk+0x50>)
 8006df8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000470 	.word	0x20000470
 8006e08:	20004128 	.word	0x20004128

08006e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e10:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <SystemInit+0x60>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <SystemInit+0x60>)
 8006e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006e20:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <SystemInit+0x64>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a12      	ldr	r2, [pc, #72]	; (8006e70 <SystemInit+0x64>)
 8006e26:	f043 0301 	orr.w	r3, r3, #1
 8006e2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006e2c:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <SystemInit+0x64>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006e32:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <SystemInit+0x64>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a0e      	ldr	r2, [pc, #56]	; (8006e70 <SystemInit+0x64>)
 8006e38:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <SystemInit+0x64>)
 8006e44:	4a0b      	ldr	r2, [pc, #44]	; (8006e74 <SystemInit+0x68>)
 8006e46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006e48:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <SystemInit+0x64>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a08      	ldr	r2, [pc, #32]	; (8006e70 <SystemInit+0x64>)
 8006e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <SystemInit+0x64>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e5a:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <SystemInit+0x60>)
 8006e5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e60:	609a      	str	r2, [r3, #8]
#endif
}
 8006e62:	bf00      	nop
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	e000ed00 	.word	0xe000ed00
 8006e70:	40023800 	.word	0x40023800
 8006e74:	24003010 	.word	0x24003010

08006e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006eb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006e7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006e7e:	e003      	b.n	8006e88 <LoopCopyDataInit>

08006e80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006e82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006e84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006e86:	3104      	adds	r1, #4

08006e88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006e88:	480b      	ldr	r0, [pc, #44]	; (8006eb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006e8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006e8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006e90:	d3f6      	bcc.n	8006e80 <CopyDataInit>
  ldr  r2, =_sbss
 8006e92:	4a0b      	ldr	r2, [pc, #44]	; (8006ec0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006e94:	e002      	b.n	8006e9c <LoopFillZerobss>

08006e96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006e96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006e98:	f842 3b04 	str.w	r3, [r2], #4

08006e9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006e9c:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006e9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006ea0:	d3f9      	bcc.n	8006e96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006ea2:	f7ff ffb3 	bl	8006e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ea6:	f000 f817 	bl	8006ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006eaa:	f7ff fa8b 	bl	80063c4 <main>
  bx  lr    
 8006eae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006eb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006eb4:	0800a634 	.word	0x0800a634
  ldr  r0, =_sdata
 8006eb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006ebc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8006ec0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006ec4:	20004128 	.word	0x20004128

08006ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ec8:	e7fe      	b.n	8006ec8 <ADC_IRQHandler>
	...

08006ecc <__errno>:
 8006ecc:	4b01      	ldr	r3, [pc, #4]	; (8006ed4 <__errno+0x8>)
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000010 	.word	0x20000010

08006ed8 <__libc_init_array>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4d0d      	ldr	r5, [pc, #52]	; (8006f10 <__libc_init_array+0x38>)
 8006edc:	4c0d      	ldr	r4, [pc, #52]	; (8006f14 <__libc_init_array+0x3c>)
 8006ede:	1b64      	subs	r4, r4, r5
 8006ee0:	10a4      	asrs	r4, r4, #2
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	42a6      	cmp	r6, r4
 8006ee6:	d109      	bne.n	8006efc <__libc_init_array+0x24>
 8006ee8:	4d0b      	ldr	r5, [pc, #44]	; (8006f18 <__libc_init_array+0x40>)
 8006eea:	4c0c      	ldr	r4, [pc, #48]	; (8006f1c <__libc_init_array+0x44>)
 8006eec:	f002 ff10 	bl	8009d10 <_init>
 8006ef0:	1b64      	subs	r4, r4, r5
 8006ef2:	10a4      	asrs	r4, r4, #2
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	42a6      	cmp	r6, r4
 8006ef8:	d105      	bne.n	8006f06 <__libc_init_array+0x2e>
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f00:	4798      	blx	r3
 8006f02:	3601      	adds	r6, #1
 8006f04:	e7ee      	b.n	8006ee4 <__libc_init_array+0xc>
 8006f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0a:	4798      	blx	r3
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	e7f2      	b.n	8006ef6 <__libc_init_array+0x1e>
 8006f10:	0800a62c 	.word	0x0800a62c
 8006f14:	0800a62c 	.word	0x0800a62c
 8006f18:	0800a62c 	.word	0x0800a62c
 8006f1c:	0800a630 	.word	0x0800a630

08006f20 <malloc>:
 8006f20:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <malloc+0xc>)
 8006f22:	4601      	mov	r1, r0
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	f000 b863 	b.w	8006ff0 <_malloc_r>
 8006f2a:	bf00      	nop
 8006f2c:	20000010 	.word	0x20000010

08006f30 <free>:
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <free+0xc>)
 8006f32:	4601      	mov	r1, r0
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	f000 b80b 	b.w	8006f50 <_free_r>
 8006f3a:	bf00      	nop
 8006f3c:	20000010 	.word	0x20000010

08006f40 <memset>:
 8006f40:	4402      	add	r2, r0
 8006f42:	4603      	mov	r3, r0
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d100      	bne.n	8006f4a <memset+0xa>
 8006f48:	4770      	bx	lr
 8006f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4e:	e7f9      	b.n	8006f44 <memset+0x4>

08006f50 <_free_r>:
 8006f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f52:	2900      	cmp	r1, #0
 8006f54:	d048      	beq.n	8006fe8 <_free_r+0x98>
 8006f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f5a:	9001      	str	r0, [sp, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f62:	bfb8      	it	lt
 8006f64:	18e4      	addlt	r4, r4, r3
 8006f66:	f001 fbd5 	bl	8008714 <__malloc_lock>
 8006f6a:	4a20      	ldr	r2, [pc, #128]	; (8006fec <_free_r+0x9c>)
 8006f6c:	9801      	ldr	r0, [sp, #4]
 8006f6e:	6813      	ldr	r3, [r2, #0]
 8006f70:	4615      	mov	r5, r2
 8006f72:	b933      	cbnz	r3, 8006f82 <_free_r+0x32>
 8006f74:	6063      	str	r3, [r4, #4]
 8006f76:	6014      	str	r4, [r2, #0]
 8006f78:	b003      	add	sp, #12
 8006f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f7e:	f001 bbcf 	b.w	8008720 <__malloc_unlock>
 8006f82:	42a3      	cmp	r3, r4
 8006f84:	d90b      	bls.n	8006f9e <_free_r+0x4e>
 8006f86:	6821      	ldr	r1, [r4, #0]
 8006f88:	1862      	adds	r2, r4, r1
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	bf04      	itt	eq
 8006f8e:	681a      	ldreq	r2, [r3, #0]
 8006f90:	685b      	ldreq	r3, [r3, #4]
 8006f92:	6063      	str	r3, [r4, #4]
 8006f94:	bf04      	itt	eq
 8006f96:	1852      	addeq	r2, r2, r1
 8006f98:	6022      	streq	r2, [r4, #0]
 8006f9a:	602c      	str	r4, [r5, #0]
 8006f9c:	e7ec      	b.n	8006f78 <_free_r+0x28>
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	b10b      	cbz	r3, 8006fa8 <_free_r+0x58>
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	d9fa      	bls.n	8006f9e <_free_r+0x4e>
 8006fa8:	6811      	ldr	r1, [r2, #0]
 8006faa:	1855      	adds	r5, r2, r1
 8006fac:	42a5      	cmp	r5, r4
 8006fae:	d10b      	bne.n	8006fc8 <_free_r+0x78>
 8006fb0:	6824      	ldr	r4, [r4, #0]
 8006fb2:	4421      	add	r1, r4
 8006fb4:	1854      	adds	r4, r2, r1
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	6011      	str	r1, [r2, #0]
 8006fba:	d1dd      	bne.n	8006f78 <_free_r+0x28>
 8006fbc:	681c      	ldr	r4, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	6053      	str	r3, [r2, #4]
 8006fc2:	4421      	add	r1, r4
 8006fc4:	6011      	str	r1, [r2, #0]
 8006fc6:	e7d7      	b.n	8006f78 <_free_r+0x28>
 8006fc8:	d902      	bls.n	8006fd0 <_free_r+0x80>
 8006fca:	230c      	movs	r3, #12
 8006fcc:	6003      	str	r3, [r0, #0]
 8006fce:	e7d3      	b.n	8006f78 <_free_r+0x28>
 8006fd0:	6825      	ldr	r5, [r4, #0]
 8006fd2:	1961      	adds	r1, r4, r5
 8006fd4:	428b      	cmp	r3, r1
 8006fd6:	bf04      	itt	eq
 8006fd8:	6819      	ldreq	r1, [r3, #0]
 8006fda:	685b      	ldreq	r3, [r3, #4]
 8006fdc:	6063      	str	r3, [r4, #4]
 8006fde:	bf04      	itt	eq
 8006fe0:	1949      	addeq	r1, r1, r5
 8006fe2:	6021      	streq	r1, [r4, #0]
 8006fe4:	6054      	str	r4, [r2, #4]
 8006fe6:	e7c7      	b.n	8006f78 <_free_r+0x28>
 8006fe8:	b003      	add	sp, #12
 8006fea:	bd30      	pop	{r4, r5, pc}
 8006fec:	20000474 	.word	0x20000474

08006ff0 <_malloc_r>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	1ccd      	adds	r5, r1, #3
 8006ff4:	f025 0503 	bic.w	r5, r5, #3
 8006ff8:	3508      	adds	r5, #8
 8006ffa:	2d0c      	cmp	r5, #12
 8006ffc:	bf38      	it	cc
 8006ffe:	250c      	movcc	r5, #12
 8007000:	2d00      	cmp	r5, #0
 8007002:	4606      	mov	r6, r0
 8007004:	db01      	blt.n	800700a <_malloc_r+0x1a>
 8007006:	42a9      	cmp	r1, r5
 8007008:	d903      	bls.n	8007012 <_malloc_r+0x22>
 800700a:	230c      	movs	r3, #12
 800700c:	6033      	str	r3, [r6, #0]
 800700e:	2000      	movs	r0, #0
 8007010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007012:	f001 fb7f 	bl	8008714 <__malloc_lock>
 8007016:	4921      	ldr	r1, [pc, #132]	; (800709c <_malloc_r+0xac>)
 8007018:	680a      	ldr	r2, [r1, #0]
 800701a:	4614      	mov	r4, r2
 800701c:	b99c      	cbnz	r4, 8007046 <_malloc_r+0x56>
 800701e:	4f20      	ldr	r7, [pc, #128]	; (80070a0 <_malloc_r+0xb0>)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	b923      	cbnz	r3, 800702e <_malloc_r+0x3e>
 8007024:	4621      	mov	r1, r4
 8007026:	4630      	mov	r0, r6
 8007028:	f000 fca6 	bl	8007978 <_sbrk_r>
 800702c:	6038      	str	r0, [r7, #0]
 800702e:	4629      	mov	r1, r5
 8007030:	4630      	mov	r0, r6
 8007032:	f000 fca1 	bl	8007978 <_sbrk_r>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d123      	bne.n	8007082 <_malloc_r+0x92>
 800703a:	230c      	movs	r3, #12
 800703c:	6033      	str	r3, [r6, #0]
 800703e:	4630      	mov	r0, r6
 8007040:	f001 fb6e 	bl	8008720 <__malloc_unlock>
 8007044:	e7e3      	b.n	800700e <_malloc_r+0x1e>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	1b5b      	subs	r3, r3, r5
 800704a:	d417      	bmi.n	800707c <_malloc_r+0x8c>
 800704c:	2b0b      	cmp	r3, #11
 800704e:	d903      	bls.n	8007058 <_malloc_r+0x68>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	441c      	add	r4, r3
 8007054:	6025      	str	r5, [r4, #0]
 8007056:	e004      	b.n	8007062 <_malloc_r+0x72>
 8007058:	6863      	ldr	r3, [r4, #4]
 800705a:	42a2      	cmp	r2, r4
 800705c:	bf0c      	ite	eq
 800705e:	600b      	streq	r3, [r1, #0]
 8007060:	6053      	strne	r3, [r2, #4]
 8007062:	4630      	mov	r0, r6
 8007064:	f001 fb5c 	bl	8008720 <__malloc_unlock>
 8007068:	f104 000b 	add.w	r0, r4, #11
 800706c:	1d23      	adds	r3, r4, #4
 800706e:	f020 0007 	bic.w	r0, r0, #7
 8007072:	1ac2      	subs	r2, r0, r3
 8007074:	d0cc      	beq.n	8007010 <_malloc_r+0x20>
 8007076:	1a1b      	subs	r3, r3, r0
 8007078:	50a3      	str	r3, [r4, r2]
 800707a:	e7c9      	b.n	8007010 <_malloc_r+0x20>
 800707c:	4622      	mov	r2, r4
 800707e:	6864      	ldr	r4, [r4, #4]
 8007080:	e7cc      	b.n	800701c <_malloc_r+0x2c>
 8007082:	1cc4      	adds	r4, r0, #3
 8007084:	f024 0403 	bic.w	r4, r4, #3
 8007088:	42a0      	cmp	r0, r4
 800708a:	d0e3      	beq.n	8007054 <_malloc_r+0x64>
 800708c:	1a21      	subs	r1, r4, r0
 800708e:	4630      	mov	r0, r6
 8007090:	f000 fc72 	bl	8007978 <_sbrk_r>
 8007094:	3001      	adds	r0, #1
 8007096:	d1dd      	bne.n	8007054 <_malloc_r+0x64>
 8007098:	e7cf      	b.n	800703a <_malloc_r+0x4a>
 800709a:	bf00      	nop
 800709c:	20000474 	.word	0x20000474
 80070a0:	20000478 	.word	0x20000478

080070a4 <__cvt>:
 80070a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070a8:	ec55 4b10 	vmov	r4, r5, d0
 80070ac:	2d00      	cmp	r5, #0
 80070ae:	460e      	mov	r6, r1
 80070b0:	4619      	mov	r1, r3
 80070b2:	462b      	mov	r3, r5
 80070b4:	bfbb      	ittet	lt
 80070b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070ba:	461d      	movlt	r5, r3
 80070bc:	2300      	movge	r3, #0
 80070be:	232d      	movlt	r3, #45	; 0x2d
 80070c0:	700b      	strb	r3, [r1, #0]
 80070c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070c8:	4691      	mov	r9, r2
 80070ca:	f023 0820 	bic.w	r8, r3, #32
 80070ce:	bfbc      	itt	lt
 80070d0:	4622      	movlt	r2, r4
 80070d2:	4614      	movlt	r4, r2
 80070d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070d8:	d005      	beq.n	80070e6 <__cvt+0x42>
 80070da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070de:	d100      	bne.n	80070e2 <__cvt+0x3e>
 80070e0:	3601      	adds	r6, #1
 80070e2:	2102      	movs	r1, #2
 80070e4:	e000      	b.n	80070e8 <__cvt+0x44>
 80070e6:	2103      	movs	r1, #3
 80070e8:	ab03      	add	r3, sp, #12
 80070ea:	9301      	str	r3, [sp, #4]
 80070ec:	ab02      	add	r3, sp, #8
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	ec45 4b10 	vmov	d0, r4, r5
 80070f4:	4653      	mov	r3, sl
 80070f6:	4632      	mov	r2, r6
 80070f8:	f000 fd0e 	bl	8007b18 <_dtoa_r>
 80070fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007100:	4607      	mov	r7, r0
 8007102:	d102      	bne.n	800710a <__cvt+0x66>
 8007104:	f019 0f01 	tst.w	r9, #1
 8007108:	d022      	beq.n	8007150 <__cvt+0xac>
 800710a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800710e:	eb07 0906 	add.w	r9, r7, r6
 8007112:	d110      	bne.n	8007136 <__cvt+0x92>
 8007114:	783b      	ldrb	r3, [r7, #0]
 8007116:	2b30      	cmp	r3, #48	; 0x30
 8007118:	d10a      	bne.n	8007130 <__cvt+0x8c>
 800711a:	2200      	movs	r2, #0
 800711c:	2300      	movs	r3, #0
 800711e:	4620      	mov	r0, r4
 8007120:	4629      	mov	r1, r5
 8007122:	f7f9 fcd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007126:	b918      	cbnz	r0, 8007130 <__cvt+0x8c>
 8007128:	f1c6 0601 	rsb	r6, r6, #1
 800712c:	f8ca 6000 	str.w	r6, [sl]
 8007130:	f8da 3000 	ldr.w	r3, [sl]
 8007134:	4499      	add	r9, r3
 8007136:	2200      	movs	r2, #0
 8007138:	2300      	movs	r3, #0
 800713a:	4620      	mov	r0, r4
 800713c:	4629      	mov	r1, r5
 800713e:	f7f9 fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007142:	b108      	cbz	r0, 8007148 <__cvt+0xa4>
 8007144:	f8cd 900c 	str.w	r9, [sp, #12]
 8007148:	2230      	movs	r2, #48	; 0x30
 800714a:	9b03      	ldr	r3, [sp, #12]
 800714c:	454b      	cmp	r3, r9
 800714e:	d307      	bcc.n	8007160 <__cvt+0xbc>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007154:	1bdb      	subs	r3, r3, r7
 8007156:	4638      	mov	r0, r7
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	b004      	add	sp, #16
 800715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007160:	1c59      	adds	r1, r3, #1
 8007162:	9103      	str	r1, [sp, #12]
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	e7f0      	b.n	800714a <__cvt+0xa6>

08007168 <__exponent>:
 8007168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800716a:	4603      	mov	r3, r0
 800716c:	2900      	cmp	r1, #0
 800716e:	bfb8      	it	lt
 8007170:	4249      	neglt	r1, r1
 8007172:	f803 2b02 	strb.w	r2, [r3], #2
 8007176:	bfb4      	ite	lt
 8007178:	222d      	movlt	r2, #45	; 0x2d
 800717a:	222b      	movge	r2, #43	; 0x2b
 800717c:	2909      	cmp	r1, #9
 800717e:	7042      	strb	r2, [r0, #1]
 8007180:	dd2a      	ble.n	80071d8 <__exponent+0x70>
 8007182:	f10d 0407 	add.w	r4, sp, #7
 8007186:	46a4      	mov	ip, r4
 8007188:	270a      	movs	r7, #10
 800718a:	46a6      	mov	lr, r4
 800718c:	460a      	mov	r2, r1
 800718e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007192:	fb07 1516 	mls	r5, r7, r6, r1
 8007196:	3530      	adds	r5, #48	; 0x30
 8007198:	2a63      	cmp	r2, #99	; 0x63
 800719a:	f104 34ff 	add.w	r4, r4, #4294967295
 800719e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071a2:	4631      	mov	r1, r6
 80071a4:	dcf1      	bgt.n	800718a <__exponent+0x22>
 80071a6:	3130      	adds	r1, #48	; 0x30
 80071a8:	f1ae 0502 	sub.w	r5, lr, #2
 80071ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071b0:	1c44      	adds	r4, r0, #1
 80071b2:	4629      	mov	r1, r5
 80071b4:	4561      	cmp	r1, ip
 80071b6:	d30a      	bcc.n	80071ce <__exponent+0x66>
 80071b8:	f10d 0209 	add.w	r2, sp, #9
 80071bc:	eba2 020e 	sub.w	r2, r2, lr
 80071c0:	4565      	cmp	r5, ip
 80071c2:	bf88      	it	hi
 80071c4:	2200      	movhi	r2, #0
 80071c6:	4413      	add	r3, r2
 80071c8:	1a18      	subs	r0, r3, r0
 80071ca:	b003      	add	sp, #12
 80071cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071d6:	e7ed      	b.n	80071b4 <__exponent+0x4c>
 80071d8:	2330      	movs	r3, #48	; 0x30
 80071da:	3130      	adds	r1, #48	; 0x30
 80071dc:	7083      	strb	r3, [r0, #2]
 80071de:	70c1      	strb	r1, [r0, #3]
 80071e0:	1d03      	adds	r3, r0, #4
 80071e2:	e7f1      	b.n	80071c8 <__exponent+0x60>

080071e4 <_printf_float>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	ed2d 8b02 	vpush	{d8}
 80071ec:	b08d      	sub	sp, #52	; 0x34
 80071ee:	460c      	mov	r4, r1
 80071f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071f4:	4616      	mov	r6, r2
 80071f6:	461f      	mov	r7, r3
 80071f8:	4605      	mov	r5, r0
 80071fa:	f001 fa79 	bl	80086f0 <_localeconv_r>
 80071fe:	f8d0 a000 	ldr.w	sl, [r0]
 8007202:	4650      	mov	r0, sl
 8007204:	f7f8 ffec 	bl	80001e0 <strlen>
 8007208:	2300      	movs	r3, #0
 800720a:	930a      	str	r3, [sp, #40]	; 0x28
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	9305      	str	r3, [sp, #20]
 8007210:	f8d8 3000 	ldr.w	r3, [r8]
 8007214:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007218:	3307      	adds	r3, #7
 800721a:	f023 0307 	bic.w	r3, r3, #7
 800721e:	f103 0208 	add.w	r2, r3, #8
 8007222:	f8c8 2000 	str.w	r2, [r8]
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800722e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007232:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007236:	9307      	str	r3, [sp, #28]
 8007238:	f8cd 8018 	str.w	r8, [sp, #24]
 800723c:	ee08 0a10 	vmov	s16, r0
 8007240:	4b9f      	ldr	r3, [pc, #636]	; (80074c0 <_printf_float+0x2dc>)
 8007242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007246:	f04f 32ff 	mov.w	r2, #4294967295
 800724a:	f7f9 fc77 	bl	8000b3c <__aeabi_dcmpun>
 800724e:	bb88      	cbnz	r0, 80072b4 <_printf_float+0xd0>
 8007250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007254:	4b9a      	ldr	r3, [pc, #616]	; (80074c0 <_printf_float+0x2dc>)
 8007256:	f04f 32ff 	mov.w	r2, #4294967295
 800725a:	f7f9 fc51 	bl	8000b00 <__aeabi_dcmple>
 800725e:	bb48      	cbnz	r0, 80072b4 <_printf_float+0xd0>
 8007260:	2200      	movs	r2, #0
 8007262:	2300      	movs	r3, #0
 8007264:	4640      	mov	r0, r8
 8007266:	4649      	mov	r1, r9
 8007268:	f7f9 fc40 	bl	8000aec <__aeabi_dcmplt>
 800726c:	b110      	cbz	r0, 8007274 <_printf_float+0x90>
 800726e:	232d      	movs	r3, #45	; 0x2d
 8007270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007274:	4b93      	ldr	r3, [pc, #588]	; (80074c4 <_printf_float+0x2e0>)
 8007276:	4894      	ldr	r0, [pc, #592]	; (80074c8 <_printf_float+0x2e4>)
 8007278:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800727c:	bf94      	ite	ls
 800727e:	4698      	movls	r8, r3
 8007280:	4680      	movhi	r8, r0
 8007282:	2303      	movs	r3, #3
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	9b05      	ldr	r3, [sp, #20]
 8007288:	f023 0204 	bic.w	r2, r3, #4
 800728c:	6022      	str	r2, [r4, #0]
 800728e:	f04f 0900 	mov.w	r9, #0
 8007292:	9700      	str	r7, [sp, #0]
 8007294:	4633      	mov	r3, r6
 8007296:	aa0b      	add	r2, sp, #44	; 0x2c
 8007298:	4621      	mov	r1, r4
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f9d8 	bl	8007650 <_printf_common>
 80072a0:	3001      	adds	r0, #1
 80072a2:	f040 8090 	bne.w	80073c6 <_printf_float+0x1e2>
 80072a6:	f04f 30ff 	mov.w	r0, #4294967295
 80072aa:	b00d      	add	sp, #52	; 0x34
 80072ac:	ecbd 8b02 	vpop	{d8}
 80072b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	4640      	mov	r0, r8
 80072ba:	4649      	mov	r1, r9
 80072bc:	f7f9 fc3e 	bl	8000b3c <__aeabi_dcmpun>
 80072c0:	b140      	cbz	r0, 80072d4 <_printf_float+0xf0>
 80072c2:	464b      	mov	r3, r9
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfbc      	itt	lt
 80072c8:	232d      	movlt	r3, #45	; 0x2d
 80072ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072ce:	487f      	ldr	r0, [pc, #508]	; (80074cc <_printf_float+0x2e8>)
 80072d0:	4b7f      	ldr	r3, [pc, #508]	; (80074d0 <_printf_float+0x2ec>)
 80072d2:	e7d1      	b.n	8007278 <_printf_float+0x94>
 80072d4:	6863      	ldr	r3, [r4, #4]
 80072d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072da:	9206      	str	r2, [sp, #24]
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	d13f      	bne.n	8007360 <_printf_float+0x17c>
 80072e0:	2306      	movs	r3, #6
 80072e2:	6063      	str	r3, [r4, #4]
 80072e4:	9b05      	ldr	r3, [sp, #20]
 80072e6:	6861      	ldr	r1, [r4, #4]
 80072e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072ec:	2300      	movs	r3, #0
 80072ee:	9303      	str	r3, [sp, #12]
 80072f0:	ab0a      	add	r3, sp, #40	; 0x28
 80072f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072f6:	ab09      	add	r3, sp, #36	; 0x24
 80072f8:	ec49 8b10 	vmov	d0, r8, r9
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	6022      	str	r2, [r4, #0]
 8007300:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007304:	4628      	mov	r0, r5
 8007306:	f7ff fecd 	bl	80070a4 <__cvt>
 800730a:	9b06      	ldr	r3, [sp, #24]
 800730c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800730e:	2b47      	cmp	r3, #71	; 0x47
 8007310:	4680      	mov	r8, r0
 8007312:	d108      	bne.n	8007326 <_printf_float+0x142>
 8007314:	1cc8      	adds	r0, r1, #3
 8007316:	db02      	blt.n	800731e <_printf_float+0x13a>
 8007318:	6863      	ldr	r3, [r4, #4]
 800731a:	4299      	cmp	r1, r3
 800731c:	dd41      	ble.n	80073a2 <_printf_float+0x1be>
 800731e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007322:	fa5f fb8b 	uxtb.w	fp, fp
 8007326:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800732a:	d820      	bhi.n	800736e <_printf_float+0x18a>
 800732c:	3901      	subs	r1, #1
 800732e:	465a      	mov	r2, fp
 8007330:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007334:	9109      	str	r1, [sp, #36]	; 0x24
 8007336:	f7ff ff17 	bl	8007168 <__exponent>
 800733a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800733c:	1813      	adds	r3, r2, r0
 800733e:	2a01      	cmp	r2, #1
 8007340:	4681      	mov	r9, r0
 8007342:	6123      	str	r3, [r4, #16]
 8007344:	dc02      	bgt.n	800734c <_printf_float+0x168>
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	07d2      	lsls	r2, r2, #31
 800734a:	d501      	bpl.n	8007350 <_printf_float+0x16c>
 800734c:	3301      	adds	r3, #1
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007354:	2b00      	cmp	r3, #0
 8007356:	d09c      	beq.n	8007292 <_printf_float+0xae>
 8007358:	232d      	movs	r3, #45	; 0x2d
 800735a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800735e:	e798      	b.n	8007292 <_printf_float+0xae>
 8007360:	9a06      	ldr	r2, [sp, #24]
 8007362:	2a47      	cmp	r2, #71	; 0x47
 8007364:	d1be      	bne.n	80072e4 <_printf_float+0x100>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1bc      	bne.n	80072e4 <_printf_float+0x100>
 800736a:	2301      	movs	r3, #1
 800736c:	e7b9      	b.n	80072e2 <_printf_float+0xfe>
 800736e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007372:	d118      	bne.n	80073a6 <_printf_float+0x1c2>
 8007374:	2900      	cmp	r1, #0
 8007376:	6863      	ldr	r3, [r4, #4]
 8007378:	dd0b      	ble.n	8007392 <_printf_float+0x1ae>
 800737a:	6121      	str	r1, [r4, #16]
 800737c:	b913      	cbnz	r3, 8007384 <_printf_float+0x1a0>
 800737e:	6822      	ldr	r2, [r4, #0]
 8007380:	07d0      	lsls	r0, r2, #31
 8007382:	d502      	bpl.n	800738a <_printf_float+0x1a6>
 8007384:	3301      	adds	r3, #1
 8007386:	440b      	add	r3, r1
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	65a1      	str	r1, [r4, #88]	; 0x58
 800738c:	f04f 0900 	mov.w	r9, #0
 8007390:	e7de      	b.n	8007350 <_printf_float+0x16c>
 8007392:	b913      	cbnz	r3, 800739a <_printf_float+0x1b6>
 8007394:	6822      	ldr	r2, [r4, #0]
 8007396:	07d2      	lsls	r2, r2, #31
 8007398:	d501      	bpl.n	800739e <_printf_float+0x1ba>
 800739a:	3302      	adds	r3, #2
 800739c:	e7f4      	b.n	8007388 <_printf_float+0x1a4>
 800739e:	2301      	movs	r3, #1
 80073a0:	e7f2      	b.n	8007388 <_printf_float+0x1a4>
 80073a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a8:	4299      	cmp	r1, r3
 80073aa:	db05      	blt.n	80073b8 <_printf_float+0x1d4>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	6121      	str	r1, [r4, #16]
 80073b0:	07d8      	lsls	r0, r3, #31
 80073b2:	d5ea      	bpl.n	800738a <_printf_float+0x1a6>
 80073b4:	1c4b      	adds	r3, r1, #1
 80073b6:	e7e7      	b.n	8007388 <_printf_float+0x1a4>
 80073b8:	2900      	cmp	r1, #0
 80073ba:	bfd4      	ite	le
 80073bc:	f1c1 0202 	rsble	r2, r1, #2
 80073c0:	2201      	movgt	r2, #1
 80073c2:	4413      	add	r3, r2
 80073c4:	e7e0      	b.n	8007388 <_printf_float+0x1a4>
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	055a      	lsls	r2, r3, #21
 80073ca:	d407      	bmi.n	80073dc <_printf_float+0x1f8>
 80073cc:	6923      	ldr	r3, [r4, #16]
 80073ce:	4642      	mov	r2, r8
 80073d0:	4631      	mov	r1, r6
 80073d2:	4628      	mov	r0, r5
 80073d4:	47b8      	blx	r7
 80073d6:	3001      	adds	r0, #1
 80073d8:	d12c      	bne.n	8007434 <_printf_float+0x250>
 80073da:	e764      	b.n	80072a6 <_printf_float+0xc2>
 80073dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073e0:	f240 80e0 	bls.w	80075a4 <_printf_float+0x3c0>
 80073e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073e8:	2200      	movs	r2, #0
 80073ea:	2300      	movs	r3, #0
 80073ec:	f7f9 fb74 	bl	8000ad8 <__aeabi_dcmpeq>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d034      	beq.n	800745e <_printf_float+0x27a>
 80073f4:	4a37      	ldr	r2, [pc, #220]	; (80074d4 <_printf_float+0x2f0>)
 80073f6:	2301      	movs	r3, #1
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	f43f af51 	beq.w	80072a6 <_printf_float+0xc2>
 8007404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007408:	429a      	cmp	r2, r3
 800740a:	db02      	blt.n	8007412 <_printf_float+0x22e>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	07d8      	lsls	r0, r3, #31
 8007410:	d510      	bpl.n	8007434 <_printf_float+0x250>
 8007412:	ee18 3a10 	vmov	r3, s16
 8007416:	4652      	mov	r2, sl
 8007418:	4631      	mov	r1, r6
 800741a:	4628      	mov	r0, r5
 800741c:	47b8      	blx	r7
 800741e:	3001      	adds	r0, #1
 8007420:	f43f af41 	beq.w	80072a6 <_printf_float+0xc2>
 8007424:	f04f 0800 	mov.w	r8, #0
 8007428:	f104 091a 	add.w	r9, r4, #26
 800742c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742e:	3b01      	subs	r3, #1
 8007430:	4543      	cmp	r3, r8
 8007432:	dc09      	bgt.n	8007448 <_printf_float+0x264>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	079b      	lsls	r3, r3, #30
 8007438:	f100 8105 	bmi.w	8007646 <_printf_float+0x462>
 800743c:	68e0      	ldr	r0, [r4, #12]
 800743e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007440:	4298      	cmp	r0, r3
 8007442:	bfb8      	it	lt
 8007444:	4618      	movlt	r0, r3
 8007446:	e730      	b.n	80072aa <_printf_float+0xc6>
 8007448:	2301      	movs	r3, #1
 800744a:	464a      	mov	r2, r9
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	f43f af27 	beq.w	80072a6 <_printf_float+0xc2>
 8007458:	f108 0801 	add.w	r8, r8, #1
 800745c:	e7e6      	b.n	800742c <_printf_float+0x248>
 800745e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	dc39      	bgt.n	80074d8 <_printf_float+0x2f4>
 8007464:	4a1b      	ldr	r2, [pc, #108]	; (80074d4 <_printf_float+0x2f0>)
 8007466:	2301      	movs	r3, #1
 8007468:	4631      	mov	r1, r6
 800746a:	4628      	mov	r0, r5
 800746c:	47b8      	blx	r7
 800746e:	3001      	adds	r0, #1
 8007470:	f43f af19 	beq.w	80072a6 <_printf_float+0xc2>
 8007474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007478:	4313      	orrs	r3, r2
 800747a:	d102      	bne.n	8007482 <_printf_float+0x29e>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	07d9      	lsls	r1, r3, #31
 8007480:	d5d8      	bpl.n	8007434 <_printf_float+0x250>
 8007482:	ee18 3a10 	vmov	r3, s16
 8007486:	4652      	mov	r2, sl
 8007488:	4631      	mov	r1, r6
 800748a:	4628      	mov	r0, r5
 800748c:	47b8      	blx	r7
 800748e:	3001      	adds	r0, #1
 8007490:	f43f af09 	beq.w	80072a6 <_printf_float+0xc2>
 8007494:	f04f 0900 	mov.w	r9, #0
 8007498:	f104 0a1a 	add.w	sl, r4, #26
 800749c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749e:	425b      	negs	r3, r3
 80074a0:	454b      	cmp	r3, r9
 80074a2:	dc01      	bgt.n	80074a8 <_printf_float+0x2c4>
 80074a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a6:	e792      	b.n	80073ce <_printf_float+0x1ea>
 80074a8:	2301      	movs	r3, #1
 80074aa:	4652      	mov	r2, sl
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	f43f aef7 	beq.w	80072a6 <_printf_float+0xc2>
 80074b8:	f109 0901 	add.w	r9, r9, #1
 80074bc:	e7ee      	b.n	800749c <_printf_float+0x2b8>
 80074be:	bf00      	nop
 80074c0:	7fefffff 	.word	0x7fefffff
 80074c4:	0800a248 	.word	0x0800a248
 80074c8:	0800a24c 	.word	0x0800a24c
 80074cc:	0800a254 	.word	0x0800a254
 80074d0:	0800a250 	.word	0x0800a250
 80074d4:	0800a258 	.word	0x0800a258
 80074d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074dc:	429a      	cmp	r2, r3
 80074de:	bfa8      	it	ge
 80074e0:	461a      	movge	r2, r3
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	4691      	mov	r9, r2
 80074e6:	dc37      	bgt.n	8007558 <_printf_float+0x374>
 80074e8:	f04f 0b00 	mov.w	fp, #0
 80074ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f0:	f104 021a 	add.w	r2, r4, #26
 80074f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074f6:	9305      	str	r3, [sp, #20]
 80074f8:	eba3 0309 	sub.w	r3, r3, r9
 80074fc:	455b      	cmp	r3, fp
 80074fe:	dc33      	bgt.n	8007568 <_printf_float+0x384>
 8007500:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007504:	429a      	cmp	r2, r3
 8007506:	db3b      	blt.n	8007580 <_printf_float+0x39c>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	07da      	lsls	r2, r3, #31
 800750c:	d438      	bmi.n	8007580 <_printf_float+0x39c>
 800750e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007510:	9b05      	ldr	r3, [sp, #20]
 8007512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	eba2 0901 	sub.w	r9, r2, r1
 800751a:	4599      	cmp	r9, r3
 800751c:	bfa8      	it	ge
 800751e:	4699      	movge	r9, r3
 8007520:	f1b9 0f00 	cmp.w	r9, #0
 8007524:	dc35      	bgt.n	8007592 <_printf_float+0x3ae>
 8007526:	f04f 0800 	mov.w	r8, #0
 800752a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800752e:	f104 0a1a 	add.w	sl, r4, #26
 8007532:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007536:	1a9b      	subs	r3, r3, r2
 8007538:	eba3 0309 	sub.w	r3, r3, r9
 800753c:	4543      	cmp	r3, r8
 800753e:	f77f af79 	ble.w	8007434 <_printf_float+0x250>
 8007542:	2301      	movs	r3, #1
 8007544:	4652      	mov	r2, sl
 8007546:	4631      	mov	r1, r6
 8007548:	4628      	mov	r0, r5
 800754a:	47b8      	blx	r7
 800754c:	3001      	adds	r0, #1
 800754e:	f43f aeaa 	beq.w	80072a6 <_printf_float+0xc2>
 8007552:	f108 0801 	add.w	r8, r8, #1
 8007556:	e7ec      	b.n	8007532 <_printf_float+0x34e>
 8007558:	4613      	mov	r3, r2
 800755a:	4631      	mov	r1, r6
 800755c:	4642      	mov	r2, r8
 800755e:	4628      	mov	r0, r5
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	d1c0      	bne.n	80074e8 <_printf_float+0x304>
 8007566:	e69e      	b.n	80072a6 <_printf_float+0xc2>
 8007568:	2301      	movs	r3, #1
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	9205      	str	r2, [sp, #20]
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	f43f ae97 	beq.w	80072a6 <_printf_float+0xc2>
 8007578:	9a05      	ldr	r2, [sp, #20]
 800757a:	f10b 0b01 	add.w	fp, fp, #1
 800757e:	e7b9      	b.n	80074f4 <_printf_float+0x310>
 8007580:	ee18 3a10 	vmov	r3, s16
 8007584:	4652      	mov	r2, sl
 8007586:	4631      	mov	r1, r6
 8007588:	4628      	mov	r0, r5
 800758a:	47b8      	blx	r7
 800758c:	3001      	adds	r0, #1
 800758e:	d1be      	bne.n	800750e <_printf_float+0x32a>
 8007590:	e689      	b.n	80072a6 <_printf_float+0xc2>
 8007592:	9a05      	ldr	r2, [sp, #20]
 8007594:	464b      	mov	r3, r9
 8007596:	4442      	add	r2, r8
 8007598:	4631      	mov	r1, r6
 800759a:	4628      	mov	r0, r5
 800759c:	47b8      	blx	r7
 800759e:	3001      	adds	r0, #1
 80075a0:	d1c1      	bne.n	8007526 <_printf_float+0x342>
 80075a2:	e680      	b.n	80072a6 <_printf_float+0xc2>
 80075a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075a6:	2a01      	cmp	r2, #1
 80075a8:	dc01      	bgt.n	80075ae <_printf_float+0x3ca>
 80075aa:	07db      	lsls	r3, r3, #31
 80075ac:	d538      	bpl.n	8007620 <_printf_float+0x43c>
 80075ae:	2301      	movs	r3, #1
 80075b0:	4642      	mov	r2, r8
 80075b2:	4631      	mov	r1, r6
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b8      	blx	r7
 80075b8:	3001      	adds	r0, #1
 80075ba:	f43f ae74 	beq.w	80072a6 <_printf_float+0xc2>
 80075be:	ee18 3a10 	vmov	r3, s16
 80075c2:	4652      	mov	r2, sl
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f ae6b 	beq.w	80072a6 <_printf_float+0xc2>
 80075d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075d4:	2200      	movs	r2, #0
 80075d6:	2300      	movs	r3, #0
 80075d8:	f7f9 fa7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80075dc:	b9d8      	cbnz	r0, 8007616 <_printf_float+0x432>
 80075de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e0:	f108 0201 	add.w	r2, r8, #1
 80075e4:	3b01      	subs	r3, #1
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	d10e      	bne.n	800760e <_printf_float+0x42a>
 80075f0:	e659      	b.n	80072a6 <_printf_float+0xc2>
 80075f2:	2301      	movs	r3, #1
 80075f4:	4652      	mov	r2, sl
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	f43f ae52 	beq.w	80072a6 <_printf_float+0xc2>
 8007602:	f108 0801 	add.w	r8, r8, #1
 8007606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007608:	3b01      	subs	r3, #1
 800760a:	4543      	cmp	r3, r8
 800760c:	dcf1      	bgt.n	80075f2 <_printf_float+0x40e>
 800760e:	464b      	mov	r3, r9
 8007610:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007614:	e6dc      	b.n	80073d0 <_printf_float+0x1ec>
 8007616:	f04f 0800 	mov.w	r8, #0
 800761a:	f104 0a1a 	add.w	sl, r4, #26
 800761e:	e7f2      	b.n	8007606 <_printf_float+0x422>
 8007620:	2301      	movs	r3, #1
 8007622:	4642      	mov	r2, r8
 8007624:	e7df      	b.n	80075e6 <_printf_float+0x402>
 8007626:	2301      	movs	r3, #1
 8007628:	464a      	mov	r2, r9
 800762a:	4631      	mov	r1, r6
 800762c:	4628      	mov	r0, r5
 800762e:	47b8      	blx	r7
 8007630:	3001      	adds	r0, #1
 8007632:	f43f ae38 	beq.w	80072a6 <_printf_float+0xc2>
 8007636:	f108 0801 	add.w	r8, r8, #1
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800763e:	1a5b      	subs	r3, r3, r1
 8007640:	4543      	cmp	r3, r8
 8007642:	dcf0      	bgt.n	8007626 <_printf_float+0x442>
 8007644:	e6fa      	b.n	800743c <_printf_float+0x258>
 8007646:	f04f 0800 	mov.w	r8, #0
 800764a:	f104 0919 	add.w	r9, r4, #25
 800764e:	e7f4      	b.n	800763a <_printf_float+0x456>

08007650 <_printf_common>:
 8007650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007654:	4616      	mov	r6, r2
 8007656:	4699      	mov	r9, r3
 8007658:	688a      	ldr	r2, [r1, #8]
 800765a:	690b      	ldr	r3, [r1, #16]
 800765c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007660:	4293      	cmp	r3, r2
 8007662:	bfb8      	it	lt
 8007664:	4613      	movlt	r3, r2
 8007666:	6033      	str	r3, [r6, #0]
 8007668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800766c:	4607      	mov	r7, r0
 800766e:	460c      	mov	r4, r1
 8007670:	b10a      	cbz	r2, 8007676 <_printf_common+0x26>
 8007672:	3301      	adds	r3, #1
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	0699      	lsls	r1, r3, #26
 800767a:	bf42      	ittt	mi
 800767c:	6833      	ldrmi	r3, [r6, #0]
 800767e:	3302      	addmi	r3, #2
 8007680:	6033      	strmi	r3, [r6, #0]
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	f015 0506 	ands.w	r5, r5, #6
 8007688:	d106      	bne.n	8007698 <_printf_common+0x48>
 800768a:	f104 0a19 	add.w	sl, r4, #25
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	6832      	ldr	r2, [r6, #0]
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	42ab      	cmp	r3, r5
 8007696:	dc26      	bgt.n	80076e6 <_printf_common+0x96>
 8007698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800769c:	1e13      	subs	r3, r2, #0
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	bf18      	it	ne
 80076a2:	2301      	movne	r3, #1
 80076a4:	0692      	lsls	r2, r2, #26
 80076a6:	d42b      	bmi.n	8007700 <_printf_common+0xb0>
 80076a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076ac:	4649      	mov	r1, r9
 80076ae:	4638      	mov	r0, r7
 80076b0:	47c0      	blx	r8
 80076b2:	3001      	adds	r0, #1
 80076b4:	d01e      	beq.n	80076f4 <_printf_common+0xa4>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	68e5      	ldr	r5, [r4, #12]
 80076ba:	6832      	ldr	r2, [r6, #0]
 80076bc:	f003 0306 	and.w	r3, r3, #6
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	bf08      	it	eq
 80076c4:	1aad      	subeq	r5, r5, r2
 80076c6:	68a3      	ldr	r3, [r4, #8]
 80076c8:	6922      	ldr	r2, [r4, #16]
 80076ca:	bf0c      	ite	eq
 80076cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d0:	2500      	movne	r5, #0
 80076d2:	4293      	cmp	r3, r2
 80076d4:	bfc4      	itt	gt
 80076d6:	1a9b      	subgt	r3, r3, r2
 80076d8:	18ed      	addgt	r5, r5, r3
 80076da:	2600      	movs	r6, #0
 80076dc:	341a      	adds	r4, #26
 80076de:	42b5      	cmp	r5, r6
 80076e0:	d11a      	bne.n	8007718 <_printf_common+0xc8>
 80076e2:	2000      	movs	r0, #0
 80076e4:	e008      	b.n	80076f8 <_printf_common+0xa8>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4652      	mov	r2, sl
 80076ea:	4649      	mov	r1, r9
 80076ec:	4638      	mov	r0, r7
 80076ee:	47c0      	blx	r8
 80076f0:	3001      	adds	r0, #1
 80076f2:	d103      	bne.n	80076fc <_printf_common+0xac>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fc:	3501      	adds	r5, #1
 80076fe:	e7c6      	b.n	800768e <_printf_common+0x3e>
 8007700:	18e1      	adds	r1, r4, r3
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	2030      	movs	r0, #48	; 0x30
 8007706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800770a:	4422      	add	r2, r4
 800770c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007714:	3302      	adds	r3, #2
 8007716:	e7c7      	b.n	80076a8 <_printf_common+0x58>
 8007718:	2301      	movs	r3, #1
 800771a:	4622      	mov	r2, r4
 800771c:	4649      	mov	r1, r9
 800771e:	4638      	mov	r0, r7
 8007720:	47c0      	blx	r8
 8007722:	3001      	adds	r0, #1
 8007724:	d0e6      	beq.n	80076f4 <_printf_common+0xa4>
 8007726:	3601      	adds	r6, #1
 8007728:	e7d9      	b.n	80076de <_printf_common+0x8e>
	...

0800772c <_printf_i>:
 800772c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007730:	460c      	mov	r4, r1
 8007732:	4691      	mov	r9, r2
 8007734:	7e27      	ldrb	r7, [r4, #24]
 8007736:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007738:	2f78      	cmp	r7, #120	; 0x78
 800773a:	4680      	mov	r8, r0
 800773c:	469a      	mov	sl, r3
 800773e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007742:	d807      	bhi.n	8007754 <_printf_i+0x28>
 8007744:	2f62      	cmp	r7, #98	; 0x62
 8007746:	d80a      	bhi.n	800775e <_printf_i+0x32>
 8007748:	2f00      	cmp	r7, #0
 800774a:	f000 80d8 	beq.w	80078fe <_printf_i+0x1d2>
 800774e:	2f58      	cmp	r7, #88	; 0x58
 8007750:	f000 80a3 	beq.w	800789a <_printf_i+0x16e>
 8007754:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800775c:	e03a      	b.n	80077d4 <_printf_i+0xa8>
 800775e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007762:	2b15      	cmp	r3, #21
 8007764:	d8f6      	bhi.n	8007754 <_printf_i+0x28>
 8007766:	a001      	add	r0, pc, #4	; (adr r0, 800776c <_printf_i+0x40>)
 8007768:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800776c:	080077c5 	.word	0x080077c5
 8007770:	080077d9 	.word	0x080077d9
 8007774:	08007755 	.word	0x08007755
 8007778:	08007755 	.word	0x08007755
 800777c:	08007755 	.word	0x08007755
 8007780:	08007755 	.word	0x08007755
 8007784:	080077d9 	.word	0x080077d9
 8007788:	08007755 	.word	0x08007755
 800778c:	08007755 	.word	0x08007755
 8007790:	08007755 	.word	0x08007755
 8007794:	08007755 	.word	0x08007755
 8007798:	080078e5 	.word	0x080078e5
 800779c:	08007809 	.word	0x08007809
 80077a0:	080078c7 	.word	0x080078c7
 80077a4:	08007755 	.word	0x08007755
 80077a8:	08007755 	.word	0x08007755
 80077ac:	08007907 	.word	0x08007907
 80077b0:	08007755 	.word	0x08007755
 80077b4:	08007809 	.word	0x08007809
 80077b8:	08007755 	.word	0x08007755
 80077bc:	08007755 	.word	0x08007755
 80077c0:	080078cf 	.word	0x080078cf
 80077c4:	680b      	ldr	r3, [r1, #0]
 80077c6:	1d1a      	adds	r2, r3, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	600a      	str	r2, [r1, #0]
 80077cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0a3      	b.n	8007920 <_printf_i+0x1f4>
 80077d8:	6825      	ldr	r5, [r4, #0]
 80077da:	6808      	ldr	r0, [r1, #0]
 80077dc:	062e      	lsls	r6, r5, #24
 80077de:	f100 0304 	add.w	r3, r0, #4
 80077e2:	d50a      	bpl.n	80077fa <_printf_i+0xce>
 80077e4:	6805      	ldr	r5, [r0, #0]
 80077e6:	600b      	str	r3, [r1, #0]
 80077e8:	2d00      	cmp	r5, #0
 80077ea:	da03      	bge.n	80077f4 <_printf_i+0xc8>
 80077ec:	232d      	movs	r3, #45	; 0x2d
 80077ee:	426d      	negs	r5, r5
 80077f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f4:	485e      	ldr	r0, [pc, #376]	; (8007970 <_printf_i+0x244>)
 80077f6:	230a      	movs	r3, #10
 80077f8:	e019      	b.n	800782e <_printf_i+0x102>
 80077fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80077fe:	6805      	ldr	r5, [r0, #0]
 8007800:	600b      	str	r3, [r1, #0]
 8007802:	bf18      	it	ne
 8007804:	b22d      	sxthne	r5, r5
 8007806:	e7ef      	b.n	80077e8 <_printf_i+0xbc>
 8007808:	680b      	ldr	r3, [r1, #0]
 800780a:	6825      	ldr	r5, [r4, #0]
 800780c:	1d18      	adds	r0, r3, #4
 800780e:	6008      	str	r0, [r1, #0]
 8007810:	0628      	lsls	r0, r5, #24
 8007812:	d501      	bpl.n	8007818 <_printf_i+0xec>
 8007814:	681d      	ldr	r5, [r3, #0]
 8007816:	e002      	b.n	800781e <_printf_i+0xf2>
 8007818:	0669      	lsls	r1, r5, #25
 800781a:	d5fb      	bpl.n	8007814 <_printf_i+0xe8>
 800781c:	881d      	ldrh	r5, [r3, #0]
 800781e:	4854      	ldr	r0, [pc, #336]	; (8007970 <_printf_i+0x244>)
 8007820:	2f6f      	cmp	r7, #111	; 0x6f
 8007822:	bf0c      	ite	eq
 8007824:	2308      	moveq	r3, #8
 8007826:	230a      	movne	r3, #10
 8007828:	2100      	movs	r1, #0
 800782a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800782e:	6866      	ldr	r6, [r4, #4]
 8007830:	60a6      	str	r6, [r4, #8]
 8007832:	2e00      	cmp	r6, #0
 8007834:	bfa2      	ittt	ge
 8007836:	6821      	ldrge	r1, [r4, #0]
 8007838:	f021 0104 	bicge.w	r1, r1, #4
 800783c:	6021      	strge	r1, [r4, #0]
 800783e:	b90d      	cbnz	r5, 8007844 <_printf_i+0x118>
 8007840:	2e00      	cmp	r6, #0
 8007842:	d04d      	beq.n	80078e0 <_printf_i+0x1b4>
 8007844:	4616      	mov	r6, r2
 8007846:	fbb5 f1f3 	udiv	r1, r5, r3
 800784a:	fb03 5711 	mls	r7, r3, r1, r5
 800784e:	5dc7      	ldrb	r7, [r0, r7]
 8007850:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007854:	462f      	mov	r7, r5
 8007856:	42bb      	cmp	r3, r7
 8007858:	460d      	mov	r5, r1
 800785a:	d9f4      	bls.n	8007846 <_printf_i+0x11a>
 800785c:	2b08      	cmp	r3, #8
 800785e:	d10b      	bne.n	8007878 <_printf_i+0x14c>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	07df      	lsls	r7, r3, #31
 8007864:	d508      	bpl.n	8007878 <_printf_i+0x14c>
 8007866:	6923      	ldr	r3, [r4, #16]
 8007868:	6861      	ldr	r1, [r4, #4]
 800786a:	4299      	cmp	r1, r3
 800786c:	bfde      	ittt	le
 800786e:	2330      	movle	r3, #48	; 0x30
 8007870:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007874:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007878:	1b92      	subs	r2, r2, r6
 800787a:	6122      	str	r2, [r4, #16]
 800787c:	f8cd a000 	str.w	sl, [sp]
 8007880:	464b      	mov	r3, r9
 8007882:	aa03      	add	r2, sp, #12
 8007884:	4621      	mov	r1, r4
 8007886:	4640      	mov	r0, r8
 8007888:	f7ff fee2 	bl	8007650 <_printf_common>
 800788c:	3001      	adds	r0, #1
 800788e:	d14c      	bne.n	800792a <_printf_i+0x1fe>
 8007890:	f04f 30ff 	mov.w	r0, #4294967295
 8007894:	b004      	add	sp, #16
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	4835      	ldr	r0, [pc, #212]	; (8007970 <_printf_i+0x244>)
 800789c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	680e      	ldr	r6, [r1, #0]
 80078a4:	061f      	lsls	r7, r3, #24
 80078a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80078aa:	600e      	str	r6, [r1, #0]
 80078ac:	d514      	bpl.n	80078d8 <_printf_i+0x1ac>
 80078ae:	07d9      	lsls	r1, r3, #31
 80078b0:	bf44      	itt	mi
 80078b2:	f043 0320 	orrmi.w	r3, r3, #32
 80078b6:	6023      	strmi	r3, [r4, #0]
 80078b8:	b91d      	cbnz	r5, 80078c2 <_printf_i+0x196>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	f023 0320 	bic.w	r3, r3, #32
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	2310      	movs	r3, #16
 80078c4:	e7b0      	b.n	8007828 <_printf_i+0xfc>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	f043 0320 	orr.w	r3, r3, #32
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	2378      	movs	r3, #120	; 0x78
 80078d0:	4828      	ldr	r0, [pc, #160]	; (8007974 <_printf_i+0x248>)
 80078d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078d6:	e7e3      	b.n	80078a0 <_printf_i+0x174>
 80078d8:	065e      	lsls	r6, r3, #25
 80078da:	bf48      	it	mi
 80078dc:	b2ad      	uxthmi	r5, r5
 80078de:	e7e6      	b.n	80078ae <_printf_i+0x182>
 80078e0:	4616      	mov	r6, r2
 80078e2:	e7bb      	b.n	800785c <_printf_i+0x130>
 80078e4:	680b      	ldr	r3, [r1, #0]
 80078e6:	6826      	ldr	r6, [r4, #0]
 80078e8:	6960      	ldr	r0, [r4, #20]
 80078ea:	1d1d      	adds	r5, r3, #4
 80078ec:	600d      	str	r5, [r1, #0]
 80078ee:	0635      	lsls	r5, r6, #24
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	d501      	bpl.n	80078f8 <_printf_i+0x1cc>
 80078f4:	6018      	str	r0, [r3, #0]
 80078f6:	e002      	b.n	80078fe <_printf_i+0x1d2>
 80078f8:	0671      	lsls	r1, r6, #25
 80078fa:	d5fb      	bpl.n	80078f4 <_printf_i+0x1c8>
 80078fc:	8018      	strh	r0, [r3, #0]
 80078fe:	2300      	movs	r3, #0
 8007900:	6123      	str	r3, [r4, #16]
 8007902:	4616      	mov	r6, r2
 8007904:	e7ba      	b.n	800787c <_printf_i+0x150>
 8007906:	680b      	ldr	r3, [r1, #0]
 8007908:	1d1a      	adds	r2, r3, #4
 800790a:	600a      	str	r2, [r1, #0]
 800790c:	681e      	ldr	r6, [r3, #0]
 800790e:	6862      	ldr	r2, [r4, #4]
 8007910:	2100      	movs	r1, #0
 8007912:	4630      	mov	r0, r6
 8007914:	f7f8 fc6c 	bl	80001f0 <memchr>
 8007918:	b108      	cbz	r0, 800791e <_printf_i+0x1f2>
 800791a:	1b80      	subs	r0, r0, r6
 800791c:	6060      	str	r0, [r4, #4]
 800791e:	6863      	ldr	r3, [r4, #4]
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	2300      	movs	r3, #0
 8007924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007928:	e7a8      	b.n	800787c <_printf_i+0x150>
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	4632      	mov	r2, r6
 800792e:	4649      	mov	r1, r9
 8007930:	4640      	mov	r0, r8
 8007932:	47d0      	blx	sl
 8007934:	3001      	adds	r0, #1
 8007936:	d0ab      	beq.n	8007890 <_printf_i+0x164>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	079b      	lsls	r3, r3, #30
 800793c:	d413      	bmi.n	8007966 <_printf_i+0x23a>
 800793e:	68e0      	ldr	r0, [r4, #12]
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	4298      	cmp	r0, r3
 8007944:	bfb8      	it	lt
 8007946:	4618      	movlt	r0, r3
 8007948:	e7a4      	b.n	8007894 <_printf_i+0x168>
 800794a:	2301      	movs	r3, #1
 800794c:	4632      	mov	r2, r6
 800794e:	4649      	mov	r1, r9
 8007950:	4640      	mov	r0, r8
 8007952:	47d0      	blx	sl
 8007954:	3001      	adds	r0, #1
 8007956:	d09b      	beq.n	8007890 <_printf_i+0x164>
 8007958:	3501      	adds	r5, #1
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	9903      	ldr	r1, [sp, #12]
 800795e:	1a5b      	subs	r3, r3, r1
 8007960:	42ab      	cmp	r3, r5
 8007962:	dcf2      	bgt.n	800794a <_printf_i+0x21e>
 8007964:	e7eb      	b.n	800793e <_printf_i+0x212>
 8007966:	2500      	movs	r5, #0
 8007968:	f104 0619 	add.w	r6, r4, #25
 800796c:	e7f5      	b.n	800795a <_printf_i+0x22e>
 800796e:	bf00      	nop
 8007970:	0800a25a 	.word	0x0800a25a
 8007974:	0800a26b 	.word	0x0800a26b

08007978 <_sbrk_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4d06      	ldr	r5, [pc, #24]	; (8007994 <_sbrk_r+0x1c>)
 800797c:	2300      	movs	r3, #0
 800797e:	4604      	mov	r4, r0
 8007980:	4608      	mov	r0, r1
 8007982:	602b      	str	r3, [r5, #0]
 8007984:	f7ff fa16 	bl	8006db4 <_sbrk>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d102      	bne.n	8007992 <_sbrk_r+0x1a>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	b103      	cbz	r3, 8007992 <_sbrk_r+0x1a>
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	20004118 	.word	0x20004118

08007998 <sniprintf>:
 8007998:	b40c      	push	{r2, r3}
 800799a:	b530      	push	{r4, r5, lr}
 800799c:	4b17      	ldr	r3, [pc, #92]	; (80079fc <sniprintf+0x64>)
 800799e:	1e0c      	subs	r4, r1, #0
 80079a0:	681d      	ldr	r5, [r3, #0]
 80079a2:	b09d      	sub	sp, #116	; 0x74
 80079a4:	da08      	bge.n	80079b8 <sniprintf+0x20>
 80079a6:	238b      	movs	r3, #139	; 0x8b
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295
 80079ae:	b01d      	add	sp, #116	; 0x74
 80079b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079b4:	b002      	add	sp, #8
 80079b6:	4770      	bx	lr
 80079b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079c0:	bf14      	ite	ne
 80079c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079c6:	4623      	moveq	r3, r4
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	9307      	str	r3, [sp, #28]
 80079cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079d0:	9002      	str	r0, [sp, #8]
 80079d2:	9006      	str	r0, [sp, #24]
 80079d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079da:	ab21      	add	r3, sp, #132	; 0x84
 80079dc:	a902      	add	r1, sp, #8
 80079de:	4628      	mov	r0, r5
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	f001 fa8b 	bl	8008efc <_svfiprintf_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	bfbc      	itt	lt
 80079ea:	238b      	movlt	r3, #139	; 0x8b
 80079ec:	602b      	strlt	r3, [r5, #0]
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	d0dd      	beq.n	80079ae <sniprintf+0x16>
 80079f2:	9b02      	ldr	r3, [sp, #8]
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	e7d9      	b.n	80079ae <sniprintf+0x16>
 80079fa:	bf00      	nop
 80079fc:	20000010 	.word	0x20000010

08007a00 <quorem>:
 8007a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	6903      	ldr	r3, [r0, #16]
 8007a06:	690c      	ldr	r4, [r1, #16]
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	4607      	mov	r7, r0
 8007a0c:	f2c0 8081 	blt.w	8007b12 <quorem+0x112>
 8007a10:	3c01      	subs	r4, #1
 8007a12:	f101 0814 	add.w	r8, r1, #20
 8007a16:	f100 0514 	add.w	r5, r0, #20
 8007a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a34:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a38:	d331      	bcc.n	8007a9e <quorem+0x9e>
 8007a3a:	f04f 0e00 	mov.w	lr, #0
 8007a3e:	4640      	mov	r0, r8
 8007a40:	46ac      	mov	ip, r5
 8007a42:	46f2      	mov	sl, lr
 8007a44:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a48:	b293      	uxth	r3, r2
 8007a4a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	ebaa 0303 	sub.w	r3, sl, r3
 8007a58:	0c12      	lsrs	r2, r2, #16
 8007a5a:	f8dc a000 	ldr.w	sl, [ip]
 8007a5e:	fb06 e202 	mla	r2, r6, r2, lr
 8007a62:	fa13 f38a 	uxtah	r3, r3, sl
 8007a66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a6a:	fa1f fa82 	uxth.w	sl, r2
 8007a6e:	f8dc 2000 	ldr.w	r2, [ip]
 8007a72:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a80:	4581      	cmp	r9, r0
 8007a82:	f84c 3b04 	str.w	r3, [ip], #4
 8007a86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a8a:	d2db      	bcs.n	8007a44 <quorem+0x44>
 8007a8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a90:	b92b      	cbnz	r3, 8007a9e <quorem+0x9e>
 8007a92:	9b01      	ldr	r3, [sp, #4]
 8007a94:	3b04      	subs	r3, #4
 8007a96:	429d      	cmp	r5, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	d32e      	bcc.n	8007afa <quorem+0xfa>
 8007a9c:	613c      	str	r4, [r7, #16]
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f001 f8c2 	bl	8008c28 <__mcmp>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	db24      	blt.n	8007af2 <quorem+0xf2>
 8007aa8:	3601      	adds	r6, #1
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f04f 0c00 	mov.w	ip, #0
 8007ab0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ab4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ab8:	b293      	uxth	r3, r2
 8007aba:	ebac 0303 	sub.w	r3, ip, r3
 8007abe:	0c12      	lsrs	r2, r2, #16
 8007ac0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ac4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ac8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ad2:	45c1      	cmp	r9, r8
 8007ad4:	f840 3b04 	str.w	r3, [r0], #4
 8007ad8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007adc:	d2e8      	bcs.n	8007ab0 <quorem+0xb0>
 8007ade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ae2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ae6:	b922      	cbnz	r2, 8007af2 <quorem+0xf2>
 8007ae8:	3b04      	subs	r3, #4
 8007aea:	429d      	cmp	r5, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	d30a      	bcc.n	8007b06 <quorem+0x106>
 8007af0:	613c      	str	r4, [r7, #16]
 8007af2:	4630      	mov	r0, r6
 8007af4:	b003      	add	sp, #12
 8007af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afa:	6812      	ldr	r2, [r2, #0]
 8007afc:	3b04      	subs	r3, #4
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	d1cc      	bne.n	8007a9c <quorem+0x9c>
 8007b02:	3c01      	subs	r4, #1
 8007b04:	e7c7      	b.n	8007a96 <quorem+0x96>
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	3b04      	subs	r3, #4
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	d1f0      	bne.n	8007af0 <quorem+0xf0>
 8007b0e:	3c01      	subs	r4, #1
 8007b10:	e7eb      	b.n	8007aea <quorem+0xea>
 8007b12:	2000      	movs	r0, #0
 8007b14:	e7ee      	b.n	8007af4 <quorem+0xf4>
	...

08007b18 <_dtoa_r>:
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	ed2d 8b02 	vpush	{d8}
 8007b20:	ec57 6b10 	vmov	r6, r7, d0
 8007b24:	b095      	sub	sp, #84	; 0x54
 8007b26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b2c:	9105      	str	r1, [sp, #20]
 8007b2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b32:	4604      	mov	r4, r0
 8007b34:	9209      	str	r2, [sp, #36]	; 0x24
 8007b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b38:	b975      	cbnz	r5, 8007b58 <_dtoa_r+0x40>
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f7ff f9f0 	bl	8006f20 <malloc>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6260      	str	r0, [r4, #36]	; 0x24
 8007b44:	b920      	cbnz	r0, 8007b50 <_dtoa_r+0x38>
 8007b46:	4bb2      	ldr	r3, [pc, #712]	; (8007e10 <_dtoa_r+0x2f8>)
 8007b48:	21ea      	movs	r1, #234	; 0xea
 8007b4a:	48b2      	ldr	r0, [pc, #712]	; (8007e14 <_dtoa_r+0x2fc>)
 8007b4c:	f001 fad6 	bl	80090fc <__assert_func>
 8007b50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b54:	6005      	str	r5, [r0, #0]
 8007b56:	60c5      	str	r5, [r0, #12]
 8007b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b5a:	6819      	ldr	r1, [r3, #0]
 8007b5c:	b151      	cbz	r1, 8007b74 <_dtoa_r+0x5c>
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	604a      	str	r2, [r1, #4]
 8007b62:	2301      	movs	r3, #1
 8007b64:	4093      	lsls	r3, r2
 8007b66:	608b      	str	r3, [r1, #8]
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fe1f 	bl	80087ac <_Bfree>
 8007b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	1e3b      	subs	r3, r7, #0
 8007b76:	bfb9      	ittee	lt
 8007b78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b7c:	9303      	strlt	r3, [sp, #12]
 8007b7e:	2300      	movge	r3, #0
 8007b80:	f8c8 3000 	strge.w	r3, [r8]
 8007b84:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007b88:	4ba3      	ldr	r3, [pc, #652]	; (8007e18 <_dtoa_r+0x300>)
 8007b8a:	bfbc      	itt	lt
 8007b8c:	2201      	movlt	r2, #1
 8007b8e:	f8c8 2000 	strlt.w	r2, [r8]
 8007b92:	ea33 0309 	bics.w	r3, r3, r9
 8007b96:	d11b      	bne.n	8007bd0 <_dtoa_r+0xb8>
 8007b98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ba4:	4333      	orrs	r3, r6
 8007ba6:	f000 857a 	beq.w	800869e <_dtoa_r+0xb86>
 8007baa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bac:	b963      	cbnz	r3, 8007bc8 <_dtoa_r+0xb0>
 8007bae:	4b9b      	ldr	r3, [pc, #620]	; (8007e1c <_dtoa_r+0x304>)
 8007bb0:	e024      	b.n	8007bfc <_dtoa_r+0xe4>
 8007bb2:	4b9b      	ldr	r3, [pc, #620]	; (8007e20 <_dtoa_r+0x308>)
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	9800      	ldr	r0, [sp, #0]
 8007bbe:	b015      	add	sp, #84	; 0x54
 8007bc0:	ecbd 8b02 	vpop	{d8}
 8007bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc8:	4b94      	ldr	r3, [pc, #592]	; (8007e1c <_dtoa_r+0x304>)
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	3303      	adds	r3, #3
 8007bce:	e7f3      	b.n	8007bb8 <_dtoa_r+0xa0>
 8007bd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	ec51 0b17 	vmov	r0, r1, d7
 8007bda:	2300      	movs	r3, #0
 8007bdc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007be0:	f7f8 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007be4:	4680      	mov	r8, r0
 8007be6:	b158      	cbz	r0, 8007c00 <_dtoa_r+0xe8>
 8007be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bea:	2301      	movs	r3, #1
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 8551 	beq.w	8008698 <_dtoa_r+0xb80>
 8007bf6:	488b      	ldr	r0, [pc, #556]	; (8007e24 <_dtoa_r+0x30c>)
 8007bf8:	6018      	str	r0, [r3, #0]
 8007bfa:	1e43      	subs	r3, r0, #1
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	e7dd      	b.n	8007bbc <_dtoa_r+0xa4>
 8007c00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007c04:	aa12      	add	r2, sp, #72	; 0x48
 8007c06:	a913      	add	r1, sp, #76	; 0x4c
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f001 f8b1 	bl	8008d70 <__d2b>
 8007c0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c12:	4683      	mov	fp, r0
 8007c14:	2d00      	cmp	r5, #0
 8007c16:	d07c      	beq.n	8007d12 <_dtoa_r+0x1fa>
 8007c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007c26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c32:	4b7d      	ldr	r3, [pc, #500]	; (8007e28 <_dtoa_r+0x310>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	4630      	mov	r0, r6
 8007c38:	4639      	mov	r1, r7
 8007c3a:	f7f8 fb2d 	bl	8000298 <__aeabi_dsub>
 8007c3e:	a36e      	add	r3, pc, #440	; (adr r3, 8007df8 <_dtoa_r+0x2e0>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f7f8 fce0 	bl	8000608 <__aeabi_dmul>
 8007c48:	a36d      	add	r3, pc, #436	; (adr r3, 8007e00 <_dtoa_r+0x2e8>)
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f7f8 fb25 	bl	800029c <__adddf3>
 8007c52:	4606      	mov	r6, r0
 8007c54:	4628      	mov	r0, r5
 8007c56:	460f      	mov	r7, r1
 8007c58:	f7f8 fc6c 	bl	8000534 <__aeabi_i2d>
 8007c5c:	a36a      	add	r3, pc, #424	; (adr r3, 8007e08 <_dtoa_r+0x2f0>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 fcd1 	bl	8000608 <__aeabi_dmul>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fb15 	bl	800029c <__adddf3>
 8007c72:	4606      	mov	r6, r0
 8007c74:	460f      	mov	r7, r1
 8007c76:	f7f8 ff77 	bl	8000b68 <__aeabi_d2iz>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4682      	mov	sl, r0
 8007c7e:	2300      	movs	r3, #0
 8007c80:	4630      	mov	r0, r6
 8007c82:	4639      	mov	r1, r7
 8007c84:	f7f8 ff32 	bl	8000aec <__aeabi_dcmplt>
 8007c88:	b148      	cbz	r0, 8007c9e <_dtoa_r+0x186>
 8007c8a:	4650      	mov	r0, sl
 8007c8c:	f7f8 fc52 	bl	8000534 <__aeabi_i2d>
 8007c90:	4632      	mov	r2, r6
 8007c92:	463b      	mov	r3, r7
 8007c94:	f7f8 ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c98:	b908      	cbnz	r0, 8007c9e <_dtoa_r+0x186>
 8007c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c9e:	f1ba 0f16 	cmp.w	sl, #22
 8007ca2:	d854      	bhi.n	8007d4e <_dtoa_r+0x236>
 8007ca4:	4b61      	ldr	r3, [pc, #388]	; (8007e2c <_dtoa_r+0x314>)
 8007ca6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cb2:	f7f8 ff1b 	bl	8000aec <__aeabi_dcmplt>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d04b      	beq.n	8007d52 <_dtoa_r+0x23a>
 8007cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	930e      	str	r3, [sp, #56]	; 0x38
 8007cc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cc4:	1b5d      	subs	r5, r3, r5
 8007cc6:	1e6b      	subs	r3, r5, #1
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	bf43      	ittte	mi
 8007ccc:	2300      	movmi	r3, #0
 8007cce:	f1c5 0801 	rsbmi	r8, r5, #1
 8007cd2:	9304      	strmi	r3, [sp, #16]
 8007cd4:	f04f 0800 	movpl.w	r8, #0
 8007cd8:	f1ba 0f00 	cmp.w	sl, #0
 8007cdc:	db3b      	blt.n	8007d56 <_dtoa_r+0x23e>
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ce4:	4453      	add	r3, sl
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9306      	str	r3, [sp, #24]
 8007cec:	9b05      	ldr	r3, [sp, #20]
 8007cee:	2b09      	cmp	r3, #9
 8007cf0:	d869      	bhi.n	8007dc6 <_dtoa_r+0x2ae>
 8007cf2:	2b05      	cmp	r3, #5
 8007cf4:	bfc4      	itt	gt
 8007cf6:	3b04      	subgt	r3, #4
 8007cf8:	9305      	strgt	r3, [sp, #20]
 8007cfa:	9b05      	ldr	r3, [sp, #20]
 8007cfc:	f1a3 0302 	sub.w	r3, r3, #2
 8007d00:	bfcc      	ite	gt
 8007d02:	2500      	movgt	r5, #0
 8007d04:	2501      	movle	r5, #1
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d869      	bhi.n	8007dde <_dtoa_r+0x2c6>
 8007d0a:	e8df f003 	tbb	[pc, r3]
 8007d0e:	4e2c      	.short	0x4e2c
 8007d10:	5a4c      	.short	0x5a4c
 8007d12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007d16:	441d      	add	r5, r3
 8007d18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	bfc1      	itttt	gt
 8007d20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d28:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d30:	bfda      	itte	le
 8007d32:	f1c3 0320 	rsble	r3, r3, #32
 8007d36:	fa06 f003 	lslle.w	r0, r6, r3
 8007d3a:	4318      	orrgt	r0, r3
 8007d3c:	f7f8 fbea 	bl	8000514 <__aeabi_ui2d>
 8007d40:	2301      	movs	r3, #1
 8007d42:	4606      	mov	r6, r0
 8007d44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d48:	3d01      	subs	r5, #1
 8007d4a:	9310      	str	r3, [sp, #64]	; 0x40
 8007d4c:	e771      	b.n	8007c32 <_dtoa_r+0x11a>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e7b6      	b.n	8007cc0 <_dtoa_r+0x1a8>
 8007d52:	900e      	str	r0, [sp, #56]	; 0x38
 8007d54:	e7b5      	b.n	8007cc2 <_dtoa_r+0x1aa>
 8007d56:	f1ca 0300 	rsb	r3, sl, #0
 8007d5a:	9306      	str	r3, [sp, #24]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	eba8 080a 	sub.w	r8, r8, sl
 8007d62:	930d      	str	r3, [sp, #52]	; 0x34
 8007d64:	e7c2      	b.n	8007cec <_dtoa_r+0x1d4>
 8007d66:	2300      	movs	r3, #0
 8007d68:	9308      	str	r3, [sp, #32]
 8007d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dc39      	bgt.n	8007de4 <_dtoa_r+0x2cc>
 8007d70:	f04f 0901 	mov.w	r9, #1
 8007d74:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d78:	464b      	mov	r3, r9
 8007d7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007d7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d80:	2200      	movs	r2, #0
 8007d82:	6042      	str	r2, [r0, #4]
 8007d84:	2204      	movs	r2, #4
 8007d86:	f102 0614 	add.w	r6, r2, #20
 8007d8a:	429e      	cmp	r6, r3
 8007d8c:	6841      	ldr	r1, [r0, #4]
 8007d8e:	d92f      	bls.n	8007df0 <_dtoa_r+0x2d8>
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 fccb 	bl	800872c <_Balloc>
 8007d96:	9000      	str	r0, [sp, #0]
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d14b      	bne.n	8007e34 <_dtoa_r+0x31c>
 8007d9c:	4b24      	ldr	r3, [pc, #144]	; (8007e30 <_dtoa_r+0x318>)
 8007d9e:	4602      	mov	r2, r0
 8007da0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007da4:	e6d1      	b.n	8007b4a <_dtoa_r+0x32>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e7de      	b.n	8007d68 <_dtoa_r+0x250>
 8007daa:	2300      	movs	r3, #0
 8007dac:	9308      	str	r3, [sp, #32]
 8007dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db0:	eb0a 0903 	add.w	r9, sl, r3
 8007db4:	f109 0301 	add.w	r3, r9, #1
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	bfb8      	it	lt
 8007dbe:	2301      	movlt	r3, #1
 8007dc0:	e7dd      	b.n	8007d7e <_dtoa_r+0x266>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e7f2      	b.n	8007dac <_dtoa_r+0x294>
 8007dc6:	2501      	movs	r5, #1
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	9508      	str	r5, [sp, #32]
 8007dce:	f04f 39ff 	mov.w	r9, #4294967295
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dd8:	2312      	movs	r3, #18
 8007dda:	9209      	str	r2, [sp, #36]	; 0x24
 8007ddc:	e7cf      	b.n	8007d7e <_dtoa_r+0x266>
 8007dde:	2301      	movs	r3, #1
 8007de0:	9308      	str	r3, [sp, #32]
 8007de2:	e7f4      	b.n	8007dce <_dtoa_r+0x2b6>
 8007de4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007de8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dec:	464b      	mov	r3, r9
 8007dee:	e7c6      	b.n	8007d7e <_dtoa_r+0x266>
 8007df0:	3101      	adds	r1, #1
 8007df2:	6041      	str	r1, [r0, #4]
 8007df4:	0052      	lsls	r2, r2, #1
 8007df6:	e7c6      	b.n	8007d86 <_dtoa_r+0x26e>
 8007df8:	636f4361 	.word	0x636f4361
 8007dfc:	3fd287a7 	.word	0x3fd287a7
 8007e00:	8b60c8b3 	.word	0x8b60c8b3
 8007e04:	3fc68a28 	.word	0x3fc68a28
 8007e08:	509f79fb 	.word	0x509f79fb
 8007e0c:	3fd34413 	.word	0x3fd34413
 8007e10:	0800a289 	.word	0x0800a289
 8007e14:	0800a2a0 	.word	0x0800a2a0
 8007e18:	7ff00000 	.word	0x7ff00000
 8007e1c:	0800a285 	.word	0x0800a285
 8007e20:	0800a27c 	.word	0x0800a27c
 8007e24:	0800a259 	.word	0x0800a259
 8007e28:	3ff80000 	.word	0x3ff80000
 8007e2c:	0800a398 	.word	0x0800a398
 8007e30:	0800a2ff 	.word	0x0800a2ff
 8007e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e36:	9a00      	ldr	r2, [sp, #0]
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	2b0e      	cmp	r3, #14
 8007e3e:	f200 80ad 	bhi.w	8007f9c <_dtoa_r+0x484>
 8007e42:	2d00      	cmp	r5, #0
 8007e44:	f000 80aa 	beq.w	8007f9c <_dtoa_r+0x484>
 8007e48:	f1ba 0f00 	cmp.w	sl, #0
 8007e4c:	dd36      	ble.n	8007ebc <_dtoa_r+0x3a4>
 8007e4e:	4ac3      	ldr	r2, [pc, #780]	; (800815c <_dtoa_r+0x644>)
 8007e50:	f00a 030f 	and.w	r3, sl, #15
 8007e54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e58:	ed93 7b00 	vldr	d7, [r3]
 8007e5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007e64:	eeb0 8a47 	vmov.f32	s16, s14
 8007e68:	eef0 8a67 	vmov.f32	s17, s15
 8007e6c:	d016      	beq.n	8007e9c <_dtoa_r+0x384>
 8007e6e:	4bbc      	ldr	r3, [pc, #752]	; (8008160 <_dtoa_r+0x648>)
 8007e70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e78:	f7f8 fcf0 	bl	800085c <__aeabi_ddiv>
 8007e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e80:	f007 070f 	and.w	r7, r7, #15
 8007e84:	2503      	movs	r5, #3
 8007e86:	4eb6      	ldr	r6, [pc, #728]	; (8008160 <_dtoa_r+0x648>)
 8007e88:	b957      	cbnz	r7, 8007ea0 <_dtoa_r+0x388>
 8007e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8e:	ec53 2b18 	vmov	r2, r3, d8
 8007e92:	f7f8 fce3 	bl	800085c <__aeabi_ddiv>
 8007e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e9a:	e029      	b.n	8007ef0 <_dtoa_r+0x3d8>
 8007e9c:	2502      	movs	r5, #2
 8007e9e:	e7f2      	b.n	8007e86 <_dtoa_r+0x36e>
 8007ea0:	07f9      	lsls	r1, r7, #31
 8007ea2:	d508      	bpl.n	8007eb6 <_dtoa_r+0x39e>
 8007ea4:	ec51 0b18 	vmov	r0, r1, d8
 8007ea8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007eac:	f7f8 fbac 	bl	8000608 <__aeabi_dmul>
 8007eb0:	ec41 0b18 	vmov	d8, r0, r1
 8007eb4:	3501      	adds	r5, #1
 8007eb6:	107f      	asrs	r7, r7, #1
 8007eb8:	3608      	adds	r6, #8
 8007eba:	e7e5      	b.n	8007e88 <_dtoa_r+0x370>
 8007ebc:	f000 80a6 	beq.w	800800c <_dtoa_r+0x4f4>
 8007ec0:	f1ca 0600 	rsb	r6, sl, #0
 8007ec4:	4ba5      	ldr	r3, [pc, #660]	; (800815c <_dtoa_r+0x644>)
 8007ec6:	4fa6      	ldr	r7, [pc, #664]	; (8008160 <_dtoa_r+0x648>)
 8007ec8:	f006 020f 	and.w	r2, r6, #15
 8007ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ed8:	f7f8 fb96 	bl	8000608 <__aeabi_dmul>
 8007edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee0:	1136      	asrs	r6, r6, #4
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2502      	movs	r5, #2
 8007ee6:	2e00      	cmp	r6, #0
 8007ee8:	f040 8085 	bne.w	8007ff6 <_dtoa_r+0x4de>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1d2      	bne.n	8007e96 <_dtoa_r+0x37e>
 8007ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 808c 	beq.w	8008010 <_dtoa_r+0x4f8>
 8007ef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007efc:	4b99      	ldr	r3, [pc, #612]	; (8008164 <_dtoa_r+0x64c>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	4630      	mov	r0, r6
 8007f02:	4639      	mov	r1, r7
 8007f04:	f7f8 fdf2 	bl	8000aec <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f000 8081 	beq.w	8008010 <_dtoa_r+0x4f8>
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d07d      	beq.n	8008010 <_dtoa_r+0x4f8>
 8007f14:	f1b9 0f00 	cmp.w	r9, #0
 8007f18:	dd3c      	ble.n	8007f94 <_dtoa_r+0x47c>
 8007f1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	2200      	movs	r2, #0
 8007f22:	4b91      	ldr	r3, [pc, #580]	; (8008168 <_dtoa_r+0x650>)
 8007f24:	4630      	mov	r0, r6
 8007f26:	4639      	mov	r1, r7
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f30:	3501      	adds	r5, #1
 8007f32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007f36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f7f8 fafa 	bl	8000534 <__aeabi_i2d>
 8007f40:	4632      	mov	r2, r6
 8007f42:	463b      	mov	r3, r7
 8007f44:	f7f8 fb60 	bl	8000608 <__aeabi_dmul>
 8007f48:	4b88      	ldr	r3, [pc, #544]	; (800816c <_dtoa_r+0x654>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f7f8 f9a6 	bl	800029c <__adddf3>
 8007f50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f58:	9303      	str	r3, [sp, #12]
 8007f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d15c      	bne.n	800801a <_dtoa_r+0x502>
 8007f60:	4b83      	ldr	r3, [pc, #524]	; (8008170 <_dtoa_r+0x658>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	f7f8 f996 	bl	8000298 <__aeabi_dsub>
 8007f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f70:	4606      	mov	r6, r0
 8007f72:	460f      	mov	r7, r1
 8007f74:	f7f8 fdd8 	bl	8000b28 <__aeabi_dcmpgt>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	f040 8296 	bne.w	80084aa <_dtoa_r+0x992>
 8007f7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f82:	4630      	mov	r0, r6
 8007f84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f88:	4639      	mov	r1, r7
 8007f8a:	f7f8 fdaf 	bl	8000aec <__aeabi_dcmplt>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	f040 8288 	bne.w	80084a4 <_dtoa_r+0x98c>
 8007f94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f2c0 8158 	blt.w	8008254 <_dtoa_r+0x73c>
 8007fa4:	f1ba 0f0e 	cmp.w	sl, #14
 8007fa8:	f300 8154 	bgt.w	8008254 <_dtoa_r+0x73c>
 8007fac:	4b6b      	ldr	r3, [pc, #428]	; (800815c <_dtoa_r+0x644>)
 8007fae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f280 80e3 	bge.w	8008184 <_dtoa_r+0x66c>
 8007fbe:	9b01      	ldr	r3, [sp, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f300 80df 	bgt.w	8008184 <_dtoa_r+0x66c>
 8007fc6:	f040 826d 	bne.w	80084a4 <_dtoa_r+0x98c>
 8007fca:	4b69      	ldr	r3, [pc, #420]	; (8008170 <_dtoa_r+0x658>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4640      	mov	r0, r8
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	f7f8 fb19 	bl	8000608 <__aeabi_dmul>
 8007fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fda:	f7f8 fd9b 	bl	8000b14 <__aeabi_dcmpge>
 8007fde:	9e01      	ldr	r6, [sp, #4]
 8007fe0:	4637      	mov	r7, r6
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	f040 8243 	bne.w	800846e <_dtoa_r+0x956>
 8007fe8:	9d00      	ldr	r5, [sp, #0]
 8007fea:	2331      	movs	r3, #49	; 0x31
 8007fec:	f805 3b01 	strb.w	r3, [r5], #1
 8007ff0:	f10a 0a01 	add.w	sl, sl, #1
 8007ff4:	e23f      	b.n	8008476 <_dtoa_r+0x95e>
 8007ff6:	07f2      	lsls	r2, r6, #31
 8007ff8:	d505      	bpl.n	8008006 <_dtoa_r+0x4ee>
 8007ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ffe:	f7f8 fb03 	bl	8000608 <__aeabi_dmul>
 8008002:	3501      	adds	r5, #1
 8008004:	2301      	movs	r3, #1
 8008006:	1076      	asrs	r6, r6, #1
 8008008:	3708      	adds	r7, #8
 800800a:	e76c      	b.n	8007ee6 <_dtoa_r+0x3ce>
 800800c:	2502      	movs	r5, #2
 800800e:	e76f      	b.n	8007ef0 <_dtoa_r+0x3d8>
 8008010:	9b01      	ldr	r3, [sp, #4]
 8008012:	f8cd a01c 	str.w	sl, [sp, #28]
 8008016:	930c      	str	r3, [sp, #48]	; 0x30
 8008018:	e78d      	b.n	8007f36 <_dtoa_r+0x41e>
 800801a:	9900      	ldr	r1, [sp, #0]
 800801c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800801e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008020:	4b4e      	ldr	r3, [pc, #312]	; (800815c <_dtoa_r+0x644>)
 8008022:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008026:	4401      	add	r1, r0
 8008028:	9102      	str	r1, [sp, #8]
 800802a:	9908      	ldr	r1, [sp, #32]
 800802c:	eeb0 8a47 	vmov.f32	s16, s14
 8008030:	eef0 8a67 	vmov.f32	s17, s15
 8008034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008038:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800803c:	2900      	cmp	r1, #0
 800803e:	d045      	beq.n	80080cc <_dtoa_r+0x5b4>
 8008040:	494c      	ldr	r1, [pc, #304]	; (8008174 <_dtoa_r+0x65c>)
 8008042:	2000      	movs	r0, #0
 8008044:	f7f8 fc0a 	bl	800085c <__aeabi_ddiv>
 8008048:	ec53 2b18 	vmov	r2, r3, d8
 800804c:	f7f8 f924 	bl	8000298 <__aeabi_dsub>
 8008050:	9d00      	ldr	r5, [sp, #0]
 8008052:	ec41 0b18 	vmov	d8, r0, r1
 8008056:	4639      	mov	r1, r7
 8008058:	4630      	mov	r0, r6
 800805a:	f7f8 fd85 	bl	8000b68 <__aeabi_d2iz>
 800805e:	900c      	str	r0, [sp, #48]	; 0x30
 8008060:	f7f8 fa68 	bl	8000534 <__aeabi_i2d>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4630      	mov	r0, r6
 800806a:	4639      	mov	r1, r7
 800806c:	f7f8 f914 	bl	8000298 <__aeabi_dsub>
 8008070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008072:	3330      	adds	r3, #48	; 0x30
 8008074:	f805 3b01 	strb.w	r3, [r5], #1
 8008078:	ec53 2b18 	vmov	r2, r3, d8
 800807c:	4606      	mov	r6, r0
 800807e:	460f      	mov	r7, r1
 8008080:	f7f8 fd34 	bl	8000aec <__aeabi_dcmplt>
 8008084:	2800      	cmp	r0, #0
 8008086:	d165      	bne.n	8008154 <_dtoa_r+0x63c>
 8008088:	4632      	mov	r2, r6
 800808a:	463b      	mov	r3, r7
 800808c:	4935      	ldr	r1, [pc, #212]	; (8008164 <_dtoa_r+0x64c>)
 800808e:	2000      	movs	r0, #0
 8008090:	f7f8 f902 	bl	8000298 <__aeabi_dsub>
 8008094:	ec53 2b18 	vmov	r2, r3, d8
 8008098:	f7f8 fd28 	bl	8000aec <__aeabi_dcmplt>
 800809c:	2800      	cmp	r0, #0
 800809e:	f040 80b9 	bne.w	8008214 <_dtoa_r+0x6fc>
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	429d      	cmp	r5, r3
 80080a6:	f43f af75 	beq.w	8007f94 <_dtoa_r+0x47c>
 80080aa:	4b2f      	ldr	r3, [pc, #188]	; (8008168 <_dtoa_r+0x650>)
 80080ac:	ec51 0b18 	vmov	r0, r1, d8
 80080b0:	2200      	movs	r2, #0
 80080b2:	f7f8 faa9 	bl	8000608 <__aeabi_dmul>
 80080b6:	4b2c      	ldr	r3, [pc, #176]	; (8008168 <_dtoa_r+0x650>)
 80080b8:	ec41 0b18 	vmov	d8, r0, r1
 80080bc:	2200      	movs	r2, #0
 80080be:	4630      	mov	r0, r6
 80080c0:	4639      	mov	r1, r7
 80080c2:	f7f8 faa1 	bl	8000608 <__aeabi_dmul>
 80080c6:	4606      	mov	r6, r0
 80080c8:	460f      	mov	r7, r1
 80080ca:	e7c4      	b.n	8008056 <_dtoa_r+0x53e>
 80080cc:	ec51 0b17 	vmov	r0, r1, d7
 80080d0:	f7f8 fa9a 	bl	8000608 <__aeabi_dmul>
 80080d4:	9b02      	ldr	r3, [sp, #8]
 80080d6:	9d00      	ldr	r5, [sp, #0]
 80080d8:	930c      	str	r3, [sp, #48]	; 0x30
 80080da:	ec41 0b18 	vmov	d8, r0, r1
 80080de:	4639      	mov	r1, r7
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7f8 fd41 	bl	8000b68 <__aeabi_d2iz>
 80080e6:	9011      	str	r0, [sp, #68]	; 0x44
 80080e8:	f7f8 fa24 	bl	8000534 <__aeabi_i2d>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 f8d0 	bl	8000298 <__aeabi_dsub>
 80080f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080fa:	3330      	adds	r3, #48	; 0x30
 80080fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008100:	9b02      	ldr	r3, [sp, #8]
 8008102:	429d      	cmp	r5, r3
 8008104:	4606      	mov	r6, r0
 8008106:	460f      	mov	r7, r1
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	d134      	bne.n	8008178 <_dtoa_r+0x660>
 800810e:	4b19      	ldr	r3, [pc, #100]	; (8008174 <_dtoa_r+0x65c>)
 8008110:	ec51 0b18 	vmov	r0, r1, d8
 8008114:	f7f8 f8c2 	bl	800029c <__adddf3>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4630      	mov	r0, r6
 800811e:	4639      	mov	r1, r7
 8008120:	f7f8 fd02 	bl	8000b28 <__aeabi_dcmpgt>
 8008124:	2800      	cmp	r0, #0
 8008126:	d175      	bne.n	8008214 <_dtoa_r+0x6fc>
 8008128:	ec53 2b18 	vmov	r2, r3, d8
 800812c:	4911      	ldr	r1, [pc, #68]	; (8008174 <_dtoa_r+0x65c>)
 800812e:	2000      	movs	r0, #0
 8008130:	f7f8 f8b2 	bl	8000298 <__aeabi_dsub>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 fcd6 	bl	8000aec <__aeabi_dcmplt>
 8008140:	2800      	cmp	r0, #0
 8008142:	f43f af27 	beq.w	8007f94 <_dtoa_r+0x47c>
 8008146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008148:	1e6b      	subs	r3, r5, #1
 800814a:	930c      	str	r3, [sp, #48]	; 0x30
 800814c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008150:	2b30      	cmp	r3, #48	; 0x30
 8008152:	d0f8      	beq.n	8008146 <_dtoa_r+0x62e>
 8008154:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008158:	e04a      	b.n	80081f0 <_dtoa_r+0x6d8>
 800815a:	bf00      	nop
 800815c:	0800a398 	.word	0x0800a398
 8008160:	0800a370 	.word	0x0800a370
 8008164:	3ff00000 	.word	0x3ff00000
 8008168:	40240000 	.word	0x40240000
 800816c:	401c0000 	.word	0x401c0000
 8008170:	40140000 	.word	0x40140000
 8008174:	3fe00000 	.word	0x3fe00000
 8008178:	4baf      	ldr	r3, [pc, #700]	; (8008438 <_dtoa_r+0x920>)
 800817a:	f7f8 fa45 	bl	8000608 <__aeabi_dmul>
 800817e:	4606      	mov	r6, r0
 8008180:	460f      	mov	r7, r1
 8008182:	e7ac      	b.n	80080de <_dtoa_r+0x5c6>
 8008184:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008188:	9d00      	ldr	r5, [sp, #0]
 800818a:	4642      	mov	r2, r8
 800818c:	464b      	mov	r3, r9
 800818e:	4630      	mov	r0, r6
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 fb63 	bl	800085c <__aeabi_ddiv>
 8008196:	f7f8 fce7 	bl	8000b68 <__aeabi_d2iz>
 800819a:	9002      	str	r0, [sp, #8]
 800819c:	f7f8 f9ca 	bl	8000534 <__aeabi_i2d>
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	f7f8 fa30 	bl	8000608 <__aeabi_dmul>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4630      	mov	r0, r6
 80081ae:	4639      	mov	r1, r7
 80081b0:	f7f8 f872 	bl	8000298 <__aeabi_dsub>
 80081b4:	9e02      	ldr	r6, [sp, #8]
 80081b6:	9f01      	ldr	r7, [sp, #4]
 80081b8:	3630      	adds	r6, #48	; 0x30
 80081ba:	f805 6b01 	strb.w	r6, [r5], #1
 80081be:	9e00      	ldr	r6, [sp, #0]
 80081c0:	1bae      	subs	r6, r5, r6
 80081c2:	42b7      	cmp	r7, r6
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	d137      	bne.n	800823a <_dtoa_r+0x722>
 80081ca:	f7f8 f867 	bl	800029c <__adddf3>
 80081ce:	4642      	mov	r2, r8
 80081d0:	464b      	mov	r3, r9
 80081d2:	4606      	mov	r6, r0
 80081d4:	460f      	mov	r7, r1
 80081d6:	f7f8 fca7 	bl	8000b28 <__aeabi_dcmpgt>
 80081da:	b9c8      	cbnz	r0, 8008210 <_dtoa_r+0x6f8>
 80081dc:	4642      	mov	r2, r8
 80081de:	464b      	mov	r3, r9
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	f7f8 fc78 	bl	8000ad8 <__aeabi_dcmpeq>
 80081e8:	b110      	cbz	r0, 80081f0 <_dtoa_r+0x6d8>
 80081ea:	9b02      	ldr	r3, [sp, #8]
 80081ec:	07d9      	lsls	r1, r3, #31
 80081ee:	d40f      	bmi.n	8008210 <_dtoa_r+0x6f8>
 80081f0:	4620      	mov	r0, r4
 80081f2:	4659      	mov	r1, fp
 80081f4:	f000 fada 	bl	80087ac <_Bfree>
 80081f8:	2300      	movs	r3, #0
 80081fa:	702b      	strb	r3, [r5, #0]
 80081fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081fe:	f10a 0001 	add.w	r0, sl, #1
 8008202:	6018      	str	r0, [r3, #0]
 8008204:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008206:	2b00      	cmp	r3, #0
 8008208:	f43f acd8 	beq.w	8007bbc <_dtoa_r+0xa4>
 800820c:	601d      	str	r5, [r3, #0]
 800820e:	e4d5      	b.n	8007bbc <_dtoa_r+0xa4>
 8008210:	f8cd a01c 	str.w	sl, [sp, #28]
 8008214:	462b      	mov	r3, r5
 8008216:	461d      	mov	r5, r3
 8008218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800821c:	2a39      	cmp	r2, #57	; 0x39
 800821e:	d108      	bne.n	8008232 <_dtoa_r+0x71a>
 8008220:	9a00      	ldr	r2, [sp, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d1f7      	bne.n	8008216 <_dtoa_r+0x6fe>
 8008226:	9a07      	ldr	r2, [sp, #28]
 8008228:	9900      	ldr	r1, [sp, #0]
 800822a:	3201      	adds	r2, #1
 800822c:	9207      	str	r2, [sp, #28]
 800822e:	2230      	movs	r2, #48	; 0x30
 8008230:	700a      	strb	r2, [r1, #0]
 8008232:	781a      	ldrb	r2, [r3, #0]
 8008234:	3201      	adds	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	e78c      	b.n	8008154 <_dtoa_r+0x63c>
 800823a:	4b7f      	ldr	r3, [pc, #508]	; (8008438 <_dtoa_r+0x920>)
 800823c:	2200      	movs	r2, #0
 800823e:	f7f8 f9e3 	bl	8000608 <__aeabi_dmul>
 8008242:	2200      	movs	r2, #0
 8008244:	2300      	movs	r3, #0
 8008246:	4606      	mov	r6, r0
 8008248:	460f      	mov	r7, r1
 800824a:	f7f8 fc45 	bl	8000ad8 <__aeabi_dcmpeq>
 800824e:	2800      	cmp	r0, #0
 8008250:	d09b      	beq.n	800818a <_dtoa_r+0x672>
 8008252:	e7cd      	b.n	80081f0 <_dtoa_r+0x6d8>
 8008254:	9a08      	ldr	r2, [sp, #32]
 8008256:	2a00      	cmp	r2, #0
 8008258:	f000 80c4 	beq.w	80083e4 <_dtoa_r+0x8cc>
 800825c:	9a05      	ldr	r2, [sp, #20]
 800825e:	2a01      	cmp	r2, #1
 8008260:	f300 80a8 	bgt.w	80083b4 <_dtoa_r+0x89c>
 8008264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008266:	2a00      	cmp	r2, #0
 8008268:	f000 80a0 	beq.w	80083ac <_dtoa_r+0x894>
 800826c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008270:	9e06      	ldr	r6, [sp, #24]
 8008272:	4645      	mov	r5, r8
 8008274:	9a04      	ldr	r2, [sp, #16]
 8008276:	2101      	movs	r1, #1
 8008278:	441a      	add	r2, r3
 800827a:	4620      	mov	r0, r4
 800827c:	4498      	add	r8, r3
 800827e:	9204      	str	r2, [sp, #16]
 8008280:	f000 fb50 	bl	8008924 <__i2b>
 8008284:	4607      	mov	r7, r0
 8008286:	2d00      	cmp	r5, #0
 8008288:	dd0b      	ble.n	80082a2 <_dtoa_r+0x78a>
 800828a:	9b04      	ldr	r3, [sp, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	dd08      	ble.n	80082a2 <_dtoa_r+0x78a>
 8008290:	42ab      	cmp	r3, r5
 8008292:	9a04      	ldr	r2, [sp, #16]
 8008294:	bfa8      	it	ge
 8008296:	462b      	movge	r3, r5
 8008298:	eba8 0803 	sub.w	r8, r8, r3
 800829c:	1aed      	subs	r5, r5, r3
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	9304      	str	r3, [sp, #16]
 80082a2:	9b06      	ldr	r3, [sp, #24]
 80082a4:	b1fb      	cbz	r3, 80082e6 <_dtoa_r+0x7ce>
 80082a6:	9b08      	ldr	r3, [sp, #32]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 809f 	beq.w	80083ec <_dtoa_r+0x8d4>
 80082ae:	2e00      	cmp	r6, #0
 80082b0:	dd11      	ble.n	80082d6 <_dtoa_r+0x7be>
 80082b2:	4639      	mov	r1, r7
 80082b4:	4632      	mov	r2, r6
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 fbf0 	bl	8008a9c <__pow5mult>
 80082bc:	465a      	mov	r2, fp
 80082be:	4601      	mov	r1, r0
 80082c0:	4607      	mov	r7, r0
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 fb44 	bl	8008950 <__multiply>
 80082c8:	4659      	mov	r1, fp
 80082ca:	9007      	str	r0, [sp, #28]
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 fa6d 	bl	80087ac <_Bfree>
 80082d2:	9b07      	ldr	r3, [sp, #28]
 80082d4:	469b      	mov	fp, r3
 80082d6:	9b06      	ldr	r3, [sp, #24]
 80082d8:	1b9a      	subs	r2, r3, r6
 80082da:	d004      	beq.n	80082e6 <_dtoa_r+0x7ce>
 80082dc:	4659      	mov	r1, fp
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 fbdc 	bl	8008a9c <__pow5mult>
 80082e4:	4683      	mov	fp, r0
 80082e6:	2101      	movs	r1, #1
 80082e8:	4620      	mov	r0, r4
 80082ea:	f000 fb1b 	bl	8008924 <__i2b>
 80082ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	4606      	mov	r6, r0
 80082f4:	dd7c      	ble.n	80083f0 <_dtoa_r+0x8d8>
 80082f6:	461a      	mov	r2, r3
 80082f8:	4601      	mov	r1, r0
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fbce 	bl	8008a9c <__pow5mult>
 8008300:	9b05      	ldr	r3, [sp, #20]
 8008302:	2b01      	cmp	r3, #1
 8008304:	4606      	mov	r6, r0
 8008306:	dd76      	ble.n	80083f6 <_dtoa_r+0x8de>
 8008308:	2300      	movs	r3, #0
 800830a:	9306      	str	r3, [sp, #24]
 800830c:	6933      	ldr	r3, [r6, #16]
 800830e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008312:	6918      	ldr	r0, [r3, #16]
 8008314:	f000 fab6 	bl	8008884 <__hi0bits>
 8008318:	f1c0 0020 	rsb	r0, r0, #32
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	4418      	add	r0, r3
 8008320:	f010 001f 	ands.w	r0, r0, #31
 8008324:	f000 8086 	beq.w	8008434 <_dtoa_r+0x91c>
 8008328:	f1c0 0320 	rsb	r3, r0, #32
 800832c:	2b04      	cmp	r3, #4
 800832e:	dd7f      	ble.n	8008430 <_dtoa_r+0x918>
 8008330:	f1c0 001c 	rsb	r0, r0, #28
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	4403      	add	r3, r0
 8008338:	4480      	add	r8, r0
 800833a:	4405      	add	r5, r0
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	f1b8 0f00 	cmp.w	r8, #0
 8008342:	dd05      	ble.n	8008350 <_dtoa_r+0x838>
 8008344:	4659      	mov	r1, fp
 8008346:	4642      	mov	r2, r8
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fc01 	bl	8008b50 <__lshift>
 800834e:	4683      	mov	fp, r0
 8008350:	9b04      	ldr	r3, [sp, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd05      	ble.n	8008362 <_dtoa_r+0x84a>
 8008356:	4631      	mov	r1, r6
 8008358:	461a      	mov	r2, r3
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fbf8 	bl	8008b50 <__lshift>
 8008360:	4606      	mov	r6, r0
 8008362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008364:	2b00      	cmp	r3, #0
 8008366:	d069      	beq.n	800843c <_dtoa_r+0x924>
 8008368:	4631      	mov	r1, r6
 800836a:	4658      	mov	r0, fp
 800836c:	f000 fc5c 	bl	8008c28 <__mcmp>
 8008370:	2800      	cmp	r0, #0
 8008372:	da63      	bge.n	800843c <_dtoa_r+0x924>
 8008374:	2300      	movs	r3, #0
 8008376:	4659      	mov	r1, fp
 8008378:	220a      	movs	r2, #10
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fa38 	bl	80087f0 <__multadd>
 8008380:	9b08      	ldr	r3, [sp, #32]
 8008382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008386:	4683      	mov	fp, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 818f 	beq.w	80086ac <_dtoa_r+0xb94>
 800838e:	4639      	mov	r1, r7
 8008390:	2300      	movs	r3, #0
 8008392:	220a      	movs	r2, #10
 8008394:	4620      	mov	r0, r4
 8008396:	f000 fa2b 	bl	80087f0 <__multadd>
 800839a:	f1b9 0f00 	cmp.w	r9, #0
 800839e:	4607      	mov	r7, r0
 80083a0:	f300 808e 	bgt.w	80084c0 <_dtoa_r+0x9a8>
 80083a4:	9b05      	ldr	r3, [sp, #20]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	dc50      	bgt.n	800844c <_dtoa_r+0x934>
 80083aa:	e089      	b.n	80084c0 <_dtoa_r+0x9a8>
 80083ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083b2:	e75d      	b.n	8008270 <_dtoa_r+0x758>
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	1e5e      	subs	r6, r3, #1
 80083b8:	9b06      	ldr	r3, [sp, #24]
 80083ba:	42b3      	cmp	r3, r6
 80083bc:	bfbf      	itttt	lt
 80083be:	9b06      	ldrlt	r3, [sp, #24]
 80083c0:	9606      	strlt	r6, [sp, #24]
 80083c2:	1af2      	sublt	r2, r6, r3
 80083c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80083c6:	bfb6      	itet	lt
 80083c8:	189b      	addlt	r3, r3, r2
 80083ca:	1b9e      	subge	r6, r3, r6
 80083cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80083ce:	9b01      	ldr	r3, [sp, #4]
 80083d0:	bfb8      	it	lt
 80083d2:	2600      	movlt	r6, #0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfb5      	itete	lt
 80083d8:	eba8 0503 	sublt.w	r5, r8, r3
 80083dc:	9b01      	ldrge	r3, [sp, #4]
 80083de:	2300      	movlt	r3, #0
 80083e0:	4645      	movge	r5, r8
 80083e2:	e747      	b.n	8008274 <_dtoa_r+0x75c>
 80083e4:	9e06      	ldr	r6, [sp, #24]
 80083e6:	9f08      	ldr	r7, [sp, #32]
 80083e8:	4645      	mov	r5, r8
 80083ea:	e74c      	b.n	8008286 <_dtoa_r+0x76e>
 80083ec:	9a06      	ldr	r2, [sp, #24]
 80083ee:	e775      	b.n	80082dc <_dtoa_r+0x7c4>
 80083f0:	9b05      	ldr	r3, [sp, #20]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	dc18      	bgt.n	8008428 <_dtoa_r+0x910>
 80083f6:	9b02      	ldr	r3, [sp, #8]
 80083f8:	b9b3      	cbnz	r3, 8008428 <_dtoa_r+0x910>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008400:	b9a3      	cbnz	r3, 800842c <_dtoa_r+0x914>
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008408:	0d1b      	lsrs	r3, r3, #20
 800840a:	051b      	lsls	r3, r3, #20
 800840c:	b12b      	cbz	r3, 800841a <_dtoa_r+0x902>
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	3301      	adds	r3, #1
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	f108 0801 	add.w	r8, r8, #1
 8008418:	2301      	movs	r3, #1
 800841a:	9306      	str	r3, [sp, #24]
 800841c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800841e:	2b00      	cmp	r3, #0
 8008420:	f47f af74 	bne.w	800830c <_dtoa_r+0x7f4>
 8008424:	2001      	movs	r0, #1
 8008426:	e779      	b.n	800831c <_dtoa_r+0x804>
 8008428:	2300      	movs	r3, #0
 800842a:	e7f6      	b.n	800841a <_dtoa_r+0x902>
 800842c:	9b02      	ldr	r3, [sp, #8]
 800842e:	e7f4      	b.n	800841a <_dtoa_r+0x902>
 8008430:	d085      	beq.n	800833e <_dtoa_r+0x826>
 8008432:	4618      	mov	r0, r3
 8008434:	301c      	adds	r0, #28
 8008436:	e77d      	b.n	8008334 <_dtoa_r+0x81c>
 8008438:	40240000 	.word	0x40240000
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	dc38      	bgt.n	80084b4 <_dtoa_r+0x99c>
 8008442:	9b05      	ldr	r3, [sp, #20]
 8008444:	2b02      	cmp	r3, #2
 8008446:	dd35      	ble.n	80084b4 <_dtoa_r+0x99c>
 8008448:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800844c:	f1b9 0f00 	cmp.w	r9, #0
 8008450:	d10d      	bne.n	800846e <_dtoa_r+0x956>
 8008452:	4631      	mov	r1, r6
 8008454:	464b      	mov	r3, r9
 8008456:	2205      	movs	r2, #5
 8008458:	4620      	mov	r0, r4
 800845a:	f000 f9c9 	bl	80087f0 <__multadd>
 800845e:	4601      	mov	r1, r0
 8008460:	4606      	mov	r6, r0
 8008462:	4658      	mov	r0, fp
 8008464:	f000 fbe0 	bl	8008c28 <__mcmp>
 8008468:	2800      	cmp	r0, #0
 800846a:	f73f adbd 	bgt.w	8007fe8 <_dtoa_r+0x4d0>
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	9d00      	ldr	r5, [sp, #0]
 8008472:	ea6f 0a03 	mvn.w	sl, r3
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	4631      	mov	r1, r6
 800847c:	4620      	mov	r0, r4
 800847e:	f000 f995 	bl	80087ac <_Bfree>
 8008482:	2f00      	cmp	r7, #0
 8008484:	f43f aeb4 	beq.w	80081f0 <_dtoa_r+0x6d8>
 8008488:	f1b8 0f00 	cmp.w	r8, #0
 800848c:	d005      	beq.n	800849a <_dtoa_r+0x982>
 800848e:	45b8      	cmp	r8, r7
 8008490:	d003      	beq.n	800849a <_dtoa_r+0x982>
 8008492:	4641      	mov	r1, r8
 8008494:	4620      	mov	r0, r4
 8008496:	f000 f989 	bl	80087ac <_Bfree>
 800849a:	4639      	mov	r1, r7
 800849c:	4620      	mov	r0, r4
 800849e:	f000 f985 	bl	80087ac <_Bfree>
 80084a2:	e6a5      	b.n	80081f0 <_dtoa_r+0x6d8>
 80084a4:	2600      	movs	r6, #0
 80084a6:	4637      	mov	r7, r6
 80084a8:	e7e1      	b.n	800846e <_dtoa_r+0x956>
 80084aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80084ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80084b0:	4637      	mov	r7, r6
 80084b2:	e599      	b.n	8007fe8 <_dtoa_r+0x4d0>
 80084b4:	9b08      	ldr	r3, [sp, #32]
 80084b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80fd 	beq.w	80086ba <_dtoa_r+0xba2>
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	dd05      	ble.n	80084d0 <_dtoa_r+0x9b8>
 80084c4:	4639      	mov	r1, r7
 80084c6:	462a      	mov	r2, r5
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fb41 	bl	8008b50 <__lshift>
 80084ce:	4607      	mov	r7, r0
 80084d0:	9b06      	ldr	r3, [sp, #24]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d05c      	beq.n	8008590 <_dtoa_r+0xa78>
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 f927 	bl	800872c <_Balloc>
 80084de:	4605      	mov	r5, r0
 80084e0:	b928      	cbnz	r0, 80084ee <_dtoa_r+0x9d6>
 80084e2:	4b80      	ldr	r3, [pc, #512]	; (80086e4 <_dtoa_r+0xbcc>)
 80084e4:	4602      	mov	r2, r0
 80084e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084ea:	f7ff bb2e 	b.w	8007b4a <_dtoa_r+0x32>
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	3202      	adds	r2, #2
 80084f2:	0092      	lsls	r2, r2, #2
 80084f4:	f107 010c 	add.w	r1, r7, #12
 80084f8:	300c      	adds	r0, #12
 80084fa:	f000 f8fd 	bl	80086f8 <memcpy>
 80084fe:	2201      	movs	r2, #1
 8008500:	4629      	mov	r1, r5
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fb24 	bl	8008b50 <__lshift>
 8008508:	9b00      	ldr	r3, [sp, #0]
 800850a:	3301      	adds	r3, #1
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	9b00      	ldr	r3, [sp, #0]
 8008510:	444b      	add	r3, r9
 8008512:	9307      	str	r3, [sp, #28]
 8008514:	9b02      	ldr	r3, [sp, #8]
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	46b8      	mov	r8, r7
 800851c:	9306      	str	r3, [sp, #24]
 800851e:	4607      	mov	r7, r0
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	4631      	mov	r1, r6
 8008524:	3b01      	subs	r3, #1
 8008526:	4658      	mov	r0, fp
 8008528:	9302      	str	r3, [sp, #8]
 800852a:	f7ff fa69 	bl	8007a00 <quorem>
 800852e:	4603      	mov	r3, r0
 8008530:	3330      	adds	r3, #48	; 0x30
 8008532:	9004      	str	r0, [sp, #16]
 8008534:	4641      	mov	r1, r8
 8008536:	4658      	mov	r0, fp
 8008538:	9308      	str	r3, [sp, #32]
 800853a:	f000 fb75 	bl	8008c28 <__mcmp>
 800853e:	463a      	mov	r2, r7
 8008540:	4681      	mov	r9, r0
 8008542:	4631      	mov	r1, r6
 8008544:	4620      	mov	r0, r4
 8008546:	f000 fb8b 	bl	8008c60 <__mdiff>
 800854a:	68c2      	ldr	r2, [r0, #12]
 800854c:	9b08      	ldr	r3, [sp, #32]
 800854e:	4605      	mov	r5, r0
 8008550:	bb02      	cbnz	r2, 8008594 <_dtoa_r+0xa7c>
 8008552:	4601      	mov	r1, r0
 8008554:	4658      	mov	r0, fp
 8008556:	f000 fb67 	bl	8008c28 <__mcmp>
 800855a:	9b08      	ldr	r3, [sp, #32]
 800855c:	4602      	mov	r2, r0
 800855e:	4629      	mov	r1, r5
 8008560:	4620      	mov	r0, r4
 8008562:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008566:	f000 f921 	bl	80087ac <_Bfree>
 800856a:	9b05      	ldr	r3, [sp, #20]
 800856c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800856e:	9d01      	ldr	r5, [sp, #4]
 8008570:	ea43 0102 	orr.w	r1, r3, r2
 8008574:	9b06      	ldr	r3, [sp, #24]
 8008576:	430b      	orrs	r3, r1
 8008578:	9b08      	ldr	r3, [sp, #32]
 800857a:	d10d      	bne.n	8008598 <_dtoa_r+0xa80>
 800857c:	2b39      	cmp	r3, #57	; 0x39
 800857e:	d029      	beq.n	80085d4 <_dtoa_r+0xabc>
 8008580:	f1b9 0f00 	cmp.w	r9, #0
 8008584:	dd01      	ble.n	800858a <_dtoa_r+0xa72>
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	3331      	adds	r3, #49	; 0x31
 800858a:	9a02      	ldr	r2, [sp, #8]
 800858c:	7013      	strb	r3, [r2, #0]
 800858e:	e774      	b.n	800847a <_dtoa_r+0x962>
 8008590:	4638      	mov	r0, r7
 8008592:	e7b9      	b.n	8008508 <_dtoa_r+0x9f0>
 8008594:	2201      	movs	r2, #1
 8008596:	e7e2      	b.n	800855e <_dtoa_r+0xa46>
 8008598:	f1b9 0f00 	cmp.w	r9, #0
 800859c:	db06      	blt.n	80085ac <_dtoa_r+0xa94>
 800859e:	9905      	ldr	r1, [sp, #20]
 80085a0:	ea41 0909 	orr.w	r9, r1, r9
 80085a4:	9906      	ldr	r1, [sp, #24]
 80085a6:	ea59 0101 	orrs.w	r1, r9, r1
 80085aa:	d120      	bne.n	80085ee <_dtoa_r+0xad6>
 80085ac:	2a00      	cmp	r2, #0
 80085ae:	ddec      	ble.n	800858a <_dtoa_r+0xa72>
 80085b0:	4659      	mov	r1, fp
 80085b2:	2201      	movs	r2, #1
 80085b4:	4620      	mov	r0, r4
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	f000 faca 	bl	8008b50 <__lshift>
 80085bc:	4631      	mov	r1, r6
 80085be:	4683      	mov	fp, r0
 80085c0:	f000 fb32 	bl	8008c28 <__mcmp>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	dc02      	bgt.n	80085d0 <_dtoa_r+0xab8>
 80085ca:	d1de      	bne.n	800858a <_dtoa_r+0xa72>
 80085cc:	07da      	lsls	r2, r3, #31
 80085ce:	d5dc      	bpl.n	800858a <_dtoa_r+0xa72>
 80085d0:	2b39      	cmp	r3, #57	; 0x39
 80085d2:	d1d8      	bne.n	8008586 <_dtoa_r+0xa6e>
 80085d4:	9a02      	ldr	r2, [sp, #8]
 80085d6:	2339      	movs	r3, #57	; 0x39
 80085d8:	7013      	strb	r3, [r2, #0]
 80085da:	462b      	mov	r3, r5
 80085dc:	461d      	mov	r5, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085e4:	2a39      	cmp	r2, #57	; 0x39
 80085e6:	d050      	beq.n	800868a <_dtoa_r+0xb72>
 80085e8:	3201      	adds	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]
 80085ec:	e745      	b.n	800847a <_dtoa_r+0x962>
 80085ee:	2a00      	cmp	r2, #0
 80085f0:	dd03      	ble.n	80085fa <_dtoa_r+0xae2>
 80085f2:	2b39      	cmp	r3, #57	; 0x39
 80085f4:	d0ee      	beq.n	80085d4 <_dtoa_r+0xabc>
 80085f6:	3301      	adds	r3, #1
 80085f8:	e7c7      	b.n	800858a <_dtoa_r+0xa72>
 80085fa:	9a01      	ldr	r2, [sp, #4]
 80085fc:	9907      	ldr	r1, [sp, #28]
 80085fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008602:	428a      	cmp	r2, r1
 8008604:	d02a      	beq.n	800865c <_dtoa_r+0xb44>
 8008606:	4659      	mov	r1, fp
 8008608:	2300      	movs	r3, #0
 800860a:	220a      	movs	r2, #10
 800860c:	4620      	mov	r0, r4
 800860e:	f000 f8ef 	bl	80087f0 <__multadd>
 8008612:	45b8      	cmp	r8, r7
 8008614:	4683      	mov	fp, r0
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	f04f 020a 	mov.w	r2, #10
 800861e:	4641      	mov	r1, r8
 8008620:	4620      	mov	r0, r4
 8008622:	d107      	bne.n	8008634 <_dtoa_r+0xb1c>
 8008624:	f000 f8e4 	bl	80087f0 <__multadd>
 8008628:	4680      	mov	r8, r0
 800862a:	4607      	mov	r7, r0
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	3301      	adds	r3, #1
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	e775      	b.n	8008520 <_dtoa_r+0xa08>
 8008634:	f000 f8dc 	bl	80087f0 <__multadd>
 8008638:	4639      	mov	r1, r7
 800863a:	4680      	mov	r8, r0
 800863c:	2300      	movs	r3, #0
 800863e:	220a      	movs	r2, #10
 8008640:	4620      	mov	r0, r4
 8008642:	f000 f8d5 	bl	80087f0 <__multadd>
 8008646:	4607      	mov	r7, r0
 8008648:	e7f0      	b.n	800862c <_dtoa_r+0xb14>
 800864a:	f1b9 0f00 	cmp.w	r9, #0
 800864e:	9a00      	ldr	r2, [sp, #0]
 8008650:	bfcc      	ite	gt
 8008652:	464d      	movgt	r5, r9
 8008654:	2501      	movle	r5, #1
 8008656:	4415      	add	r5, r2
 8008658:	f04f 0800 	mov.w	r8, #0
 800865c:	4659      	mov	r1, fp
 800865e:	2201      	movs	r2, #1
 8008660:	4620      	mov	r0, r4
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	f000 fa74 	bl	8008b50 <__lshift>
 8008668:	4631      	mov	r1, r6
 800866a:	4683      	mov	fp, r0
 800866c:	f000 fadc 	bl	8008c28 <__mcmp>
 8008670:	2800      	cmp	r0, #0
 8008672:	dcb2      	bgt.n	80085da <_dtoa_r+0xac2>
 8008674:	d102      	bne.n	800867c <_dtoa_r+0xb64>
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	07db      	lsls	r3, r3, #31
 800867a:	d4ae      	bmi.n	80085da <_dtoa_r+0xac2>
 800867c:	462b      	mov	r3, r5
 800867e:	461d      	mov	r5, r3
 8008680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008684:	2a30      	cmp	r2, #48	; 0x30
 8008686:	d0fa      	beq.n	800867e <_dtoa_r+0xb66>
 8008688:	e6f7      	b.n	800847a <_dtoa_r+0x962>
 800868a:	9a00      	ldr	r2, [sp, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d1a5      	bne.n	80085dc <_dtoa_r+0xac4>
 8008690:	f10a 0a01 	add.w	sl, sl, #1
 8008694:	2331      	movs	r3, #49	; 0x31
 8008696:	e779      	b.n	800858c <_dtoa_r+0xa74>
 8008698:	4b13      	ldr	r3, [pc, #76]	; (80086e8 <_dtoa_r+0xbd0>)
 800869a:	f7ff baaf 	b.w	8007bfc <_dtoa_r+0xe4>
 800869e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f47f aa86 	bne.w	8007bb2 <_dtoa_r+0x9a>
 80086a6:	4b11      	ldr	r3, [pc, #68]	; (80086ec <_dtoa_r+0xbd4>)
 80086a8:	f7ff baa8 	b.w	8007bfc <_dtoa_r+0xe4>
 80086ac:	f1b9 0f00 	cmp.w	r9, #0
 80086b0:	dc03      	bgt.n	80086ba <_dtoa_r+0xba2>
 80086b2:	9b05      	ldr	r3, [sp, #20]
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	f73f aec9 	bgt.w	800844c <_dtoa_r+0x934>
 80086ba:	9d00      	ldr	r5, [sp, #0]
 80086bc:	4631      	mov	r1, r6
 80086be:	4658      	mov	r0, fp
 80086c0:	f7ff f99e 	bl	8007a00 <quorem>
 80086c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80086c8:	f805 3b01 	strb.w	r3, [r5], #1
 80086cc:	9a00      	ldr	r2, [sp, #0]
 80086ce:	1aaa      	subs	r2, r5, r2
 80086d0:	4591      	cmp	r9, r2
 80086d2:	ddba      	ble.n	800864a <_dtoa_r+0xb32>
 80086d4:	4659      	mov	r1, fp
 80086d6:	2300      	movs	r3, #0
 80086d8:	220a      	movs	r2, #10
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 f888 	bl	80087f0 <__multadd>
 80086e0:	4683      	mov	fp, r0
 80086e2:	e7eb      	b.n	80086bc <_dtoa_r+0xba4>
 80086e4:	0800a2ff 	.word	0x0800a2ff
 80086e8:	0800a258 	.word	0x0800a258
 80086ec:	0800a27c 	.word	0x0800a27c

080086f0 <_localeconv_r>:
 80086f0:	4800      	ldr	r0, [pc, #0]	; (80086f4 <_localeconv_r+0x4>)
 80086f2:	4770      	bx	lr
 80086f4:	20000164 	.word	0x20000164

080086f8 <memcpy>:
 80086f8:	440a      	add	r2, r1
 80086fa:	4291      	cmp	r1, r2
 80086fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008700:	d100      	bne.n	8008704 <memcpy+0xc>
 8008702:	4770      	bx	lr
 8008704:	b510      	push	{r4, lr}
 8008706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800870a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800870e:	4291      	cmp	r1, r2
 8008710:	d1f9      	bne.n	8008706 <memcpy+0xe>
 8008712:	bd10      	pop	{r4, pc}

08008714 <__malloc_lock>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__malloc_lock+0x8>)
 8008716:	f000 bd22 	b.w	800915e <__retarget_lock_acquire_recursive>
 800871a:	bf00      	nop
 800871c:	20004120 	.word	0x20004120

08008720 <__malloc_unlock>:
 8008720:	4801      	ldr	r0, [pc, #4]	; (8008728 <__malloc_unlock+0x8>)
 8008722:	f000 bd1d 	b.w	8009160 <__retarget_lock_release_recursive>
 8008726:	bf00      	nop
 8008728:	20004120 	.word	0x20004120

0800872c <_Balloc>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008730:	4604      	mov	r4, r0
 8008732:	460d      	mov	r5, r1
 8008734:	b976      	cbnz	r6, 8008754 <_Balloc+0x28>
 8008736:	2010      	movs	r0, #16
 8008738:	f7fe fbf2 	bl	8006f20 <malloc>
 800873c:	4602      	mov	r2, r0
 800873e:	6260      	str	r0, [r4, #36]	; 0x24
 8008740:	b920      	cbnz	r0, 800874c <_Balloc+0x20>
 8008742:	4b18      	ldr	r3, [pc, #96]	; (80087a4 <_Balloc+0x78>)
 8008744:	4818      	ldr	r0, [pc, #96]	; (80087a8 <_Balloc+0x7c>)
 8008746:	2166      	movs	r1, #102	; 0x66
 8008748:	f000 fcd8 	bl	80090fc <__assert_func>
 800874c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008750:	6006      	str	r6, [r0, #0]
 8008752:	60c6      	str	r6, [r0, #12]
 8008754:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008756:	68f3      	ldr	r3, [r6, #12]
 8008758:	b183      	cbz	r3, 800877c <_Balloc+0x50>
 800875a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008762:	b9b8      	cbnz	r0, 8008794 <_Balloc+0x68>
 8008764:	2101      	movs	r1, #1
 8008766:	fa01 f605 	lsl.w	r6, r1, r5
 800876a:	1d72      	adds	r2, r6, #5
 800876c:	0092      	lsls	r2, r2, #2
 800876e:	4620      	mov	r0, r4
 8008770:	f000 fb5a 	bl	8008e28 <_calloc_r>
 8008774:	b160      	cbz	r0, 8008790 <_Balloc+0x64>
 8008776:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800877a:	e00e      	b.n	800879a <_Balloc+0x6e>
 800877c:	2221      	movs	r2, #33	; 0x21
 800877e:	2104      	movs	r1, #4
 8008780:	4620      	mov	r0, r4
 8008782:	f000 fb51 	bl	8008e28 <_calloc_r>
 8008786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008788:	60f0      	str	r0, [r6, #12]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e4      	bne.n	800875a <_Balloc+0x2e>
 8008790:	2000      	movs	r0, #0
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	6802      	ldr	r2, [r0, #0]
 8008796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800879a:	2300      	movs	r3, #0
 800879c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087a0:	e7f7      	b.n	8008792 <_Balloc+0x66>
 80087a2:	bf00      	nop
 80087a4:	0800a289 	.word	0x0800a289
 80087a8:	0800a310 	.word	0x0800a310

080087ac <_Bfree>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087b0:	4605      	mov	r5, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	b976      	cbnz	r6, 80087d4 <_Bfree+0x28>
 80087b6:	2010      	movs	r0, #16
 80087b8:	f7fe fbb2 	bl	8006f20 <malloc>
 80087bc:	4602      	mov	r2, r0
 80087be:	6268      	str	r0, [r5, #36]	; 0x24
 80087c0:	b920      	cbnz	r0, 80087cc <_Bfree+0x20>
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <_Bfree+0x3c>)
 80087c4:	4809      	ldr	r0, [pc, #36]	; (80087ec <_Bfree+0x40>)
 80087c6:	218a      	movs	r1, #138	; 0x8a
 80087c8:	f000 fc98 	bl	80090fc <__assert_func>
 80087cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087d0:	6006      	str	r6, [r0, #0]
 80087d2:	60c6      	str	r6, [r0, #12]
 80087d4:	b13c      	cbz	r4, 80087e6 <_Bfree+0x3a>
 80087d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087d8:	6862      	ldr	r2, [r4, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087e0:	6021      	str	r1, [r4, #0]
 80087e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	0800a289 	.word	0x0800a289
 80087ec:	0800a310 	.word	0x0800a310

080087f0 <__multadd>:
 80087f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f4:	690e      	ldr	r6, [r1, #16]
 80087f6:	4607      	mov	r7, r0
 80087f8:	4698      	mov	r8, r3
 80087fa:	460c      	mov	r4, r1
 80087fc:	f101 0014 	add.w	r0, r1, #20
 8008800:	2300      	movs	r3, #0
 8008802:	6805      	ldr	r5, [r0, #0]
 8008804:	b2a9      	uxth	r1, r5
 8008806:	fb02 8101 	mla	r1, r2, r1, r8
 800880a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800880e:	0c2d      	lsrs	r5, r5, #16
 8008810:	fb02 c505 	mla	r5, r2, r5, ip
 8008814:	b289      	uxth	r1, r1
 8008816:	3301      	adds	r3, #1
 8008818:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800881c:	429e      	cmp	r6, r3
 800881e:	f840 1b04 	str.w	r1, [r0], #4
 8008822:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008826:	dcec      	bgt.n	8008802 <__multadd+0x12>
 8008828:	f1b8 0f00 	cmp.w	r8, #0
 800882c:	d022      	beq.n	8008874 <__multadd+0x84>
 800882e:	68a3      	ldr	r3, [r4, #8]
 8008830:	42b3      	cmp	r3, r6
 8008832:	dc19      	bgt.n	8008868 <__multadd+0x78>
 8008834:	6861      	ldr	r1, [r4, #4]
 8008836:	4638      	mov	r0, r7
 8008838:	3101      	adds	r1, #1
 800883a:	f7ff ff77 	bl	800872c <_Balloc>
 800883e:	4605      	mov	r5, r0
 8008840:	b928      	cbnz	r0, 800884e <__multadd+0x5e>
 8008842:	4602      	mov	r2, r0
 8008844:	4b0d      	ldr	r3, [pc, #52]	; (800887c <__multadd+0x8c>)
 8008846:	480e      	ldr	r0, [pc, #56]	; (8008880 <__multadd+0x90>)
 8008848:	21b5      	movs	r1, #181	; 0xb5
 800884a:	f000 fc57 	bl	80090fc <__assert_func>
 800884e:	6922      	ldr	r2, [r4, #16]
 8008850:	3202      	adds	r2, #2
 8008852:	f104 010c 	add.w	r1, r4, #12
 8008856:	0092      	lsls	r2, r2, #2
 8008858:	300c      	adds	r0, #12
 800885a:	f7ff ff4d 	bl	80086f8 <memcpy>
 800885e:	4621      	mov	r1, r4
 8008860:	4638      	mov	r0, r7
 8008862:	f7ff ffa3 	bl	80087ac <_Bfree>
 8008866:	462c      	mov	r4, r5
 8008868:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800886c:	3601      	adds	r6, #1
 800886e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008872:	6126      	str	r6, [r4, #16]
 8008874:	4620      	mov	r0, r4
 8008876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800887a:	bf00      	nop
 800887c:	0800a2ff 	.word	0x0800a2ff
 8008880:	0800a310 	.word	0x0800a310

08008884 <__hi0bits>:
 8008884:	0c03      	lsrs	r3, r0, #16
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	b9d3      	cbnz	r3, 80088c0 <__hi0bits+0x3c>
 800888a:	0400      	lsls	r0, r0, #16
 800888c:	2310      	movs	r3, #16
 800888e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008892:	bf04      	itt	eq
 8008894:	0200      	lsleq	r0, r0, #8
 8008896:	3308      	addeq	r3, #8
 8008898:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800889c:	bf04      	itt	eq
 800889e:	0100      	lsleq	r0, r0, #4
 80088a0:	3304      	addeq	r3, #4
 80088a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088a6:	bf04      	itt	eq
 80088a8:	0080      	lsleq	r0, r0, #2
 80088aa:	3302      	addeq	r3, #2
 80088ac:	2800      	cmp	r0, #0
 80088ae:	db05      	blt.n	80088bc <__hi0bits+0x38>
 80088b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088b4:	f103 0301 	add.w	r3, r3, #1
 80088b8:	bf08      	it	eq
 80088ba:	2320      	moveq	r3, #32
 80088bc:	4618      	mov	r0, r3
 80088be:	4770      	bx	lr
 80088c0:	2300      	movs	r3, #0
 80088c2:	e7e4      	b.n	800888e <__hi0bits+0xa>

080088c4 <__lo0bits>:
 80088c4:	6803      	ldr	r3, [r0, #0]
 80088c6:	f013 0207 	ands.w	r2, r3, #7
 80088ca:	4601      	mov	r1, r0
 80088cc:	d00b      	beq.n	80088e6 <__lo0bits+0x22>
 80088ce:	07da      	lsls	r2, r3, #31
 80088d0:	d424      	bmi.n	800891c <__lo0bits+0x58>
 80088d2:	0798      	lsls	r0, r3, #30
 80088d4:	bf49      	itett	mi
 80088d6:	085b      	lsrmi	r3, r3, #1
 80088d8:	089b      	lsrpl	r3, r3, #2
 80088da:	2001      	movmi	r0, #1
 80088dc:	600b      	strmi	r3, [r1, #0]
 80088de:	bf5c      	itt	pl
 80088e0:	600b      	strpl	r3, [r1, #0]
 80088e2:	2002      	movpl	r0, #2
 80088e4:	4770      	bx	lr
 80088e6:	b298      	uxth	r0, r3
 80088e8:	b9b0      	cbnz	r0, 8008918 <__lo0bits+0x54>
 80088ea:	0c1b      	lsrs	r3, r3, #16
 80088ec:	2010      	movs	r0, #16
 80088ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80088f2:	bf04      	itt	eq
 80088f4:	0a1b      	lsreq	r3, r3, #8
 80088f6:	3008      	addeq	r0, #8
 80088f8:	071a      	lsls	r2, r3, #28
 80088fa:	bf04      	itt	eq
 80088fc:	091b      	lsreq	r3, r3, #4
 80088fe:	3004      	addeq	r0, #4
 8008900:	079a      	lsls	r2, r3, #30
 8008902:	bf04      	itt	eq
 8008904:	089b      	lsreq	r3, r3, #2
 8008906:	3002      	addeq	r0, #2
 8008908:	07da      	lsls	r2, r3, #31
 800890a:	d403      	bmi.n	8008914 <__lo0bits+0x50>
 800890c:	085b      	lsrs	r3, r3, #1
 800890e:	f100 0001 	add.w	r0, r0, #1
 8008912:	d005      	beq.n	8008920 <__lo0bits+0x5c>
 8008914:	600b      	str	r3, [r1, #0]
 8008916:	4770      	bx	lr
 8008918:	4610      	mov	r0, r2
 800891a:	e7e8      	b.n	80088ee <__lo0bits+0x2a>
 800891c:	2000      	movs	r0, #0
 800891e:	4770      	bx	lr
 8008920:	2020      	movs	r0, #32
 8008922:	4770      	bx	lr

08008924 <__i2b>:
 8008924:	b510      	push	{r4, lr}
 8008926:	460c      	mov	r4, r1
 8008928:	2101      	movs	r1, #1
 800892a:	f7ff feff 	bl	800872c <_Balloc>
 800892e:	4602      	mov	r2, r0
 8008930:	b928      	cbnz	r0, 800893e <__i2b+0x1a>
 8008932:	4b05      	ldr	r3, [pc, #20]	; (8008948 <__i2b+0x24>)
 8008934:	4805      	ldr	r0, [pc, #20]	; (800894c <__i2b+0x28>)
 8008936:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800893a:	f000 fbdf 	bl	80090fc <__assert_func>
 800893e:	2301      	movs	r3, #1
 8008940:	6144      	str	r4, [r0, #20]
 8008942:	6103      	str	r3, [r0, #16]
 8008944:	bd10      	pop	{r4, pc}
 8008946:	bf00      	nop
 8008948:	0800a2ff 	.word	0x0800a2ff
 800894c:	0800a310 	.word	0x0800a310

08008950 <__multiply>:
 8008950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008954:	4614      	mov	r4, r2
 8008956:	690a      	ldr	r2, [r1, #16]
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	429a      	cmp	r2, r3
 800895c:	bfb8      	it	lt
 800895e:	460b      	movlt	r3, r1
 8008960:	460d      	mov	r5, r1
 8008962:	bfbc      	itt	lt
 8008964:	4625      	movlt	r5, r4
 8008966:	461c      	movlt	r4, r3
 8008968:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800896c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008970:	68ab      	ldr	r3, [r5, #8]
 8008972:	6869      	ldr	r1, [r5, #4]
 8008974:	eb0a 0709 	add.w	r7, sl, r9
 8008978:	42bb      	cmp	r3, r7
 800897a:	b085      	sub	sp, #20
 800897c:	bfb8      	it	lt
 800897e:	3101      	addlt	r1, #1
 8008980:	f7ff fed4 	bl	800872c <_Balloc>
 8008984:	b930      	cbnz	r0, 8008994 <__multiply+0x44>
 8008986:	4602      	mov	r2, r0
 8008988:	4b42      	ldr	r3, [pc, #264]	; (8008a94 <__multiply+0x144>)
 800898a:	4843      	ldr	r0, [pc, #268]	; (8008a98 <__multiply+0x148>)
 800898c:	f240 115d 	movw	r1, #349	; 0x15d
 8008990:	f000 fbb4 	bl	80090fc <__assert_func>
 8008994:	f100 0614 	add.w	r6, r0, #20
 8008998:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800899c:	4633      	mov	r3, r6
 800899e:	2200      	movs	r2, #0
 80089a0:	4543      	cmp	r3, r8
 80089a2:	d31e      	bcc.n	80089e2 <__multiply+0x92>
 80089a4:	f105 0c14 	add.w	ip, r5, #20
 80089a8:	f104 0314 	add.w	r3, r4, #20
 80089ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80089b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80089b4:	9202      	str	r2, [sp, #8]
 80089b6:	ebac 0205 	sub.w	r2, ip, r5
 80089ba:	3a15      	subs	r2, #21
 80089bc:	f022 0203 	bic.w	r2, r2, #3
 80089c0:	3204      	adds	r2, #4
 80089c2:	f105 0115 	add.w	r1, r5, #21
 80089c6:	458c      	cmp	ip, r1
 80089c8:	bf38      	it	cc
 80089ca:	2204      	movcc	r2, #4
 80089cc:	9201      	str	r2, [sp, #4]
 80089ce:	9a02      	ldr	r2, [sp, #8]
 80089d0:	9303      	str	r3, [sp, #12]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d808      	bhi.n	80089e8 <__multiply+0x98>
 80089d6:	2f00      	cmp	r7, #0
 80089d8:	dc55      	bgt.n	8008a86 <__multiply+0x136>
 80089da:	6107      	str	r7, [r0, #16]
 80089dc:	b005      	add	sp, #20
 80089de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e2:	f843 2b04 	str.w	r2, [r3], #4
 80089e6:	e7db      	b.n	80089a0 <__multiply+0x50>
 80089e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80089ec:	f1ba 0f00 	cmp.w	sl, #0
 80089f0:	d020      	beq.n	8008a34 <__multiply+0xe4>
 80089f2:	f105 0e14 	add.w	lr, r5, #20
 80089f6:	46b1      	mov	r9, r6
 80089f8:	2200      	movs	r2, #0
 80089fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80089fe:	f8d9 b000 	ldr.w	fp, [r9]
 8008a02:	b2a1      	uxth	r1, r4
 8008a04:	fa1f fb8b 	uxth.w	fp, fp
 8008a08:	fb0a b101 	mla	r1, sl, r1, fp
 8008a0c:	4411      	add	r1, r2
 8008a0e:	f8d9 2000 	ldr.w	r2, [r9]
 8008a12:	0c24      	lsrs	r4, r4, #16
 8008a14:	0c12      	lsrs	r2, r2, #16
 8008a16:	fb0a 2404 	mla	r4, sl, r4, r2
 8008a1a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008a1e:	b289      	uxth	r1, r1
 8008a20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a24:	45f4      	cmp	ip, lr
 8008a26:	f849 1b04 	str.w	r1, [r9], #4
 8008a2a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008a2e:	d8e4      	bhi.n	80089fa <__multiply+0xaa>
 8008a30:	9901      	ldr	r1, [sp, #4]
 8008a32:	5072      	str	r2, [r6, r1]
 8008a34:	9a03      	ldr	r2, [sp, #12]
 8008a36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	f1b9 0f00 	cmp.w	r9, #0
 8008a40:	d01f      	beq.n	8008a82 <__multiply+0x132>
 8008a42:	6834      	ldr	r4, [r6, #0]
 8008a44:	f105 0114 	add.w	r1, r5, #20
 8008a48:	46b6      	mov	lr, r6
 8008a4a:	f04f 0a00 	mov.w	sl, #0
 8008a4e:	880a      	ldrh	r2, [r1, #0]
 8008a50:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008a54:	fb09 b202 	mla	r2, r9, r2, fp
 8008a58:	4492      	add	sl, r2
 8008a5a:	b2a4      	uxth	r4, r4
 8008a5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008a60:	f84e 4b04 	str.w	r4, [lr], #4
 8008a64:	f851 4b04 	ldr.w	r4, [r1], #4
 8008a68:	f8be 2000 	ldrh.w	r2, [lr]
 8008a6c:	0c24      	lsrs	r4, r4, #16
 8008a6e:	fb09 2404 	mla	r4, r9, r4, r2
 8008a72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008a76:	458c      	cmp	ip, r1
 8008a78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a7c:	d8e7      	bhi.n	8008a4e <__multiply+0xfe>
 8008a7e:	9a01      	ldr	r2, [sp, #4]
 8008a80:	50b4      	str	r4, [r6, r2]
 8008a82:	3604      	adds	r6, #4
 8008a84:	e7a3      	b.n	80089ce <__multiply+0x7e>
 8008a86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1a5      	bne.n	80089da <__multiply+0x8a>
 8008a8e:	3f01      	subs	r7, #1
 8008a90:	e7a1      	b.n	80089d6 <__multiply+0x86>
 8008a92:	bf00      	nop
 8008a94:	0800a2ff 	.word	0x0800a2ff
 8008a98:	0800a310 	.word	0x0800a310

08008a9c <__pow5mult>:
 8008a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa0:	4615      	mov	r5, r2
 8008aa2:	f012 0203 	ands.w	r2, r2, #3
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	460f      	mov	r7, r1
 8008aaa:	d007      	beq.n	8008abc <__pow5mult+0x20>
 8008aac:	4c25      	ldr	r4, [pc, #148]	; (8008b44 <__pow5mult+0xa8>)
 8008aae:	3a01      	subs	r2, #1
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ab6:	f7ff fe9b 	bl	80087f0 <__multadd>
 8008aba:	4607      	mov	r7, r0
 8008abc:	10ad      	asrs	r5, r5, #2
 8008abe:	d03d      	beq.n	8008b3c <__pow5mult+0xa0>
 8008ac0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ac2:	b97c      	cbnz	r4, 8008ae4 <__pow5mult+0x48>
 8008ac4:	2010      	movs	r0, #16
 8008ac6:	f7fe fa2b 	bl	8006f20 <malloc>
 8008aca:	4602      	mov	r2, r0
 8008acc:	6270      	str	r0, [r6, #36]	; 0x24
 8008ace:	b928      	cbnz	r0, 8008adc <__pow5mult+0x40>
 8008ad0:	4b1d      	ldr	r3, [pc, #116]	; (8008b48 <__pow5mult+0xac>)
 8008ad2:	481e      	ldr	r0, [pc, #120]	; (8008b4c <__pow5mult+0xb0>)
 8008ad4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ad8:	f000 fb10 	bl	80090fc <__assert_func>
 8008adc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ae0:	6004      	str	r4, [r0, #0]
 8008ae2:	60c4      	str	r4, [r0, #12]
 8008ae4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ae8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008aec:	b94c      	cbnz	r4, 8008b02 <__pow5mult+0x66>
 8008aee:	f240 2171 	movw	r1, #625	; 0x271
 8008af2:	4630      	mov	r0, r6
 8008af4:	f7ff ff16 	bl	8008924 <__i2b>
 8008af8:	2300      	movs	r3, #0
 8008afa:	f8c8 0008 	str.w	r0, [r8, #8]
 8008afe:	4604      	mov	r4, r0
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	f04f 0900 	mov.w	r9, #0
 8008b06:	07eb      	lsls	r3, r5, #31
 8008b08:	d50a      	bpl.n	8008b20 <__pow5mult+0x84>
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f7ff ff1e 	bl	8008950 <__multiply>
 8008b14:	4639      	mov	r1, r7
 8008b16:	4680      	mov	r8, r0
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7ff fe47 	bl	80087ac <_Bfree>
 8008b1e:	4647      	mov	r7, r8
 8008b20:	106d      	asrs	r5, r5, #1
 8008b22:	d00b      	beq.n	8008b3c <__pow5mult+0xa0>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	b938      	cbnz	r0, 8008b38 <__pow5mult+0x9c>
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7ff ff0f 	bl	8008950 <__multiply>
 8008b32:	6020      	str	r0, [r4, #0]
 8008b34:	f8c0 9000 	str.w	r9, [r0]
 8008b38:	4604      	mov	r4, r0
 8008b3a:	e7e4      	b.n	8008b06 <__pow5mult+0x6a>
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b42:	bf00      	nop
 8008b44:	0800a460 	.word	0x0800a460
 8008b48:	0800a289 	.word	0x0800a289
 8008b4c:	0800a310 	.word	0x0800a310

08008b50 <__lshift>:
 8008b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b54:	460c      	mov	r4, r1
 8008b56:	6849      	ldr	r1, [r1, #4]
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	4607      	mov	r7, r0
 8008b62:	4691      	mov	r9, r2
 8008b64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b68:	f108 0601 	add.w	r6, r8, #1
 8008b6c:	42b3      	cmp	r3, r6
 8008b6e:	db0b      	blt.n	8008b88 <__lshift+0x38>
 8008b70:	4638      	mov	r0, r7
 8008b72:	f7ff fddb 	bl	800872c <_Balloc>
 8008b76:	4605      	mov	r5, r0
 8008b78:	b948      	cbnz	r0, 8008b8e <__lshift+0x3e>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4b28      	ldr	r3, [pc, #160]	; (8008c20 <__lshift+0xd0>)
 8008b7e:	4829      	ldr	r0, [pc, #164]	; (8008c24 <__lshift+0xd4>)
 8008b80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b84:	f000 faba 	bl	80090fc <__assert_func>
 8008b88:	3101      	adds	r1, #1
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	e7ee      	b.n	8008b6c <__lshift+0x1c>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f100 0114 	add.w	r1, r0, #20
 8008b94:	f100 0210 	add.w	r2, r0, #16
 8008b98:	4618      	mov	r0, r3
 8008b9a:	4553      	cmp	r3, sl
 8008b9c:	db33      	blt.n	8008c06 <__lshift+0xb6>
 8008b9e:	6920      	ldr	r0, [r4, #16]
 8008ba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ba4:	f104 0314 	add.w	r3, r4, #20
 8008ba8:	f019 091f 	ands.w	r9, r9, #31
 8008bac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bb4:	d02b      	beq.n	8008c0e <__lshift+0xbe>
 8008bb6:	f1c9 0e20 	rsb	lr, r9, #32
 8008bba:	468a      	mov	sl, r1
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	fa00 f009 	lsl.w	r0, r0, r9
 8008bc4:	4302      	orrs	r2, r0
 8008bc6:	f84a 2b04 	str.w	r2, [sl], #4
 8008bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bce:	459c      	cmp	ip, r3
 8008bd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bd4:	d8f3      	bhi.n	8008bbe <__lshift+0x6e>
 8008bd6:	ebac 0304 	sub.w	r3, ip, r4
 8008bda:	3b15      	subs	r3, #21
 8008bdc:	f023 0303 	bic.w	r3, r3, #3
 8008be0:	3304      	adds	r3, #4
 8008be2:	f104 0015 	add.w	r0, r4, #21
 8008be6:	4584      	cmp	ip, r0
 8008be8:	bf38      	it	cc
 8008bea:	2304      	movcc	r3, #4
 8008bec:	50ca      	str	r2, [r1, r3]
 8008bee:	b10a      	cbz	r2, 8008bf4 <__lshift+0xa4>
 8008bf0:	f108 0602 	add.w	r6, r8, #2
 8008bf4:	3e01      	subs	r6, #1
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	612e      	str	r6, [r5, #16]
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	f7ff fdd6 	bl	80087ac <_Bfree>
 8008c00:	4628      	mov	r0, r5
 8008c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c06:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	e7c5      	b.n	8008b9a <__lshift+0x4a>
 8008c0e:	3904      	subs	r1, #4
 8008c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c14:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c18:	459c      	cmp	ip, r3
 8008c1a:	d8f9      	bhi.n	8008c10 <__lshift+0xc0>
 8008c1c:	e7ea      	b.n	8008bf4 <__lshift+0xa4>
 8008c1e:	bf00      	nop
 8008c20:	0800a2ff 	.word	0x0800a2ff
 8008c24:	0800a310 	.word	0x0800a310

08008c28 <__mcmp>:
 8008c28:	b530      	push	{r4, r5, lr}
 8008c2a:	6902      	ldr	r2, [r0, #16]
 8008c2c:	690c      	ldr	r4, [r1, #16]
 8008c2e:	1b12      	subs	r2, r2, r4
 8008c30:	d10e      	bne.n	8008c50 <__mcmp+0x28>
 8008c32:	f100 0314 	add.w	r3, r0, #20
 8008c36:	3114      	adds	r1, #20
 8008c38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c48:	42a5      	cmp	r5, r4
 8008c4a:	d003      	beq.n	8008c54 <__mcmp+0x2c>
 8008c4c:	d305      	bcc.n	8008c5a <__mcmp+0x32>
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4610      	mov	r0, r2
 8008c52:	bd30      	pop	{r4, r5, pc}
 8008c54:	4283      	cmp	r3, r0
 8008c56:	d3f3      	bcc.n	8008c40 <__mcmp+0x18>
 8008c58:	e7fa      	b.n	8008c50 <__mcmp+0x28>
 8008c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5e:	e7f7      	b.n	8008c50 <__mcmp+0x28>

08008c60 <__mdiff>:
 8008c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	460c      	mov	r4, r1
 8008c66:	4606      	mov	r6, r0
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	4617      	mov	r7, r2
 8008c6e:	f7ff ffdb 	bl	8008c28 <__mcmp>
 8008c72:	1e05      	subs	r5, r0, #0
 8008c74:	d110      	bne.n	8008c98 <__mdiff+0x38>
 8008c76:	4629      	mov	r1, r5
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff fd57 	bl	800872c <_Balloc>
 8008c7e:	b930      	cbnz	r0, 8008c8e <__mdiff+0x2e>
 8008c80:	4b39      	ldr	r3, [pc, #228]	; (8008d68 <__mdiff+0x108>)
 8008c82:	4602      	mov	r2, r0
 8008c84:	f240 2132 	movw	r1, #562	; 0x232
 8008c88:	4838      	ldr	r0, [pc, #224]	; (8008d6c <__mdiff+0x10c>)
 8008c8a:	f000 fa37 	bl	80090fc <__assert_func>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c98:	bfa4      	itt	ge
 8008c9a:	463b      	movge	r3, r7
 8008c9c:	4627      	movge	r7, r4
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	bfa6      	itte	ge
 8008ca4:	461c      	movge	r4, r3
 8008ca6:	2500      	movge	r5, #0
 8008ca8:	2501      	movlt	r5, #1
 8008caa:	f7ff fd3f 	bl	800872c <_Balloc>
 8008cae:	b920      	cbnz	r0, 8008cba <__mdiff+0x5a>
 8008cb0:	4b2d      	ldr	r3, [pc, #180]	; (8008d68 <__mdiff+0x108>)
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cb8:	e7e6      	b.n	8008c88 <__mdiff+0x28>
 8008cba:	693e      	ldr	r6, [r7, #16]
 8008cbc:	60c5      	str	r5, [r0, #12]
 8008cbe:	6925      	ldr	r5, [r4, #16]
 8008cc0:	f107 0114 	add.w	r1, r7, #20
 8008cc4:	f104 0914 	add.w	r9, r4, #20
 8008cc8:	f100 0e14 	add.w	lr, r0, #20
 8008ccc:	f107 0210 	add.w	r2, r7, #16
 8008cd0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008cd4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008cd8:	46f2      	mov	sl, lr
 8008cda:	2700      	movs	r7, #0
 8008cdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ce0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ce4:	fa1f f883 	uxth.w	r8, r3
 8008ce8:	fa17 f78b 	uxtah	r7, r7, fp
 8008cec:	0c1b      	lsrs	r3, r3, #16
 8008cee:	eba7 0808 	sub.w	r8, r7, r8
 8008cf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008cfa:	fa1f f888 	uxth.w	r8, r8
 8008cfe:	141f      	asrs	r7, r3, #16
 8008d00:	454d      	cmp	r5, r9
 8008d02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d06:	f84a 3b04 	str.w	r3, [sl], #4
 8008d0a:	d8e7      	bhi.n	8008cdc <__mdiff+0x7c>
 8008d0c:	1b2b      	subs	r3, r5, r4
 8008d0e:	3b15      	subs	r3, #21
 8008d10:	f023 0303 	bic.w	r3, r3, #3
 8008d14:	3304      	adds	r3, #4
 8008d16:	3415      	adds	r4, #21
 8008d18:	42a5      	cmp	r5, r4
 8008d1a:	bf38      	it	cc
 8008d1c:	2304      	movcc	r3, #4
 8008d1e:	4419      	add	r1, r3
 8008d20:	4473      	add	r3, lr
 8008d22:	469e      	mov	lr, r3
 8008d24:	460d      	mov	r5, r1
 8008d26:	4565      	cmp	r5, ip
 8008d28:	d30e      	bcc.n	8008d48 <__mdiff+0xe8>
 8008d2a:	f10c 0203 	add.w	r2, ip, #3
 8008d2e:	1a52      	subs	r2, r2, r1
 8008d30:	f022 0203 	bic.w	r2, r2, #3
 8008d34:	3903      	subs	r1, #3
 8008d36:	458c      	cmp	ip, r1
 8008d38:	bf38      	it	cc
 8008d3a:	2200      	movcc	r2, #0
 8008d3c:	441a      	add	r2, r3
 8008d3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d42:	b17b      	cbz	r3, 8008d64 <__mdiff+0x104>
 8008d44:	6106      	str	r6, [r0, #16]
 8008d46:	e7a5      	b.n	8008c94 <__mdiff+0x34>
 8008d48:	f855 8b04 	ldr.w	r8, [r5], #4
 8008d4c:	fa17 f488 	uxtah	r4, r7, r8
 8008d50:	1422      	asrs	r2, r4, #16
 8008d52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008d56:	b2a4      	uxth	r4, r4
 8008d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008d5c:	f84e 4b04 	str.w	r4, [lr], #4
 8008d60:	1417      	asrs	r7, r2, #16
 8008d62:	e7e0      	b.n	8008d26 <__mdiff+0xc6>
 8008d64:	3e01      	subs	r6, #1
 8008d66:	e7ea      	b.n	8008d3e <__mdiff+0xde>
 8008d68:	0800a2ff 	.word	0x0800a2ff
 8008d6c:	0800a310 	.word	0x0800a310

08008d70 <__d2b>:
 8008d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d74:	4689      	mov	r9, r1
 8008d76:	2101      	movs	r1, #1
 8008d78:	ec57 6b10 	vmov	r6, r7, d0
 8008d7c:	4690      	mov	r8, r2
 8008d7e:	f7ff fcd5 	bl	800872c <_Balloc>
 8008d82:	4604      	mov	r4, r0
 8008d84:	b930      	cbnz	r0, 8008d94 <__d2b+0x24>
 8008d86:	4602      	mov	r2, r0
 8008d88:	4b25      	ldr	r3, [pc, #148]	; (8008e20 <__d2b+0xb0>)
 8008d8a:	4826      	ldr	r0, [pc, #152]	; (8008e24 <__d2b+0xb4>)
 8008d8c:	f240 310a 	movw	r1, #778	; 0x30a
 8008d90:	f000 f9b4 	bl	80090fc <__assert_func>
 8008d94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d9c:	bb35      	cbnz	r5, 8008dec <__d2b+0x7c>
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	d028      	beq.n	8008df6 <__d2b+0x86>
 8008da4:	4668      	mov	r0, sp
 8008da6:	9600      	str	r6, [sp, #0]
 8008da8:	f7ff fd8c 	bl	80088c4 <__lo0bits>
 8008dac:	9900      	ldr	r1, [sp, #0]
 8008dae:	b300      	cbz	r0, 8008df2 <__d2b+0x82>
 8008db0:	9a01      	ldr	r2, [sp, #4]
 8008db2:	f1c0 0320 	rsb	r3, r0, #32
 8008db6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dba:	430b      	orrs	r3, r1
 8008dbc:	40c2      	lsrs	r2, r0
 8008dbe:	6163      	str	r3, [r4, #20]
 8008dc0:	9201      	str	r2, [sp, #4]
 8008dc2:	9b01      	ldr	r3, [sp, #4]
 8008dc4:	61a3      	str	r3, [r4, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bf14      	ite	ne
 8008dca:	2202      	movne	r2, #2
 8008dcc:	2201      	moveq	r2, #1
 8008dce:	6122      	str	r2, [r4, #16]
 8008dd0:	b1d5      	cbz	r5, 8008e08 <__d2b+0x98>
 8008dd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008dd6:	4405      	add	r5, r0
 8008dd8:	f8c9 5000 	str.w	r5, [r9]
 8008ddc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008de0:	f8c8 0000 	str.w	r0, [r8]
 8008de4:	4620      	mov	r0, r4
 8008de6:	b003      	add	sp, #12
 8008de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008df0:	e7d5      	b.n	8008d9e <__d2b+0x2e>
 8008df2:	6161      	str	r1, [r4, #20]
 8008df4:	e7e5      	b.n	8008dc2 <__d2b+0x52>
 8008df6:	a801      	add	r0, sp, #4
 8008df8:	f7ff fd64 	bl	80088c4 <__lo0bits>
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	6163      	str	r3, [r4, #20]
 8008e00:	2201      	movs	r2, #1
 8008e02:	6122      	str	r2, [r4, #16]
 8008e04:	3020      	adds	r0, #32
 8008e06:	e7e3      	b.n	8008dd0 <__d2b+0x60>
 8008e08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e10:	f8c9 0000 	str.w	r0, [r9]
 8008e14:	6918      	ldr	r0, [r3, #16]
 8008e16:	f7ff fd35 	bl	8008884 <__hi0bits>
 8008e1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e1e:	e7df      	b.n	8008de0 <__d2b+0x70>
 8008e20:	0800a2ff 	.word	0x0800a2ff
 8008e24:	0800a310 	.word	0x0800a310

08008e28 <_calloc_r>:
 8008e28:	b513      	push	{r0, r1, r4, lr}
 8008e2a:	434a      	muls	r2, r1
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	9201      	str	r2, [sp, #4]
 8008e30:	f7fe f8de 	bl	8006ff0 <_malloc_r>
 8008e34:	4604      	mov	r4, r0
 8008e36:	b118      	cbz	r0, 8008e40 <_calloc_r+0x18>
 8008e38:	9a01      	ldr	r2, [sp, #4]
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	f7fe f880 	bl	8006f40 <memset>
 8008e40:	4620      	mov	r0, r4
 8008e42:	b002      	add	sp, #8
 8008e44:	bd10      	pop	{r4, pc}

08008e46 <__ssputs_r>:
 8008e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e4a:	688e      	ldr	r6, [r1, #8]
 8008e4c:	429e      	cmp	r6, r3
 8008e4e:	4682      	mov	sl, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	4690      	mov	r8, r2
 8008e54:	461f      	mov	r7, r3
 8008e56:	d838      	bhi.n	8008eca <__ssputs_r+0x84>
 8008e58:	898a      	ldrh	r2, [r1, #12]
 8008e5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e5e:	d032      	beq.n	8008ec6 <__ssputs_r+0x80>
 8008e60:	6825      	ldr	r5, [r4, #0]
 8008e62:	6909      	ldr	r1, [r1, #16]
 8008e64:	eba5 0901 	sub.w	r9, r5, r1
 8008e68:	6965      	ldr	r5, [r4, #20]
 8008e6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e72:	3301      	adds	r3, #1
 8008e74:	444b      	add	r3, r9
 8008e76:	106d      	asrs	r5, r5, #1
 8008e78:	429d      	cmp	r5, r3
 8008e7a:	bf38      	it	cc
 8008e7c:	461d      	movcc	r5, r3
 8008e7e:	0553      	lsls	r3, r2, #21
 8008e80:	d531      	bpl.n	8008ee6 <__ssputs_r+0xa0>
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7fe f8b4 	bl	8006ff0 <_malloc_r>
 8008e88:	4606      	mov	r6, r0
 8008e8a:	b950      	cbnz	r0, 8008ea2 <__ssputs_r+0x5c>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	f8ca 3000 	str.w	r3, [sl]
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea2:	6921      	ldr	r1, [r4, #16]
 8008ea4:	464a      	mov	r2, r9
 8008ea6:	f7ff fc27 	bl	80086f8 <memcpy>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	6126      	str	r6, [r4, #16]
 8008eb8:	6165      	str	r5, [r4, #20]
 8008eba:	444e      	add	r6, r9
 8008ebc:	eba5 0509 	sub.w	r5, r5, r9
 8008ec0:	6026      	str	r6, [r4, #0]
 8008ec2:	60a5      	str	r5, [r4, #8]
 8008ec4:	463e      	mov	r6, r7
 8008ec6:	42be      	cmp	r6, r7
 8008ec8:	d900      	bls.n	8008ecc <__ssputs_r+0x86>
 8008eca:	463e      	mov	r6, r7
 8008ecc:	4632      	mov	r2, r6
 8008ece:	6820      	ldr	r0, [r4, #0]
 8008ed0:	4641      	mov	r1, r8
 8008ed2:	f000 f958 	bl	8009186 <memmove>
 8008ed6:	68a3      	ldr	r3, [r4, #8]
 8008ed8:	6822      	ldr	r2, [r4, #0]
 8008eda:	1b9b      	subs	r3, r3, r6
 8008edc:	4432      	add	r2, r6
 8008ede:	60a3      	str	r3, [r4, #8]
 8008ee0:	6022      	str	r2, [r4, #0]
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	e7db      	b.n	8008e9e <__ssputs_r+0x58>
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	f000 f967 	bl	80091ba <_realloc_r>
 8008eec:	4606      	mov	r6, r0
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d1e1      	bne.n	8008eb6 <__ssputs_r+0x70>
 8008ef2:	6921      	ldr	r1, [r4, #16]
 8008ef4:	4650      	mov	r0, sl
 8008ef6:	f7fe f82b 	bl	8006f50 <_free_r>
 8008efa:	e7c7      	b.n	8008e8c <__ssputs_r+0x46>

08008efc <_svfiprintf_r>:
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	4698      	mov	r8, r3
 8008f02:	898b      	ldrh	r3, [r1, #12]
 8008f04:	061b      	lsls	r3, r3, #24
 8008f06:	b09d      	sub	sp, #116	; 0x74
 8008f08:	4607      	mov	r7, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	d50e      	bpl.n	8008f2e <_svfiprintf_r+0x32>
 8008f10:	690b      	ldr	r3, [r1, #16]
 8008f12:	b963      	cbnz	r3, 8008f2e <_svfiprintf_r+0x32>
 8008f14:	2140      	movs	r1, #64	; 0x40
 8008f16:	f7fe f86b 	bl	8006ff0 <_malloc_r>
 8008f1a:	6028      	str	r0, [r5, #0]
 8008f1c:	6128      	str	r0, [r5, #16]
 8008f1e:	b920      	cbnz	r0, 8008f2a <_svfiprintf_r+0x2e>
 8008f20:	230c      	movs	r3, #12
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	e0d1      	b.n	80090ce <_svfiprintf_r+0x1d2>
 8008f2a:	2340      	movs	r3, #64	; 0x40
 8008f2c:	616b      	str	r3, [r5, #20]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9309      	str	r3, [sp, #36]	; 0x24
 8008f32:	2320      	movs	r3, #32
 8008f34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f3c:	2330      	movs	r3, #48	; 0x30
 8008f3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090e8 <_svfiprintf_r+0x1ec>
 8008f42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f46:	f04f 0901 	mov.w	r9, #1
 8008f4a:	4623      	mov	r3, r4
 8008f4c:	469a      	mov	sl, r3
 8008f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f52:	b10a      	cbz	r2, 8008f58 <_svfiprintf_r+0x5c>
 8008f54:	2a25      	cmp	r2, #37	; 0x25
 8008f56:	d1f9      	bne.n	8008f4c <_svfiprintf_r+0x50>
 8008f58:	ebba 0b04 	subs.w	fp, sl, r4
 8008f5c:	d00b      	beq.n	8008f76 <_svfiprintf_r+0x7a>
 8008f5e:	465b      	mov	r3, fp
 8008f60:	4622      	mov	r2, r4
 8008f62:	4629      	mov	r1, r5
 8008f64:	4638      	mov	r0, r7
 8008f66:	f7ff ff6e 	bl	8008e46 <__ssputs_r>
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	f000 80aa 	beq.w	80090c4 <_svfiprintf_r+0x1c8>
 8008f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f72:	445a      	add	r2, fp
 8008f74:	9209      	str	r2, [sp, #36]	; 0x24
 8008f76:	f89a 3000 	ldrb.w	r3, [sl]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80a2 	beq.w	80090c4 <_svfiprintf_r+0x1c8>
 8008f80:	2300      	movs	r3, #0
 8008f82:	f04f 32ff 	mov.w	r2, #4294967295
 8008f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f8a:	f10a 0a01 	add.w	sl, sl, #1
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	9307      	str	r3, [sp, #28]
 8008f92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f96:	931a      	str	r3, [sp, #104]	; 0x68
 8008f98:	4654      	mov	r4, sl
 8008f9a:	2205      	movs	r2, #5
 8008f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa0:	4851      	ldr	r0, [pc, #324]	; (80090e8 <_svfiprintf_r+0x1ec>)
 8008fa2:	f7f7 f925 	bl	80001f0 <memchr>
 8008fa6:	9a04      	ldr	r2, [sp, #16]
 8008fa8:	b9d8      	cbnz	r0, 8008fe2 <_svfiprintf_r+0xe6>
 8008faa:	06d0      	lsls	r0, r2, #27
 8008fac:	bf44      	itt	mi
 8008fae:	2320      	movmi	r3, #32
 8008fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb4:	0711      	lsls	r1, r2, #28
 8008fb6:	bf44      	itt	mi
 8008fb8:	232b      	movmi	r3, #43	; 0x2b
 8008fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc4:	d015      	beq.n	8008ff2 <_svfiprintf_r+0xf6>
 8008fc6:	9a07      	ldr	r2, [sp, #28]
 8008fc8:	4654      	mov	r4, sl
 8008fca:	2000      	movs	r0, #0
 8008fcc:	f04f 0c0a 	mov.w	ip, #10
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fd6:	3b30      	subs	r3, #48	; 0x30
 8008fd8:	2b09      	cmp	r3, #9
 8008fda:	d94e      	bls.n	800907a <_svfiprintf_r+0x17e>
 8008fdc:	b1b0      	cbz	r0, 800900c <_svfiprintf_r+0x110>
 8008fde:	9207      	str	r2, [sp, #28]
 8008fe0:	e014      	b.n	800900c <_svfiprintf_r+0x110>
 8008fe2:	eba0 0308 	sub.w	r3, r0, r8
 8008fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fea:	4313      	orrs	r3, r2
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	46a2      	mov	sl, r4
 8008ff0:	e7d2      	b.n	8008f98 <_svfiprintf_r+0x9c>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	1d19      	adds	r1, r3, #4
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	9103      	str	r1, [sp, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	bfbb      	ittet	lt
 8008ffe:	425b      	neglt	r3, r3
 8009000:	f042 0202 	orrlt.w	r2, r2, #2
 8009004:	9307      	strge	r3, [sp, #28]
 8009006:	9307      	strlt	r3, [sp, #28]
 8009008:	bfb8      	it	lt
 800900a:	9204      	strlt	r2, [sp, #16]
 800900c:	7823      	ldrb	r3, [r4, #0]
 800900e:	2b2e      	cmp	r3, #46	; 0x2e
 8009010:	d10c      	bne.n	800902c <_svfiprintf_r+0x130>
 8009012:	7863      	ldrb	r3, [r4, #1]
 8009014:	2b2a      	cmp	r3, #42	; 0x2a
 8009016:	d135      	bne.n	8009084 <_svfiprintf_r+0x188>
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	1d1a      	adds	r2, r3, #4
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	9203      	str	r2, [sp, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	bfb8      	it	lt
 8009024:	f04f 33ff 	movlt.w	r3, #4294967295
 8009028:	3402      	adds	r4, #2
 800902a:	9305      	str	r3, [sp, #20]
 800902c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090f8 <_svfiprintf_r+0x1fc>
 8009030:	7821      	ldrb	r1, [r4, #0]
 8009032:	2203      	movs	r2, #3
 8009034:	4650      	mov	r0, sl
 8009036:	f7f7 f8db 	bl	80001f0 <memchr>
 800903a:	b140      	cbz	r0, 800904e <_svfiprintf_r+0x152>
 800903c:	2340      	movs	r3, #64	; 0x40
 800903e:	eba0 000a 	sub.w	r0, r0, sl
 8009042:	fa03 f000 	lsl.w	r0, r3, r0
 8009046:	9b04      	ldr	r3, [sp, #16]
 8009048:	4303      	orrs	r3, r0
 800904a:	3401      	adds	r4, #1
 800904c:	9304      	str	r3, [sp, #16]
 800904e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009052:	4826      	ldr	r0, [pc, #152]	; (80090ec <_svfiprintf_r+0x1f0>)
 8009054:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009058:	2206      	movs	r2, #6
 800905a:	f7f7 f8c9 	bl	80001f0 <memchr>
 800905e:	2800      	cmp	r0, #0
 8009060:	d038      	beq.n	80090d4 <_svfiprintf_r+0x1d8>
 8009062:	4b23      	ldr	r3, [pc, #140]	; (80090f0 <_svfiprintf_r+0x1f4>)
 8009064:	bb1b      	cbnz	r3, 80090ae <_svfiprintf_r+0x1b2>
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	3307      	adds	r3, #7
 800906a:	f023 0307 	bic.w	r3, r3, #7
 800906e:	3308      	adds	r3, #8
 8009070:	9303      	str	r3, [sp, #12]
 8009072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009074:	4433      	add	r3, r6
 8009076:	9309      	str	r3, [sp, #36]	; 0x24
 8009078:	e767      	b.n	8008f4a <_svfiprintf_r+0x4e>
 800907a:	fb0c 3202 	mla	r2, ip, r2, r3
 800907e:	460c      	mov	r4, r1
 8009080:	2001      	movs	r0, #1
 8009082:	e7a5      	b.n	8008fd0 <_svfiprintf_r+0xd4>
 8009084:	2300      	movs	r3, #0
 8009086:	3401      	adds	r4, #1
 8009088:	9305      	str	r3, [sp, #20]
 800908a:	4619      	mov	r1, r3
 800908c:	f04f 0c0a 	mov.w	ip, #10
 8009090:	4620      	mov	r0, r4
 8009092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009096:	3a30      	subs	r2, #48	; 0x30
 8009098:	2a09      	cmp	r2, #9
 800909a:	d903      	bls.n	80090a4 <_svfiprintf_r+0x1a8>
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0c5      	beq.n	800902c <_svfiprintf_r+0x130>
 80090a0:	9105      	str	r1, [sp, #20]
 80090a2:	e7c3      	b.n	800902c <_svfiprintf_r+0x130>
 80090a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80090a8:	4604      	mov	r4, r0
 80090aa:	2301      	movs	r3, #1
 80090ac:	e7f0      	b.n	8009090 <_svfiprintf_r+0x194>
 80090ae:	ab03      	add	r3, sp, #12
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	462a      	mov	r2, r5
 80090b4:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <_svfiprintf_r+0x1f8>)
 80090b6:	a904      	add	r1, sp, #16
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7fe f893 	bl	80071e4 <_printf_float>
 80090be:	1c42      	adds	r2, r0, #1
 80090c0:	4606      	mov	r6, r0
 80090c2:	d1d6      	bne.n	8009072 <_svfiprintf_r+0x176>
 80090c4:	89ab      	ldrh	r3, [r5, #12]
 80090c6:	065b      	lsls	r3, r3, #25
 80090c8:	f53f af2c 	bmi.w	8008f24 <_svfiprintf_r+0x28>
 80090cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ce:	b01d      	add	sp, #116	; 0x74
 80090d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d4:	ab03      	add	r3, sp, #12
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	462a      	mov	r2, r5
 80090da:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <_svfiprintf_r+0x1f8>)
 80090dc:	a904      	add	r1, sp, #16
 80090de:	4638      	mov	r0, r7
 80090e0:	f7fe fb24 	bl	800772c <_printf_i>
 80090e4:	e7eb      	b.n	80090be <_svfiprintf_r+0x1c2>
 80090e6:	bf00      	nop
 80090e8:	0800a46c 	.word	0x0800a46c
 80090ec:	0800a476 	.word	0x0800a476
 80090f0:	080071e5 	.word	0x080071e5
 80090f4:	08008e47 	.word	0x08008e47
 80090f8:	0800a472 	.word	0x0800a472

080090fc <__assert_func>:
 80090fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090fe:	4614      	mov	r4, r2
 8009100:	461a      	mov	r2, r3
 8009102:	4b09      	ldr	r3, [pc, #36]	; (8009128 <__assert_func+0x2c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4605      	mov	r5, r0
 8009108:	68d8      	ldr	r0, [r3, #12]
 800910a:	b14c      	cbz	r4, 8009120 <__assert_func+0x24>
 800910c:	4b07      	ldr	r3, [pc, #28]	; (800912c <__assert_func+0x30>)
 800910e:	9100      	str	r1, [sp, #0]
 8009110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009114:	4906      	ldr	r1, [pc, #24]	; (8009130 <__assert_func+0x34>)
 8009116:	462b      	mov	r3, r5
 8009118:	f000 f80e 	bl	8009138 <fiprintf>
 800911c:	f000 fa9a 	bl	8009654 <abort>
 8009120:	4b04      	ldr	r3, [pc, #16]	; (8009134 <__assert_func+0x38>)
 8009122:	461c      	mov	r4, r3
 8009124:	e7f3      	b.n	800910e <__assert_func+0x12>
 8009126:	bf00      	nop
 8009128:	20000010 	.word	0x20000010
 800912c:	0800a47d 	.word	0x0800a47d
 8009130:	0800a48a 	.word	0x0800a48a
 8009134:	0800a4b8 	.word	0x0800a4b8

08009138 <fiprintf>:
 8009138:	b40e      	push	{r1, r2, r3}
 800913a:	b503      	push	{r0, r1, lr}
 800913c:	4601      	mov	r1, r0
 800913e:	ab03      	add	r3, sp, #12
 8009140:	4805      	ldr	r0, [pc, #20]	; (8009158 <fiprintf+0x20>)
 8009142:	f853 2b04 	ldr.w	r2, [r3], #4
 8009146:	6800      	ldr	r0, [r0, #0]
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	f000 f885 	bl	8009258 <_vfiprintf_r>
 800914e:	b002      	add	sp, #8
 8009150:	f85d eb04 	ldr.w	lr, [sp], #4
 8009154:	b003      	add	sp, #12
 8009156:	4770      	bx	lr
 8009158:	20000010 	.word	0x20000010

0800915c <__retarget_lock_init_recursive>:
 800915c:	4770      	bx	lr

0800915e <__retarget_lock_acquire_recursive>:
 800915e:	4770      	bx	lr

08009160 <__retarget_lock_release_recursive>:
 8009160:	4770      	bx	lr

08009162 <__ascii_mbtowc>:
 8009162:	b082      	sub	sp, #8
 8009164:	b901      	cbnz	r1, 8009168 <__ascii_mbtowc+0x6>
 8009166:	a901      	add	r1, sp, #4
 8009168:	b142      	cbz	r2, 800917c <__ascii_mbtowc+0x1a>
 800916a:	b14b      	cbz	r3, 8009180 <__ascii_mbtowc+0x1e>
 800916c:	7813      	ldrb	r3, [r2, #0]
 800916e:	600b      	str	r3, [r1, #0]
 8009170:	7812      	ldrb	r2, [r2, #0]
 8009172:	1e10      	subs	r0, r2, #0
 8009174:	bf18      	it	ne
 8009176:	2001      	movne	r0, #1
 8009178:	b002      	add	sp, #8
 800917a:	4770      	bx	lr
 800917c:	4610      	mov	r0, r2
 800917e:	e7fb      	b.n	8009178 <__ascii_mbtowc+0x16>
 8009180:	f06f 0001 	mvn.w	r0, #1
 8009184:	e7f8      	b.n	8009178 <__ascii_mbtowc+0x16>

08009186 <memmove>:
 8009186:	4288      	cmp	r0, r1
 8009188:	b510      	push	{r4, lr}
 800918a:	eb01 0402 	add.w	r4, r1, r2
 800918e:	d902      	bls.n	8009196 <memmove+0x10>
 8009190:	4284      	cmp	r4, r0
 8009192:	4623      	mov	r3, r4
 8009194:	d807      	bhi.n	80091a6 <memmove+0x20>
 8009196:	1e43      	subs	r3, r0, #1
 8009198:	42a1      	cmp	r1, r4
 800919a:	d008      	beq.n	80091ae <memmove+0x28>
 800919c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091a4:	e7f8      	b.n	8009198 <memmove+0x12>
 80091a6:	4402      	add	r2, r0
 80091a8:	4601      	mov	r1, r0
 80091aa:	428a      	cmp	r2, r1
 80091ac:	d100      	bne.n	80091b0 <memmove+0x2a>
 80091ae:	bd10      	pop	{r4, pc}
 80091b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091b8:	e7f7      	b.n	80091aa <memmove+0x24>

080091ba <_realloc_r>:
 80091ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091bc:	4607      	mov	r7, r0
 80091be:	4614      	mov	r4, r2
 80091c0:	460e      	mov	r6, r1
 80091c2:	b921      	cbnz	r1, 80091ce <_realloc_r+0x14>
 80091c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091c8:	4611      	mov	r1, r2
 80091ca:	f7fd bf11 	b.w	8006ff0 <_malloc_r>
 80091ce:	b922      	cbnz	r2, 80091da <_realloc_r+0x20>
 80091d0:	f7fd febe 	bl	8006f50 <_free_r>
 80091d4:	4625      	mov	r5, r4
 80091d6:	4628      	mov	r0, r5
 80091d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091da:	f000 fc5f 	bl	8009a9c <_malloc_usable_size_r>
 80091de:	42a0      	cmp	r0, r4
 80091e0:	d20f      	bcs.n	8009202 <_realloc_r+0x48>
 80091e2:	4621      	mov	r1, r4
 80091e4:	4638      	mov	r0, r7
 80091e6:	f7fd ff03 	bl	8006ff0 <_malloc_r>
 80091ea:	4605      	mov	r5, r0
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d0f2      	beq.n	80091d6 <_realloc_r+0x1c>
 80091f0:	4631      	mov	r1, r6
 80091f2:	4622      	mov	r2, r4
 80091f4:	f7ff fa80 	bl	80086f8 <memcpy>
 80091f8:	4631      	mov	r1, r6
 80091fa:	4638      	mov	r0, r7
 80091fc:	f7fd fea8 	bl	8006f50 <_free_r>
 8009200:	e7e9      	b.n	80091d6 <_realloc_r+0x1c>
 8009202:	4635      	mov	r5, r6
 8009204:	e7e7      	b.n	80091d6 <_realloc_r+0x1c>

08009206 <__sfputc_r>:
 8009206:	6893      	ldr	r3, [r2, #8]
 8009208:	3b01      	subs	r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	b410      	push	{r4}
 800920e:	6093      	str	r3, [r2, #8]
 8009210:	da08      	bge.n	8009224 <__sfputc_r+0x1e>
 8009212:	6994      	ldr	r4, [r2, #24]
 8009214:	42a3      	cmp	r3, r4
 8009216:	db01      	blt.n	800921c <__sfputc_r+0x16>
 8009218:	290a      	cmp	r1, #10
 800921a:	d103      	bne.n	8009224 <__sfputc_r+0x1e>
 800921c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009220:	f000 b94a 	b.w	80094b8 <__swbuf_r>
 8009224:	6813      	ldr	r3, [r2, #0]
 8009226:	1c58      	adds	r0, r3, #1
 8009228:	6010      	str	r0, [r2, #0]
 800922a:	7019      	strb	r1, [r3, #0]
 800922c:	4608      	mov	r0, r1
 800922e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009232:	4770      	bx	lr

08009234 <__sfputs_r>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	4606      	mov	r6, r0
 8009238:	460f      	mov	r7, r1
 800923a:	4614      	mov	r4, r2
 800923c:	18d5      	adds	r5, r2, r3
 800923e:	42ac      	cmp	r4, r5
 8009240:	d101      	bne.n	8009246 <__sfputs_r+0x12>
 8009242:	2000      	movs	r0, #0
 8009244:	e007      	b.n	8009256 <__sfputs_r+0x22>
 8009246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924a:	463a      	mov	r2, r7
 800924c:	4630      	mov	r0, r6
 800924e:	f7ff ffda 	bl	8009206 <__sfputc_r>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d1f3      	bne.n	800923e <__sfputs_r+0xa>
 8009256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009258 <_vfiprintf_r>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	460d      	mov	r5, r1
 800925e:	b09d      	sub	sp, #116	; 0x74
 8009260:	4614      	mov	r4, r2
 8009262:	4698      	mov	r8, r3
 8009264:	4606      	mov	r6, r0
 8009266:	b118      	cbz	r0, 8009270 <_vfiprintf_r+0x18>
 8009268:	6983      	ldr	r3, [r0, #24]
 800926a:	b90b      	cbnz	r3, 8009270 <_vfiprintf_r+0x18>
 800926c:	f000 fb14 	bl	8009898 <__sinit>
 8009270:	4b89      	ldr	r3, [pc, #548]	; (8009498 <_vfiprintf_r+0x240>)
 8009272:	429d      	cmp	r5, r3
 8009274:	d11b      	bne.n	80092ae <_vfiprintf_r+0x56>
 8009276:	6875      	ldr	r5, [r6, #4]
 8009278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800927a:	07d9      	lsls	r1, r3, #31
 800927c:	d405      	bmi.n	800928a <_vfiprintf_r+0x32>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	059a      	lsls	r2, r3, #22
 8009282:	d402      	bmi.n	800928a <_vfiprintf_r+0x32>
 8009284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009286:	f7ff ff6a 	bl	800915e <__retarget_lock_acquire_recursive>
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	071b      	lsls	r3, r3, #28
 800928e:	d501      	bpl.n	8009294 <_vfiprintf_r+0x3c>
 8009290:	692b      	ldr	r3, [r5, #16]
 8009292:	b9eb      	cbnz	r3, 80092d0 <_vfiprintf_r+0x78>
 8009294:	4629      	mov	r1, r5
 8009296:	4630      	mov	r0, r6
 8009298:	f000 f96e 	bl	8009578 <__swsetup_r>
 800929c:	b1c0      	cbz	r0, 80092d0 <_vfiprintf_r+0x78>
 800929e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092a0:	07dc      	lsls	r4, r3, #31
 80092a2:	d50e      	bpl.n	80092c2 <_vfiprintf_r+0x6a>
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	b01d      	add	sp, #116	; 0x74
 80092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ae:	4b7b      	ldr	r3, [pc, #492]	; (800949c <_vfiprintf_r+0x244>)
 80092b0:	429d      	cmp	r5, r3
 80092b2:	d101      	bne.n	80092b8 <_vfiprintf_r+0x60>
 80092b4:	68b5      	ldr	r5, [r6, #8]
 80092b6:	e7df      	b.n	8009278 <_vfiprintf_r+0x20>
 80092b8:	4b79      	ldr	r3, [pc, #484]	; (80094a0 <_vfiprintf_r+0x248>)
 80092ba:	429d      	cmp	r5, r3
 80092bc:	bf08      	it	eq
 80092be:	68f5      	ldreq	r5, [r6, #12]
 80092c0:	e7da      	b.n	8009278 <_vfiprintf_r+0x20>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	0598      	lsls	r0, r3, #22
 80092c6:	d4ed      	bmi.n	80092a4 <_vfiprintf_r+0x4c>
 80092c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ca:	f7ff ff49 	bl	8009160 <__retarget_lock_release_recursive>
 80092ce:	e7e9      	b.n	80092a4 <_vfiprintf_r+0x4c>
 80092d0:	2300      	movs	r3, #0
 80092d2:	9309      	str	r3, [sp, #36]	; 0x24
 80092d4:	2320      	movs	r3, #32
 80092d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092da:	f8cd 800c 	str.w	r8, [sp, #12]
 80092de:	2330      	movs	r3, #48	; 0x30
 80092e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094a4 <_vfiprintf_r+0x24c>
 80092e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092e8:	f04f 0901 	mov.w	r9, #1
 80092ec:	4623      	mov	r3, r4
 80092ee:	469a      	mov	sl, r3
 80092f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092f4:	b10a      	cbz	r2, 80092fa <_vfiprintf_r+0xa2>
 80092f6:	2a25      	cmp	r2, #37	; 0x25
 80092f8:	d1f9      	bne.n	80092ee <_vfiprintf_r+0x96>
 80092fa:	ebba 0b04 	subs.w	fp, sl, r4
 80092fe:	d00b      	beq.n	8009318 <_vfiprintf_r+0xc0>
 8009300:	465b      	mov	r3, fp
 8009302:	4622      	mov	r2, r4
 8009304:	4629      	mov	r1, r5
 8009306:	4630      	mov	r0, r6
 8009308:	f7ff ff94 	bl	8009234 <__sfputs_r>
 800930c:	3001      	adds	r0, #1
 800930e:	f000 80aa 	beq.w	8009466 <_vfiprintf_r+0x20e>
 8009312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009314:	445a      	add	r2, fp
 8009316:	9209      	str	r2, [sp, #36]	; 0x24
 8009318:	f89a 3000 	ldrb.w	r3, [sl]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 80a2 	beq.w	8009466 <_vfiprintf_r+0x20e>
 8009322:	2300      	movs	r3, #0
 8009324:	f04f 32ff 	mov.w	r2, #4294967295
 8009328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800932c:	f10a 0a01 	add.w	sl, sl, #1
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	9307      	str	r3, [sp, #28]
 8009334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009338:	931a      	str	r3, [sp, #104]	; 0x68
 800933a:	4654      	mov	r4, sl
 800933c:	2205      	movs	r2, #5
 800933e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009342:	4858      	ldr	r0, [pc, #352]	; (80094a4 <_vfiprintf_r+0x24c>)
 8009344:	f7f6 ff54 	bl	80001f0 <memchr>
 8009348:	9a04      	ldr	r2, [sp, #16]
 800934a:	b9d8      	cbnz	r0, 8009384 <_vfiprintf_r+0x12c>
 800934c:	06d1      	lsls	r1, r2, #27
 800934e:	bf44      	itt	mi
 8009350:	2320      	movmi	r3, #32
 8009352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009356:	0713      	lsls	r3, r2, #28
 8009358:	bf44      	itt	mi
 800935a:	232b      	movmi	r3, #43	; 0x2b
 800935c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009360:	f89a 3000 	ldrb.w	r3, [sl]
 8009364:	2b2a      	cmp	r3, #42	; 0x2a
 8009366:	d015      	beq.n	8009394 <_vfiprintf_r+0x13c>
 8009368:	9a07      	ldr	r2, [sp, #28]
 800936a:	4654      	mov	r4, sl
 800936c:	2000      	movs	r0, #0
 800936e:	f04f 0c0a 	mov.w	ip, #10
 8009372:	4621      	mov	r1, r4
 8009374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009378:	3b30      	subs	r3, #48	; 0x30
 800937a:	2b09      	cmp	r3, #9
 800937c:	d94e      	bls.n	800941c <_vfiprintf_r+0x1c4>
 800937e:	b1b0      	cbz	r0, 80093ae <_vfiprintf_r+0x156>
 8009380:	9207      	str	r2, [sp, #28]
 8009382:	e014      	b.n	80093ae <_vfiprintf_r+0x156>
 8009384:	eba0 0308 	sub.w	r3, r0, r8
 8009388:	fa09 f303 	lsl.w	r3, r9, r3
 800938c:	4313      	orrs	r3, r2
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	46a2      	mov	sl, r4
 8009392:	e7d2      	b.n	800933a <_vfiprintf_r+0xe2>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	1d19      	adds	r1, r3, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	9103      	str	r1, [sp, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	bfbb      	ittet	lt
 80093a0:	425b      	neglt	r3, r3
 80093a2:	f042 0202 	orrlt.w	r2, r2, #2
 80093a6:	9307      	strge	r3, [sp, #28]
 80093a8:	9307      	strlt	r3, [sp, #28]
 80093aa:	bfb8      	it	lt
 80093ac:	9204      	strlt	r2, [sp, #16]
 80093ae:	7823      	ldrb	r3, [r4, #0]
 80093b0:	2b2e      	cmp	r3, #46	; 0x2e
 80093b2:	d10c      	bne.n	80093ce <_vfiprintf_r+0x176>
 80093b4:	7863      	ldrb	r3, [r4, #1]
 80093b6:	2b2a      	cmp	r3, #42	; 0x2a
 80093b8:	d135      	bne.n	8009426 <_vfiprintf_r+0x1ce>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	1d1a      	adds	r2, r3, #4
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	9203      	str	r2, [sp, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bfb8      	it	lt
 80093c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80093ca:	3402      	adds	r4, #2
 80093cc:	9305      	str	r3, [sp, #20]
 80093ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094b4 <_vfiprintf_r+0x25c>
 80093d2:	7821      	ldrb	r1, [r4, #0]
 80093d4:	2203      	movs	r2, #3
 80093d6:	4650      	mov	r0, sl
 80093d8:	f7f6 ff0a 	bl	80001f0 <memchr>
 80093dc:	b140      	cbz	r0, 80093f0 <_vfiprintf_r+0x198>
 80093de:	2340      	movs	r3, #64	; 0x40
 80093e0:	eba0 000a 	sub.w	r0, r0, sl
 80093e4:	fa03 f000 	lsl.w	r0, r3, r0
 80093e8:	9b04      	ldr	r3, [sp, #16]
 80093ea:	4303      	orrs	r3, r0
 80093ec:	3401      	adds	r4, #1
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f4:	482c      	ldr	r0, [pc, #176]	; (80094a8 <_vfiprintf_r+0x250>)
 80093f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093fa:	2206      	movs	r2, #6
 80093fc:	f7f6 fef8 	bl	80001f0 <memchr>
 8009400:	2800      	cmp	r0, #0
 8009402:	d03f      	beq.n	8009484 <_vfiprintf_r+0x22c>
 8009404:	4b29      	ldr	r3, [pc, #164]	; (80094ac <_vfiprintf_r+0x254>)
 8009406:	bb1b      	cbnz	r3, 8009450 <_vfiprintf_r+0x1f8>
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	3307      	adds	r3, #7
 800940c:	f023 0307 	bic.w	r3, r3, #7
 8009410:	3308      	adds	r3, #8
 8009412:	9303      	str	r3, [sp, #12]
 8009414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009416:	443b      	add	r3, r7
 8009418:	9309      	str	r3, [sp, #36]	; 0x24
 800941a:	e767      	b.n	80092ec <_vfiprintf_r+0x94>
 800941c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009420:	460c      	mov	r4, r1
 8009422:	2001      	movs	r0, #1
 8009424:	e7a5      	b.n	8009372 <_vfiprintf_r+0x11a>
 8009426:	2300      	movs	r3, #0
 8009428:	3401      	adds	r4, #1
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	4619      	mov	r1, r3
 800942e:	f04f 0c0a 	mov.w	ip, #10
 8009432:	4620      	mov	r0, r4
 8009434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009438:	3a30      	subs	r2, #48	; 0x30
 800943a:	2a09      	cmp	r2, #9
 800943c:	d903      	bls.n	8009446 <_vfiprintf_r+0x1ee>
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0c5      	beq.n	80093ce <_vfiprintf_r+0x176>
 8009442:	9105      	str	r1, [sp, #20]
 8009444:	e7c3      	b.n	80093ce <_vfiprintf_r+0x176>
 8009446:	fb0c 2101 	mla	r1, ip, r1, r2
 800944a:	4604      	mov	r4, r0
 800944c:	2301      	movs	r3, #1
 800944e:	e7f0      	b.n	8009432 <_vfiprintf_r+0x1da>
 8009450:	ab03      	add	r3, sp, #12
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	462a      	mov	r2, r5
 8009456:	4b16      	ldr	r3, [pc, #88]	; (80094b0 <_vfiprintf_r+0x258>)
 8009458:	a904      	add	r1, sp, #16
 800945a:	4630      	mov	r0, r6
 800945c:	f7fd fec2 	bl	80071e4 <_printf_float>
 8009460:	4607      	mov	r7, r0
 8009462:	1c78      	adds	r0, r7, #1
 8009464:	d1d6      	bne.n	8009414 <_vfiprintf_r+0x1bc>
 8009466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009468:	07d9      	lsls	r1, r3, #31
 800946a:	d405      	bmi.n	8009478 <_vfiprintf_r+0x220>
 800946c:	89ab      	ldrh	r3, [r5, #12]
 800946e:	059a      	lsls	r2, r3, #22
 8009470:	d402      	bmi.n	8009478 <_vfiprintf_r+0x220>
 8009472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009474:	f7ff fe74 	bl	8009160 <__retarget_lock_release_recursive>
 8009478:	89ab      	ldrh	r3, [r5, #12]
 800947a:	065b      	lsls	r3, r3, #25
 800947c:	f53f af12 	bmi.w	80092a4 <_vfiprintf_r+0x4c>
 8009480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009482:	e711      	b.n	80092a8 <_vfiprintf_r+0x50>
 8009484:	ab03      	add	r3, sp, #12
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	462a      	mov	r2, r5
 800948a:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <_vfiprintf_r+0x258>)
 800948c:	a904      	add	r1, sp, #16
 800948e:	4630      	mov	r0, r6
 8009490:	f7fe f94c 	bl	800772c <_printf_i>
 8009494:	e7e4      	b.n	8009460 <_vfiprintf_r+0x208>
 8009496:	bf00      	nop
 8009498:	0800a5e4 	.word	0x0800a5e4
 800949c:	0800a604 	.word	0x0800a604
 80094a0:	0800a5c4 	.word	0x0800a5c4
 80094a4:	0800a46c 	.word	0x0800a46c
 80094a8:	0800a476 	.word	0x0800a476
 80094ac:	080071e5 	.word	0x080071e5
 80094b0:	08009235 	.word	0x08009235
 80094b4:	0800a472 	.word	0x0800a472

080094b8 <__swbuf_r>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	460e      	mov	r6, r1
 80094bc:	4614      	mov	r4, r2
 80094be:	4605      	mov	r5, r0
 80094c0:	b118      	cbz	r0, 80094ca <__swbuf_r+0x12>
 80094c2:	6983      	ldr	r3, [r0, #24]
 80094c4:	b90b      	cbnz	r3, 80094ca <__swbuf_r+0x12>
 80094c6:	f000 f9e7 	bl	8009898 <__sinit>
 80094ca:	4b21      	ldr	r3, [pc, #132]	; (8009550 <__swbuf_r+0x98>)
 80094cc:	429c      	cmp	r4, r3
 80094ce:	d12b      	bne.n	8009528 <__swbuf_r+0x70>
 80094d0:	686c      	ldr	r4, [r5, #4]
 80094d2:	69a3      	ldr	r3, [r4, #24]
 80094d4:	60a3      	str	r3, [r4, #8]
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	071a      	lsls	r2, r3, #28
 80094da:	d52f      	bpl.n	800953c <__swbuf_r+0x84>
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	b36b      	cbz	r3, 800953c <__swbuf_r+0x84>
 80094e0:	6923      	ldr	r3, [r4, #16]
 80094e2:	6820      	ldr	r0, [r4, #0]
 80094e4:	1ac0      	subs	r0, r0, r3
 80094e6:	6963      	ldr	r3, [r4, #20]
 80094e8:	b2f6      	uxtb	r6, r6
 80094ea:	4283      	cmp	r3, r0
 80094ec:	4637      	mov	r7, r6
 80094ee:	dc04      	bgt.n	80094fa <__swbuf_r+0x42>
 80094f0:	4621      	mov	r1, r4
 80094f2:	4628      	mov	r0, r5
 80094f4:	f000 f93c 	bl	8009770 <_fflush_r>
 80094f8:	bb30      	cbnz	r0, 8009548 <__swbuf_r+0x90>
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	60a3      	str	r3, [r4, #8]
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	6022      	str	r2, [r4, #0]
 8009506:	701e      	strb	r6, [r3, #0]
 8009508:	6963      	ldr	r3, [r4, #20]
 800950a:	3001      	adds	r0, #1
 800950c:	4283      	cmp	r3, r0
 800950e:	d004      	beq.n	800951a <__swbuf_r+0x62>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	07db      	lsls	r3, r3, #31
 8009514:	d506      	bpl.n	8009524 <__swbuf_r+0x6c>
 8009516:	2e0a      	cmp	r6, #10
 8009518:	d104      	bne.n	8009524 <__swbuf_r+0x6c>
 800951a:	4621      	mov	r1, r4
 800951c:	4628      	mov	r0, r5
 800951e:	f000 f927 	bl	8009770 <_fflush_r>
 8009522:	b988      	cbnz	r0, 8009548 <__swbuf_r+0x90>
 8009524:	4638      	mov	r0, r7
 8009526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009528:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <__swbuf_r+0x9c>)
 800952a:	429c      	cmp	r4, r3
 800952c:	d101      	bne.n	8009532 <__swbuf_r+0x7a>
 800952e:	68ac      	ldr	r4, [r5, #8]
 8009530:	e7cf      	b.n	80094d2 <__swbuf_r+0x1a>
 8009532:	4b09      	ldr	r3, [pc, #36]	; (8009558 <__swbuf_r+0xa0>)
 8009534:	429c      	cmp	r4, r3
 8009536:	bf08      	it	eq
 8009538:	68ec      	ldreq	r4, [r5, #12]
 800953a:	e7ca      	b.n	80094d2 <__swbuf_r+0x1a>
 800953c:	4621      	mov	r1, r4
 800953e:	4628      	mov	r0, r5
 8009540:	f000 f81a 	bl	8009578 <__swsetup_r>
 8009544:	2800      	cmp	r0, #0
 8009546:	d0cb      	beq.n	80094e0 <__swbuf_r+0x28>
 8009548:	f04f 37ff 	mov.w	r7, #4294967295
 800954c:	e7ea      	b.n	8009524 <__swbuf_r+0x6c>
 800954e:	bf00      	nop
 8009550:	0800a5e4 	.word	0x0800a5e4
 8009554:	0800a604 	.word	0x0800a604
 8009558:	0800a5c4 	.word	0x0800a5c4

0800955c <__ascii_wctomb>:
 800955c:	b149      	cbz	r1, 8009572 <__ascii_wctomb+0x16>
 800955e:	2aff      	cmp	r2, #255	; 0xff
 8009560:	bf85      	ittet	hi
 8009562:	238a      	movhi	r3, #138	; 0x8a
 8009564:	6003      	strhi	r3, [r0, #0]
 8009566:	700a      	strbls	r2, [r1, #0]
 8009568:	f04f 30ff 	movhi.w	r0, #4294967295
 800956c:	bf98      	it	ls
 800956e:	2001      	movls	r0, #1
 8009570:	4770      	bx	lr
 8009572:	4608      	mov	r0, r1
 8009574:	4770      	bx	lr
	...

08009578 <__swsetup_r>:
 8009578:	4b32      	ldr	r3, [pc, #200]	; (8009644 <__swsetup_r+0xcc>)
 800957a:	b570      	push	{r4, r5, r6, lr}
 800957c:	681d      	ldr	r5, [r3, #0]
 800957e:	4606      	mov	r6, r0
 8009580:	460c      	mov	r4, r1
 8009582:	b125      	cbz	r5, 800958e <__swsetup_r+0x16>
 8009584:	69ab      	ldr	r3, [r5, #24]
 8009586:	b913      	cbnz	r3, 800958e <__swsetup_r+0x16>
 8009588:	4628      	mov	r0, r5
 800958a:	f000 f985 	bl	8009898 <__sinit>
 800958e:	4b2e      	ldr	r3, [pc, #184]	; (8009648 <__swsetup_r+0xd0>)
 8009590:	429c      	cmp	r4, r3
 8009592:	d10f      	bne.n	80095b4 <__swsetup_r+0x3c>
 8009594:	686c      	ldr	r4, [r5, #4]
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800959c:	0719      	lsls	r1, r3, #28
 800959e:	d42c      	bmi.n	80095fa <__swsetup_r+0x82>
 80095a0:	06dd      	lsls	r5, r3, #27
 80095a2:	d411      	bmi.n	80095c8 <__swsetup_r+0x50>
 80095a4:	2309      	movs	r3, #9
 80095a6:	6033      	str	r3, [r6, #0]
 80095a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095ac:	81a3      	strh	r3, [r4, #12]
 80095ae:	f04f 30ff 	mov.w	r0, #4294967295
 80095b2:	e03e      	b.n	8009632 <__swsetup_r+0xba>
 80095b4:	4b25      	ldr	r3, [pc, #148]	; (800964c <__swsetup_r+0xd4>)
 80095b6:	429c      	cmp	r4, r3
 80095b8:	d101      	bne.n	80095be <__swsetup_r+0x46>
 80095ba:	68ac      	ldr	r4, [r5, #8]
 80095bc:	e7eb      	b.n	8009596 <__swsetup_r+0x1e>
 80095be:	4b24      	ldr	r3, [pc, #144]	; (8009650 <__swsetup_r+0xd8>)
 80095c0:	429c      	cmp	r4, r3
 80095c2:	bf08      	it	eq
 80095c4:	68ec      	ldreq	r4, [r5, #12]
 80095c6:	e7e6      	b.n	8009596 <__swsetup_r+0x1e>
 80095c8:	0758      	lsls	r0, r3, #29
 80095ca:	d512      	bpl.n	80095f2 <__swsetup_r+0x7a>
 80095cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ce:	b141      	cbz	r1, 80095e2 <__swsetup_r+0x6a>
 80095d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095d4:	4299      	cmp	r1, r3
 80095d6:	d002      	beq.n	80095de <__swsetup_r+0x66>
 80095d8:	4630      	mov	r0, r6
 80095da:	f7fd fcb9 	bl	8006f50 <_free_r>
 80095de:	2300      	movs	r3, #0
 80095e0:	6363      	str	r3, [r4, #52]	; 0x34
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	2300      	movs	r3, #0
 80095ec:	6063      	str	r3, [r4, #4]
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f043 0308 	orr.w	r3, r3, #8
 80095f8:	81a3      	strh	r3, [r4, #12]
 80095fa:	6923      	ldr	r3, [r4, #16]
 80095fc:	b94b      	cbnz	r3, 8009612 <__swsetup_r+0x9a>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009608:	d003      	beq.n	8009612 <__swsetup_r+0x9a>
 800960a:	4621      	mov	r1, r4
 800960c:	4630      	mov	r0, r6
 800960e:	f000 fa05 	bl	8009a1c <__smakebuf_r>
 8009612:	89a0      	ldrh	r0, [r4, #12]
 8009614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009618:	f010 0301 	ands.w	r3, r0, #1
 800961c:	d00a      	beq.n	8009634 <__swsetup_r+0xbc>
 800961e:	2300      	movs	r3, #0
 8009620:	60a3      	str	r3, [r4, #8]
 8009622:	6963      	ldr	r3, [r4, #20]
 8009624:	425b      	negs	r3, r3
 8009626:	61a3      	str	r3, [r4, #24]
 8009628:	6923      	ldr	r3, [r4, #16]
 800962a:	b943      	cbnz	r3, 800963e <__swsetup_r+0xc6>
 800962c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009630:	d1ba      	bne.n	80095a8 <__swsetup_r+0x30>
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	0781      	lsls	r1, r0, #30
 8009636:	bf58      	it	pl
 8009638:	6963      	ldrpl	r3, [r4, #20]
 800963a:	60a3      	str	r3, [r4, #8]
 800963c:	e7f4      	b.n	8009628 <__swsetup_r+0xb0>
 800963e:	2000      	movs	r0, #0
 8009640:	e7f7      	b.n	8009632 <__swsetup_r+0xba>
 8009642:	bf00      	nop
 8009644:	20000010 	.word	0x20000010
 8009648:	0800a5e4 	.word	0x0800a5e4
 800964c:	0800a604 	.word	0x0800a604
 8009650:	0800a5c4 	.word	0x0800a5c4

08009654 <abort>:
 8009654:	b508      	push	{r3, lr}
 8009656:	2006      	movs	r0, #6
 8009658:	f000 fa50 	bl	8009afc <raise>
 800965c:	2001      	movs	r0, #1
 800965e:	f000 fb55 	bl	8009d0c <_exit>
	...

08009664 <__sflush_r>:
 8009664:	898a      	ldrh	r2, [r1, #12]
 8009666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800966a:	4605      	mov	r5, r0
 800966c:	0710      	lsls	r0, r2, #28
 800966e:	460c      	mov	r4, r1
 8009670:	d458      	bmi.n	8009724 <__sflush_r+0xc0>
 8009672:	684b      	ldr	r3, [r1, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	dc05      	bgt.n	8009684 <__sflush_r+0x20>
 8009678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800967a:	2b00      	cmp	r3, #0
 800967c:	dc02      	bgt.n	8009684 <__sflush_r+0x20>
 800967e:	2000      	movs	r0, #0
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009686:	2e00      	cmp	r6, #0
 8009688:	d0f9      	beq.n	800967e <__sflush_r+0x1a>
 800968a:	2300      	movs	r3, #0
 800968c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009690:	682f      	ldr	r7, [r5, #0]
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	d032      	beq.n	80096fc <__sflush_r+0x98>
 8009696:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	075a      	lsls	r2, r3, #29
 800969c:	d505      	bpl.n	80096aa <__sflush_r+0x46>
 800969e:	6863      	ldr	r3, [r4, #4]
 80096a0:	1ac0      	subs	r0, r0, r3
 80096a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096a4:	b10b      	cbz	r3, 80096aa <__sflush_r+0x46>
 80096a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096a8:	1ac0      	subs	r0, r0, r3
 80096aa:	2300      	movs	r3, #0
 80096ac:	4602      	mov	r2, r0
 80096ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b0:	6a21      	ldr	r1, [r4, #32]
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b0      	blx	r6
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	d106      	bne.n	80096ca <__sflush_r+0x66>
 80096bc:	6829      	ldr	r1, [r5, #0]
 80096be:	291d      	cmp	r1, #29
 80096c0:	d82c      	bhi.n	800971c <__sflush_r+0xb8>
 80096c2:	4a2a      	ldr	r2, [pc, #168]	; (800976c <__sflush_r+0x108>)
 80096c4:	40ca      	lsrs	r2, r1
 80096c6:	07d6      	lsls	r6, r2, #31
 80096c8:	d528      	bpl.n	800971c <__sflush_r+0xb8>
 80096ca:	2200      	movs	r2, #0
 80096cc:	6062      	str	r2, [r4, #4]
 80096ce:	04d9      	lsls	r1, r3, #19
 80096d0:	6922      	ldr	r2, [r4, #16]
 80096d2:	6022      	str	r2, [r4, #0]
 80096d4:	d504      	bpl.n	80096e0 <__sflush_r+0x7c>
 80096d6:	1c42      	adds	r2, r0, #1
 80096d8:	d101      	bne.n	80096de <__sflush_r+0x7a>
 80096da:	682b      	ldr	r3, [r5, #0]
 80096dc:	b903      	cbnz	r3, 80096e0 <__sflush_r+0x7c>
 80096de:	6560      	str	r0, [r4, #84]	; 0x54
 80096e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e2:	602f      	str	r7, [r5, #0]
 80096e4:	2900      	cmp	r1, #0
 80096e6:	d0ca      	beq.n	800967e <__sflush_r+0x1a>
 80096e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ec:	4299      	cmp	r1, r3
 80096ee:	d002      	beq.n	80096f6 <__sflush_r+0x92>
 80096f0:	4628      	mov	r0, r5
 80096f2:	f7fd fc2d 	bl	8006f50 <_free_r>
 80096f6:	2000      	movs	r0, #0
 80096f8:	6360      	str	r0, [r4, #52]	; 0x34
 80096fa:	e7c1      	b.n	8009680 <__sflush_r+0x1c>
 80096fc:	6a21      	ldr	r1, [r4, #32]
 80096fe:	2301      	movs	r3, #1
 8009700:	4628      	mov	r0, r5
 8009702:	47b0      	blx	r6
 8009704:	1c41      	adds	r1, r0, #1
 8009706:	d1c7      	bne.n	8009698 <__sflush_r+0x34>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0c4      	beq.n	8009698 <__sflush_r+0x34>
 800970e:	2b1d      	cmp	r3, #29
 8009710:	d001      	beq.n	8009716 <__sflush_r+0xb2>
 8009712:	2b16      	cmp	r3, #22
 8009714:	d101      	bne.n	800971a <__sflush_r+0xb6>
 8009716:	602f      	str	r7, [r5, #0]
 8009718:	e7b1      	b.n	800967e <__sflush_r+0x1a>
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	e7ad      	b.n	8009680 <__sflush_r+0x1c>
 8009724:	690f      	ldr	r7, [r1, #16]
 8009726:	2f00      	cmp	r7, #0
 8009728:	d0a9      	beq.n	800967e <__sflush_r+0x1a>
 800972a:	0793      	lsls	r3, r2, #30
 800972c:	680e      	ldr	r6, [r1, #0]
 800972e:	bf08      	it	eq
 8009730:	694b      	ldreq	r3, [r1, #20]
 8009732:	600f      	str	r7, [r1, #0]
 8009734:	bf18      	it	ne
 8009736:	2300      	movne	r3, #0
 8009738:	eba6 0807 	sub.w	r8, r6, r7
 800973c:	608b      	str	r3, [r1, #8]
 800973e:	f1b8 0f00 	cmp.w	r8, #0
 8009742:	dd9c      	ble.n	800967e <__sflush_r+0x1a>
 8009744:	6a21      	ldr	r1, [r4, #32]
 8009746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009748:	4643      	mov	r3, r8
 800974a:	463a      	mov	r2, r7
 800974c:	4628      	mov	r0, r5
 800974e:	47b0      	blx	r6
 8009750:	2800      	cmp	r0, #0
 8009752:	dc06      	bgt.n	8009762 <__sflush_r+0xfe>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e78e      	b.n	8009680 <__sflush_r+0x1c>
 8009762:	4407      	add	r7, r0
 8009764:	eba8 0800 	sub.w	r8, r8, r0
 8009768:	e7e9      	b.n	800973e <__sflush_r+0xda>
 800976a:	bf00      	nop
 800976c:	20400001 	.word	0x20400001

08009770 <_fflush_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	4605      	mov	r5, r0
 8009776:	460c      	mov	r4, r1
 8009778:	b913      	cbnz	r3, 8009780 <_fflush_r+0x10>
 800977a:	2500      	movs	r5, #0
 800977c:	4628      	mov	r0, r5
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	b118      	cbz	r0, 800978a <_fflush_r+0x1a>
 8009782:	6983      	ldr	r3, [r0, #24]
 8009784:	b90b      	cbnz	r3, 800978a <_fflush_r+0x1a>
 8009786:	f000 f887 	bl	8009898 <__sinit>
 800978a:	4b14      	ldr	r3, [pc, #80]	; (80097dc <_fflush_r+0x6c>)
 800978c:	429c      	cmp	r4, r3
 800978e:	d11b      	bne.n	80097c8 <_fflush_r+0x58>
 8009790:	686c      	ldr	r4, [r5, #4]
 8009792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0ef      	beq.n	800977a <_fflush_r+0xa>
 800979a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800979c:	07d0      	lsls	r0, r2, #31
 800979e:	d404      	bmi.n	80097aa <_fflush_r+0x3a>
 80097a0:	0599      	lsls	r1, r3, #22
 80097a2:	d402      	bmi.n	80097aa <_fflush_r+0x3a>
 80097a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097a6:	f7ff fcda 	bl	800915e <__retarget_lock_acquire_recursive>
 80097aa:	4628      	mov	r0, r5
 80097ac:	4621      	mov	r1, r4
 80097ae:	f7ff ff59 	bl	8009664 <__sflush_r>
 80097b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b4:	07da      	lsls	r2, r3, #31
 80097b6:	4605      	mov	r5, r0
 80097b8:	d4e0      	bmi.n	800977c <_fflush_r+0xc>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	059b      	lsls	r3, r3, #22
 80097be:	d4dd      	bmi.n	800977c <_fflush_r+0xc>
 80097c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c2:	f7ff fccd 	bl	8009160 <__retarget_lock_release_recursive>
 80097c6:	e7d9      	b.n	800977c <_fflush_r+0xc>
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <_fflush_r+0x70>)
 80097ca:	429c      	cmp	r4, r3
 80097cc:	d101      	bne.n	80097d2 <_fflush_r+0x62>
 80097ce:	68ac      	ldr	r4, [r5, #8]
 80097d0:	e7df      	b.n	8009792 <_fflush_r+0x22>
 80097d2:	4b04      	ldr	r3, [pc, #16]	; (80097e4 <_fflush_r+0x74>)
 80097d4:	429c      	cmp	r4, r3
 80097d6:	bf08      	it	eq
 80097d8:	68ec      	ldreq	r4, [r5, #12]
 80097da:	e7da      	b.n	8009792 <_fflush_r+0x22>
 80097dc:	0800a5e4 	.word	0x0800a5e4
 80097e0:	0800a604 	.word	0x0800a604
 80097e4:	0800a5c4 	.word	0x0800a5c4

080097e8 <std>:
 80097e8:	2300      	movs	r3, #0
 80097ea:	b510      	push	{r4, lr}
 80097ec:	4604      	mov	r4, r0
 80097ee:	e9c0 3300 	strd	r3, r3, [r0]
 80097f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097f6:	6083      	str	r3, [r0, #8]
 80097f8:	8181      	strh	r1, [r0, #12]
 80097fa:	6643      	str	r3, [r0, #100]	; 0x64
 80097fc:	81c2      	strh	r2, [r0, #14]
 80097fe:	6183      	str	r3, [r0, #24]
 8009800:	4619      	mov	r1, r3
 8009802:	2208      	movs	r2, #8
 8009804:	305c      	adds	r0, #92	; 0x5c
 8009806:	f7fd fb9b 	bl	8006f40 <memset>
 800980a:	4b05      	ldr	r3, [pc, #20]	; (8009820 <std+0x38>)
 800980c:	6263      	str	r3, [r4, #36]	; 0x24
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <std+0x3c>)
 8009810:	62a3      	str	r3, [r4, #40]	; 0x28
 8009812:	4b05      	ldr	r3, [pc, #20]	; (8009828 <std+0x40>)
 8009814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009816:	4b05      	ldr	r3, [pc, #20]	; (800982c <std+0x44>)
 8009818:	6224      	str	r4, [r4, #32]
 800981a:	6323      	str	r3, [r4, #48]	; 0x30
 800981c:	bd10      	pop	{r4, pc}
 800981e:	bf00      	nop
 8009820:	08009b35 	.word	0x08009b35
 8009824:	08009b57 	.word	0x08009b57
 8009828:	08009b8f 	.word	0x08009b8f
 800982c:	08009bb3 	.word	0x08009bb3

08009830 <_cleanup_r>:
 8009830:	4901      	ldr	r1, [pc, #4]	; (8009838 <_cleanup_r+0x8>)
 8009832:	f000 b8af 	b.w	8009994 <_fwalk_reent>
 8009836:	bf00      	nop
 8009838:	08009771 	.word	0x08009771

0800983c <__sfmoreglue>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	1e4a      	subs	r2, r1, #1
 8009840:	2568      	movs	r5, #104	; 0x68
 8009842:	4355      	muls	r5, r2
 8009844:	460e      	mov	r6, r1
 8009846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800984a:	f7fd fbd1 	bl	8006ff0 <_malloc_r>
 800984e:	4604      	mov	r4, r0
 8009850:	b140      	cbz	r0, 8009864 <__sfmoreglue+0x28>
 8009852:	2100      	movs	r1, #0
 8009854:	e9c0 1600 	strd	r1, r6, [r0]
 8009858:	300c      	adds	r0, #12
 800985a:	60a0      	str	r0, [r4, #8]
 800985c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009860:	f7fd fb6e 	bl	8006f40 <memset>
 8009864:	4620      	mov	r0, r4
 8009866:	bd70      	pop	{r4, r5, r6, pc}

08009868 <__sfp_lock_acquire>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__sfp_lock_acquire+0x8>)
 800986a:	f7ff bc78 	b.w	800915e <__retarget_lock_acquire_recursive>
 800986e:	bf00      	nop
 8009870:	20004124 	.word	0x20004124

08009874 <__sfp_lock_release>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__sfp_lock_release+0x8>)
 8009876:	f7ff bc73 	b.w	8009160 <__retarget_lock_release_recursive>
 800987a:	bf00      	nop
 800987c:	20004124 	.word	0x20004124

08009880 <__sinit_lock_acquire>:
 8009880:	4801      	ldr	r0, [pc, #4]	; (8009888 <__sinit_lock_acquire+0x8>)
 8009882:	f7ff bc6c 	b.w	800915e <__retarget_lock_acquire_recursive>
 8009886:	bf00      	nop
 8009888:	2000411f 	.word	0x2000411f

0800988c <__sinit_lock_release>:
 800988c:	4801      	ldr	r0, [pc, #4]	; (8009894 <__sinit_lock_release+0x8>)
 800988e:	f7ff bc67 	b.w	8009160 <__retarget_lock_release_recursive>
 8009892:	bf00      	nop
 8009894:	2000411f 	.word	0x2000411f

08009898 <__sinit>:
 8009898:	b510      	push	{r4, lr}
 800989a:	4604      	mov	r4, r0
 800989c:	f7ff fff0 	bl	8009880 <__sinit_lock_acquire>
 80098a0:	69a3      	ldr	r3, [r4, #24]
 80098a2:	b11b      	cbz	r3, 80098ac <__sinit+0x14>
 80098a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a8:	f7ff bff0 	b.w	800988c <__sinit_lock_release>
 80098ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098b0:	6523      	str	r3, [r4, #80]	; 0x50
 80098b2:	4b13      	ldr	r3, [pc, #76]	; (8009900 <__sinit+0x68>)
 80098b4:	4a13      	ldr	r2, [pc, #76]	; (8009904 <__sinit+0x6c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	bf04      	itt	eq
 80098be:	2301      	moveq	r3, #1
 80098c0:	61a3      	streq	r3, [r4, #24]
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 f820 	bl	8009908 <__sfp>
 80098c8:	6060      	str	r0, [r4, #4]
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 f81c 	bl	8009908 <__sfp>
 80098d0:	60a0      	str	r0, [r4, #8]
 80098d2:	4620      	mov	r0, r4
 80098d4:	f000 f818 	bl	8009908 <__sfp>
 80098d8:	2200      	movs	r2, #0
 80098da:	60e0      	str	r0, [r4, #12]
 80098dc:	2104      	movs	r1, #4
 80098de:	6860      	ldr	r0, [r4, #4]
 80098e0:	f7ff ff82 	bl	80097e8 <std>
 80098e4:	68a0      	ldr	r0, [r4, #8]
 80098e6:	2201      	movs	r2, #1
 80098e8:	2109      	movs	r1, #9
 80098ea:	f7ff ff7d 	bl	80097e8 <std>
 80098ee:	68e0      	ldr	r0, [r4, #12]
 80098f0:	2202      	movs	r2, #2
 80098f2:	2112      	movs	r1, #18
 80098f4:	f7ff ff78 	bl	80097e8 <std>
 80098f8:	2301      	movs	r3, #1
 80098fa:	61a3      	str	r3, [r4, #24]
 80098fc:	e7d2      	b.n	80098a4 <__sinit+0xc>
 80098fe:	bf00      	nop
 8009900:	0800a244 	.word	0x0800a244
 8009904:	08009831 	.word	0x08009831

08009908 <__sfp>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	4607      	mov	r7, r0
 800990c:	f7ff ffac 	bl	8009868 <__sfp_lock_acquire>
 8009910:	4b1e      	ldr	r3, [pc, #120]	; (800998c <__sfp+0x84>)
 8009912:	681e      	ldr	r6, [r3, #0]
 8009914:	69b3      	ldr	r3, [r6, #24]
 8009916:	b913      	cbnz	r3, 800991e <__sfp+0x16>
 8009918:	4630      	mov	r0, r6
 800991a:	f7ff ffbd 	bl	8009898 <__sinit>
 800991e:	3648      	adds	r6, #72	; 0x48
 8009920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009924:	3b01      	subs	r3, #1
 8009926:	d503      	bpl.n	8009930 <__sfp+0x28>
 8009928:	6833      	ldr	r3, [r6, #0]
 800992a:	b30b      	cbz	r3, 8009970 <__sfp+0x68>
 800992c:	6836      	ldr	r6, [r6, #0]
 800992e:	e7f7      	b.n	8009920 <__sfp+0x18>
 8009930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009934:	b9d5      	cbnz	r5, 800996c <__sfp+0x64>
 8009936:	4b16      	ldr	r3, [pc, #88]	; (8009990 <__sfp+0x88>)
 8009938:	60e3      	str	r3, [r4, #12]
 800993a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800993e:	6665      	str	r5, [r4, #100]	; 0x64
 8009940:	f7ff fc0c 	bl	800915c <__retarget_lock_init_recursive>
 8009944:	f7ff ff96 	bl	8009874 <__sfp_lock_release>
 8009948:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800994c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009950:	6025      	str	r5, [r4, #0]
 8009952:	61a5      	str	r5, [r4, #24]
 8009954:	2208      	movs	r2, #8
 8009956:	4629      	mov	r1, r5
 8009958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800995c:	f7fd faf0 	bl	8006f40 <memset>
 8009960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009968:	4620      	mov	r0, r4
 800996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996c:	3468      	adds	r4, #104	; 0x68
 800996e:	e7d9      	b.n	8009924 <__sfp+0x1c>
 8009970:	2104      	movs	r1, #4
 8009972:	4638      	mov	r0, r7
 8009974:	f7ff ff62 	bl	800983c <__sfmoreglue>
 8009978:	4604      	mov	r4, r0
 800997a:	6030      	str	r0, [r6, #0]
 800997c:	2800      	cmp	r0, #0
 800997e:	d1d5      	bne.n	800992c <__sfp+0x24>
 8009980:	f7ff ff78 	bl	8009874 <__sfp_lock_release>
 8009984:	230c      	movs	r3, #12
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	e7ee      	b.n	8009968 <__sfp+0x60>
 800998a:	bf00      	nop
 800998c:	0800a244 	.word	0x0800a244
 8009990:	ffff0001 	.word	0xffff0001

08009994 <_fwalk_reent>:
 8009994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009998:	4606      	mov	r6, r0
 800999a:	4688      	mov	r8, r1
 800999c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099a0:	2700      	movs	r7, #0
 80099a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099a6:	f1b9 0901 	subs.w	r9, r9, #1
 80099aa:	d505      	bpl.n	80099b8 <_fwalk_reent+0x24>
 80099ac:	6824      	ldr	r4, [r4, #0]
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	d1f7      	bne.n	80099a2 <_fwalk_reent+0xe>
 80099b2:	4638      	mov	r0, r7
 80099b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b8:	89ab      	ldrh	r3, [r5, #12]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d907      	bls.n	80099ce <_fwalk_reent+0x3a>
 80099be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099c2:	3301      	adds	r3, #1
 80099c4:	d003      	beq.n	80099ce <_fwalk_reent+0x3a>
 80099c6:	4629      	mov	r1, r5
 80099c8:	4630      	mov	r0, r6
 80099ca:	47c0      	blx	r8
 80099cc:	4307      	orrs	r7, r0
 80099ce:	3568      	adds	r5, #104	; 0x68
 80099d0:	e7e9      	b.n	80099a6 <_fwalk_reent+0x12>

080099d2 <__swhatbuf_r>:
 80099d2:	b570      	push	{r4, r5, r6, lr}
 80099d4:	460e      	mov	r6, r1
 80099d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099da:	2900      	cmp	r1, #0
 80099dc:	b096      	sub	sp, #88	; 0x58
 80099de:	4614      	mov	r4, r2
 80099e0:	461d      	mov	r5, r3
 80099e2:	da07      	bge.n	80099f4 <__swhatbuf_r+0x22>
 80099e4:	2300      	movs	r3, #0
 80099e6:	602b      	str	r3, [r5, #0]
 80099e8:	89b3      	ldrh	r3, [r6, #12]
 80099ea:	061a      	lsls	r2, r3, #24
 80099ec:	d410      	bmi.n	8009a10 <__swhatbuf_r+0x3e>
 80099ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099f2:	e00e      	b.n	8009a12 <__swhatbuf_r+0x40>
 80099f4:	466a      	mov	r2, sp
 80099f6:	f000 f903 	bl	8009c00 <_fstat_r>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	dbf2      	blt.n	80099e4 <__swhatbuf_r+0x12>
 80099fe:	9a01      	ldr	r2, [sp, #4]
 8009a00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a08:	425a      	negs	r2, r3
 8009a0a:	415a      	adcs	r2, r3
 8009a0c:	602a      	str	r2, [r5, #0]
 8009a0e:	e7ee      	b.n	80099ee <__swhatbuf_r+0x1c>
 8009a10:	2340      	movs	r3, #64	; 0x40
 8009a12:	2000      	movs	r0, #0
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	b016      	add	sp, #88	; 0x58
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a1c <__smakebuf_r>:
 8009a1c:	898b      	ldrh	r3, [r1, #12]
 8009a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a20:	079d      	lsls	r5, r3, #30
 8009a22:	4606      	mov	r6, r0
 8009a24:	460c      	mov	r4, r1
 8009a26:	d507      	bpl.n	8009a38 <__smakebuf_r+0x1c>
 8009a28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	2301      	movs	r3, #1
 8009a32:	6163      	str	r3, [r4, #20]
 8009a34:	b002      	add	sp, #8
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	ab01      	add	r3, sp, #4
 8009a3a:	466a      	mov	r2, sp
 8009a3c:	f7ff ffc9 	bl	80099d2 <__swhatbuf_r>
 8009a40:	9900      	ldr	r1, [sp, #0]
 8009a42:	4605      	mov	r5, r0
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7fd fad3 	bl	8006ff0 <_malloc_r>
 8009a4a:	b948      	cbnz	r0, 8009a60 <__smakebuf_r+0x44>
 8009a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a50:	059a      	lsls	r2, r3, #22
 8009a52:	d4ef      	bmi.n	8009a34 <__smakebuf_r+0x18>
 8009a54:	f023 0303 	bic.w	r3, r3, #3
 8009a58:	f043 0302 	orr.w	r3, r3, #2
 8009a5c:	81a3      	strh	r3, [r4, #12]
 8009a5e:	e7e3      	b.n	8009a28 <__smakebuf_r+0xc>
 8009a60:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <__smakebuf_r+0x7c>)
 8009a62:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	6020      	str	r0, [r4, #0]
 8009a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	9b00      	ldr	r3, [sp, #0]
 8009a70:	6163      	str	r3, [r4, #20]
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	6120      	str	r0, [r4, #16]
 8009a76:	b15b      	cbz	r3, 8009a90 <__smakebuf_r+0x74>
 8009a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f000 f8d1 	bl	8009c24 <_isatty_r>
 8009a82:	b128      	cbz	r0, 8009a90 <__smakebuf_r+0x74>
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	f023 0303 	bic.w	r3, r3, #3
 8009a8a:	f043 0301 	orr.w	r3, r3, #1
 8009a8e:	81a3      	strh	r3, [r4, #12]
 8009a90:	89a0      	ldrh	r0, [r4, #12]
 8009a92:	4305      	orrs	r5, r0
 8009a94:	81a5      	strh	r5, [r4, #12]
 8009a96:	e7cd      	b.n	8009a34 <__smakebuf_r+0x18>
 8009a98:	08009831 	.word	0x08009831

08009a9c <_malloc_usable_size_r>:
 8009a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa0:	1f18      	subs	r0, r3, #4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	bfbc      	itt	lt
 8009aa6:	580b      	ldrlt	r3, [r1, r0]
 8009aa8:	18c0      	addlt	r0, r0, r3
 8009aaa:	4770      	bx	lr

08009aac <_raise_r>:
 8009aac:	291f      	cmp	r1, #31
 8009aae:	b538      	push	{r3, r4, r5, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	d904      	bls.n	8009ac0 <_raise_r+0x14>
 8009ab6:	2316      	movs	r3, #22
 8009ab8:	6003      	str	r3, [r0, #0]
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ac2:	b112      	cbz	r2, 8009aca <_raise_r+0x1e>
 8009ac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ac8:	b94b      	cbnz	r3, 8009ade <_raise_r+0x32>
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 f830 	bl	8009b30 <_getpid_r>
 8009ad0:	462a      	mov	r2, r5
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ada:	f000 b817 	b.w	8009b0c <_kill_r>
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d00a      	beq.n	8009af8 <_raise_r+0x4c>
 8009ae2:	1c59      	adds	r1, r3, #1
 8009ae4:	d103      	bne.n	8009aee <_raise_r+0x42>
 8009ae6:	2316      	movs	r3, #22
 8009ae8:	6003      	str	r3, [r0, #0]
 8009aea:	2001      	movs	r0, #1
 8009aec:	e7e7      	b.n	8009abe <_raise_r+0x12>
 8009aee:	2400      	movs	r4, #0
 8009af0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009af4:	4628      	mov	r0, r5
 8009af6:	4798      	blx	r3
 8009af8:	2000      	movs	r0, #0
 8009afa:	e7e0      	b.n	8009abe <_raise_r+0x12>

08009afc <raise>:
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <raise+0xc>)
 8009afe:	4601      	mov	r1, r0
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	f7ff bfd3 	b.w	8009aac <_raise_r>
 8009b06:	bf00      	nop
 8009b08:	20000010 	.word	0x20000010

08009b0c <_kill_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	; (8009b2c <_kill_r+0x20>)
 8009b10:	2300      	movs	r3, #0
 8009b12:	4604      	mov	r4, r0
 8009b14:	4608      	mov	r0, r1
 8009b16:	4611      	mov	r1, r2
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	f000 f8d7 	bl	8009ccc <_kill>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	d102      	bne.n	8009b28 <_kill_r+0x1c>
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	b103      	cbz	r3, 8009b28 <_kill_r+0x1c>
 8009b26:	6023      	str	r3, [r4, #0]
 8009b28:	bd38      	pop	{r3, r4, r5, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20004118 	.word	0x20004118

08009b30 <_getpid_r>:
 8009b30:	f000 b8bc 	b.w	8009cac <_getpid>

08009b34 <__sread>:
 8009b34:	b510      	push	{r4, lr}
 8009b36:	460c      	mov	r4, r1
 8009b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b3c:	f000 f894 	bl	8009c68 <_read_r>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	bfab      	itete	ge
 8009b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b46:	89a3      	ldrhlt	r3, [r4, #12]
 8009b48:	181b      	addge	r3, r3, r0
 8009b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b4e:	bfac      	ite	ge
 8009b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b52:	81a3      	strhlt	r3, [r4, #12]
 8009b54:	bd10      	pop	{r4, pc}

08009b56 <__swrite>:
 8009b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5a:	461f      	mov	r7, r3
 8009b5c:	898b      	ldrh	r3, [r1, #12]
 8009b5e:	05db      	lsls	r3, r3, #23
 8009b60:	4605      	mov	r5, r0
 8009b62:	460c      	mov	r4, r1
 8009b64:	4616      	mov	r6, r2
 8009b66:	d505      	bpl.n	8009b74 <__swrite+0x1e>
 8009b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f000 f868 	bl	8009c44 <_lseek_r>
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b7e:	81a3      	strh	r3, [r4, #12]
 8009b80:	4632      	mov	r2, r6
 8009b82:	463b      	mov	r3, r7
 8009b84:	4628      	mov	r0, r5
 8009b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8a:	f000 b817 	b.w	8009bbc <_write_r>

08009b8e <__sseek>:
 8009b8e:	b510      	push	{r4, lr}
 8009b90:	460c      	mov	r4, r1
 8009b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b96:	f000 f855 	bl	8009c44 <_lseek_r>
 8009b9a:	1c43      	adds	r3, r0, #1
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	bf15      	itete	ne
 8009ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009baa:	81a3      	strheq	r3, [r4, #12]
 8009bac:	bf18      	it	ne
 8009bae:	81a3      	strhne	r3, [r4, #12]
 8009bb0:	bd10      	pop	{r4, pc}

08009bb2 <__sclose>:
 8009bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb6:	f000 b813 	b.w	8009be0 <_close_r>
	...

08009bbc <_write_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4d07      	ldr	r5, [pc, #28]	; (8009bdc <_write_r+0x20>)
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	4608      	mov	r0, r1
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	602a      	str	r2, [r5, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f000 f896 	bl	8009cfc <_write>
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	d102      	bne.n	8009bda <_write_r+0x1e>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	b103      	cbz	r3, 8009bda <_write_r+0x1e>
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	20004118 	.word	0x20004118

08009be0 <_close_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d06      	ldr	r5, [pc, #24]	; (8009bfc <_close_r+0x1c>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	602b      	str	r3, [r5, #0]
 8009bec:	f000 f84e 	bl	8009c8c <_close>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_close_r+0x1a>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_close_r+0x1a>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	20004118 	.word	0x20004118

08009c00 <_fstat_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d07      	ldr	r5, [pc, #28]	; (8009c20 <_fstat_r+0x20>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	602b      	str	r3, [r5, #0]
 8009c0e:	f000 f845 	bl	8009c9c <_fstat>
 8009c12:	1c43      	adds	r3, r0, #1
 8009c14:	d102      	bne.n	8009c1c <_fstat_r+0x1c>
 8009c16:	682b      	ldr	r3, [r5, #0]
 8009c18:	b103      	cbz	r3, 8009c1c <_fstat_r+0x1c>
 8009c1a:	6023      	str	r3, [r4, #0]
 8009c1c:	bd38      	pop	{r3, r4, r5, pc}
 8009c1e:	bf00      	nop
 8009c20:	20004118 	.word	0x20004118

08009c24 <_isatty_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d06      	ldr	r5, [pc, #24]	; (8009c40 <_isatty_r+0x1c>)
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	602b      	str	r3, [r5, #0]
 8009c30:	f000 f844 	bl	8009cbc <_isatty>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_isatty_r+0x1a>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_isatty_r+0x1a>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	20004118 	.word	0x20004118

08009c44 <_lseek_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	; (8009c64 <_lseek_r+0x20>)
 8009c48:	4604      	mov	r4, r0
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	602a      	str	r2, [r5, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f000 f842 	bl	8009cdc <_lseek>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_lseek_r+0x1e>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_lseek_r+0x1e>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20004118 	.word	0x20004118

08009c68 <_read_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d07      	ldr	r5, [pc, #28]	; (8009c88 <_read_r+0x20>)
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	4608      	mov	r0, r1
 8009c70:	4611      	mov	r1, r2
 8009c72:	2200      	movs	r2, #0
 8009c74:	602a      	str	r2, [r5, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	f000 f838 	bl	8009cec <_read>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_read_r+0x1e>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_read_r+0x1e>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	20004118 	.word	0x20004118

08009c8c <_close>:
 8009c8c:	4b02      	ldr	r3, [pc, #8]	; (8009c98 <_close+0xc>)
 8009c8e:	2258      	movs	r2, #88	; 0x58
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	f04f 30ff 	mov.w	r0, #4294967295
 8009c96:	4770      	bx	lr
 8009c98:	20004118 	.word	0x20004118

08009c9c <_fstat>:
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <_fstat+0xc>)
 8009c9e:	2258      	movs	r2, #88	; 0x58
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca6:	4770      	bx	lr
 8009ca8:	20004118 	.word	0x20004118

08009cac <_getpid>:
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <_getpid+0xc>)
 8009cae:	2258      	movs	r2, #88	; 0x58
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb6:	4770      	bx	lr
 8009cb8:	20004118 	.word	0x20004118

08009cbc <_isatty>:
 8009cbc:	4b02      	ldr	r3, [pc, #8]	; (8009cc8 <_isatty+0xc>)
 8009cbe:	2258      	movs	r2, #88	; 0x58
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	20004118 	.word	0x20004118

08009ccc <_kill>:
 8009ccc:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <_kill+0xc>)
 8009cce:	2258      	movs	r2, #88	; 0x58
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd6:	4770      	bx	lr
 8009cd8:	20004118 	.word	0x20004118

08009cdc <_lseek>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <_lseek+0xc>)
 8009cde:	2258      	movs	r2, #88	; 0x58
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce6:	4770      	bx	lr
 8009ce8:	20004118 	.word	0x20004118

08009cec <_read>:
 8009cec:	4b02      	ldr	r3, [pc, #8]	; (8009cf8 <_read+0xc>)
 8009cee:	2258      	movs	r2, #88	; 0x58
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf6:	4770      	bx	lr
 8009cf8:	20004118 	.word	0x20004118

08009cfc <_write>:
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <_write+0xc>)
 8009cfe:	2258      	movs	r2, #88	; 0x58
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	4770      	bx	lr
 8009d08:	20004118 	.word	0x20004118

08009d0c <_exit>:
 8009d0c:	e7fe      	b.n	8009d0c <_exit>
	...

08009d10 <_init>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	bf00      	nop
 8009d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d16:	bc08      	pop	{r3}
 8009d18:	469e      	mov	lr, r3
 8009d1a:	4770      	bx	lr

08009d1c <_fini>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	bf00      	nop
 8009d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d22:	bc08      	pop	{r3}
 8009d24:	469e      	mov	lr, r3
 8009d26:	4770      	bx	lr
